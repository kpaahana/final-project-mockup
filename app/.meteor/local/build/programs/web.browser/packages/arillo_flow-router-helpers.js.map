{"version":3,"sources":["meteor://ðŸ’»app/packages/arillo_flow-router-helpers/client/helpers.coffee","meteor://ðŸ’»app/client/helpers.coffee"],"names":["FlowRouterHelpers","currentRouteName","currentRouteOption","func","helpers","isSubReady","name","param","pathFor","queryParam","subsReady","urlFor","slice","hasProp","hasOwnProperty","subs","arguments","length","call","FlowRouter","_","reduce","memo","sub","path","view","hashBang","query","ref","hash","Error","route","_qs","parse","relativePath","Meteor","absoluteUrl","substr","getParam","key","getQueryParam","getRouteName","optionName","current","options","isClient","Template","registerHelper","isServer"],"mappings":"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","file":"/packages/arillo_flow-router-helpers.js","sourcesContent":["# check for subscriptions to be ready\nsubsReady = (subs...) ->\n  return FlowRouter.subsReady() if subs.length is 1\n  subs = subs.slice(0, subs.length - 1)\n  _.reduce subs, (memo, sub) ->\n    memo and FlowRouter.subsReady(sub)\n  , true\n\n# return path\npathFor = (path, view = {hash:{}}) ->\n  throw new Error('no path defined') unless path\n  # set if run on server\n  view = hash: view unless view.hash\n  if path.hash?.route?\n    view = path\n    path = view.hash.route\n    delete view.hash.route\n  query = if view.hash.query then FlowRouter._qs.parse(view.hash.query) else {}\n  hashBang = if view.hash.hash then view.hash.hash else ''\n  FlowRouter.path(path, view.hash, query) + (if hashBang then \"##{hashBang}\" else '')\n\n# return absolute url\nurlFor = (path, view) ->\n  relativePath = pathFor(path, view)\n  Meteor.absoluteUrl(relativePath.substr(1))\n\n# get parameter\nparam = (name) ->\n  FlowRouter.getParam(name);\n\n# get query parameter\nqueryParam = (key) ->\n  FlowRouter.getQueryParam(key);\n\n# get current route name\ncurrentRouteName = () ->\n  FlowRouter.getRouteName()\n\n# get current route options\ncurrentRouteOption = (optionName) ->\n  FlowRouter.current().route.options[optionName]\n\n# deprecated\nisSubReady = (sub) ->\n  return FlowRouter.subsReady(sub) if sub\n  return FlowRouter.subsReady()\n\nhelpers =\n  subsReady: subsReady\n  pathFor: pathFor\n  urlFor: urlFor\n  param: param\n  queryParam: queryParam\n  currentRouteName: currentRouteName\n  isSubReady: isSubReady\n  currentRouteOption: currentRouteOption\n\nif Meteor.isClient\n  Template.registerHelper name, func for own name, func of helpers\n  \nif Meteor.isServer\n  FlowRouterHelpers = \n    pathFor: pathFor\n    urlFor: urlFor\n","var FlowRouterHelpers, currentRouteName, currentRouteOption, func, helpers, isSubReady, name, param, pathFor, queryParam, subsReady, urlFor,\n  slice = [].slice,\n  hasProp = {}.hasOwnProperty;\n\nsubsReady = function() {\n  var subs;\n  subs = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  if (subs.length === 1) {\n    return FlowRouter.subsReady();\n  }\n  subs = subs.slice(0, subs.length - 1);\n  return _.reduce(subs, function(memo, sub) {\n    return memo && FlowRouter.subsReady(sub);\n  }, true);\n};\n\npathFor = function(path, view) {\n  var hashBang, query, ref;\n  if (view == null) {\n    view = {\n      hash: {}\n    };\n  }\n  if (!path) {\n    throw new Error('no path defined');\n  }\n  if (!view.hash) {\n    view = {\n      hash: view\n    };\n  }\n  if (((ref = path.hash) != null ? ref.route : void 0) != null) {\n    view = path;\n    path = view.hash.route;\n    delete view.hash.route;\n  }\n  query = view.hash.query ? FlowRouter._qs.parse(view.hash.query) : {};\n  hashBang = view.hash.hash ? view.hash.hash : '';\n  return FlowRouter.path(path, view.hash, query) + (hashBang ? \"#\" + hashBang : '');\n};\n\nurlFor = function(path, view) {\n  var relativePath;\n  relativePath = pathFor(path, view);\n  return Meteor.absoluteUrl(relativePath.substr(1));\n};\n\nparam = function(name) {\n  return FlowRouter.getParam(name);\n};\n\nqueryParam = function(key) {\n  return FlowRouter.getQueryParam(key);\n};\n\ncurrentRouteName = function() {\n  return FlowRouter.getRouteName();\n};\n\ncurrentRouteOption = function(optionName) {\n  return FlowRouter.current().route.options[optionName];\n};\n\nisSubReady = function(sub) {\n  if (sub) {\n    return FlowRouter.subsReady(sub);\n  }\n  return FlowRouter.subsReady();\n};\n\nhelpers = {\n  subsReady: subsReady,\n  pathFor: pathFor,\n  urlFor: urlFor,\n  param: param,\n  queryParam: queryParam,\n  currentRouteName: currentRouteName,\n  isSubReady: isSubReady,\n  currentRouteOption: currentRouteOption\n};\n\nif (Meteor.isClient) {\n  for (name in helpers) {\n    if (!hasProp.call(helpers, name)) continue;\n    func = helpers[name];\n    Template.registerHelper(name, func);\n  }\n}\n\nif (Meteor.isServer) {\n  FlowRouterHelpers = {\n    pathFor: pathFor,\n    urlFor: urlFor\n  };\n}\n"]}