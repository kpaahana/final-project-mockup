var require = meteorInstall({"imports":{"ui":{"components":{"directory":{"directory-profile.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/directory/directory-profile.html                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.directory-profile.js");                                                           // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.directory-profile.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/directory/template.directory-profile.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Directory_Profile");                                                                             // 2
Template["Directory_Profile"] = new Template("Template.Directory_Profile", (function() {                               // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    class: "card"                                                                                                      // 6
  }, "\n    ", HTML.DIV({                                                                                              // 7
    class: "content"                                                                                                   // 8
  }, "\n      ", HTML.IMG({                                                                                            // 9
    class: "right floated mini ui image",                                                                              // 10
    src: function() {                                                                                                  // 11
      return Spacebars.mustache(Spacebars.dot(view.lookup("profile"), "picture"));                                     // 12
    }                                                                                                                  // 13
  }), "\n      ", HTML.DIV({                                                                                           // 14
    class: "header"                                                                                                    // 15
  }, "\n        ", Blaze.View("lookup:profile.firstName", function() {                                                 // 16
    return Spacebars.mustache(Spacebars.dot(view.lookup("profile"), "firstName"));                                     // 17
  }), " ", Blaze.View("lookup:profile.lastName", function() {                                                          // 18
    return Spacebars.mustache(Spacebars.dot(view.lookup("profile"), "lastName"));                                      // 19
  }), "\n      "), "\n      ", HTML.DIV({                                                                              // 20
    class: "meta"                                                                                                      // 21
  }, "\n        ", Blaze.View("lookup:profile.title", function() {                                                     // 22
    return Spacebars.mustache(Spacebars.dot(view.lookup("profile"), "title"));                                         // 23
  }), "\n      "), "\n      ", HTML.DIV({                                                                              // 24
    class: "meta"                                                                                                      // 25
  }, "\n        ", Blaze.View("lookup:profile.location", function() {                                                  // 26
    return Spacebars.mustache(Spacebars.dot(view.lookup("profile"), "location"));                                      // 27
  }), "\n      "), "\n      ", HTML.DIV({                                                                              // 28
    class: "description"                                                                                               // 29
  }, "\n        ", Blaze.View("lookup:profile.bio", function() {                                                       // 30
    return Spacebars.mustache(Spacebars.dot(view.lookup("profile"), "bio"));                                           // 31
  }), "\n      "), "\n      ", HTML.DIV({                                                                              // 32
    style: "margin-top: 10px"                                                                                          // 33
  }, "\n        ", Blaze.Each(function() {                                                                             // 34
    return {                                                                                                           // 35
      _sequence: Spacebars.call(Spacebars.dot(view.lookup("profile"), "interests")),                                   // 36
      _variable: "interest"                                                                                            // 37
    };                                                                                                                 // 38
  }, function() {                                                                                                      // 39
    return [ "\n          ", HTML.A({                                                                                  // 40
      style: "margin-bottom: 2px",                                                                                     // 41
      class: "ui teal tag small label"                                                                                 // 42
    }, Blaze.View("lookup:interest", function() {                                                                      // 43
      return Spacebars.mustache(view.lookup("interest"));                                                              // 44
    })), "\n        " ];                                                                                               // 45
  }), "\n      "), "\n\n    "), "\n    ", HTML.DIV({                                                                   // 46
    class: "extra content"                                                                                             // 47
  }, "\n      ", HTML.DIV({                                                                                            // 48
    class: "ui equal width center aligned grid"                                                                        // 49
  }, "\n        ", HTML.DIV({                                                                                          // 50
    class: "column"                                                                                                    // 51
  }, HTML.A({                                                                                                          // 52
    href: function() {                                                                                                 // 53
      return [ "mailto:", Spacebars.mustache(Spacebars.dot(view.lookup("profile"), "username")), "@hawaii.edu" ];      // 54
    }                                                                                                                  // 55
  }, HTML.Raw('<i class="big mail icon"></i>'))), "\n        ", Blaze.If(function() {                                  // 56
    return Spacebars.call(Spacebars.dot(view.lookup("profile"), "github"));                                            // 57
  }, function() {                                                                                                      // 58
    return [ "\n          ", HTML.DIV({                                                                                // 59
      class: "column"                                                                                                  // 60
    }, HTML.A({                                                                                                        // 61
      href: function() {                                                                                               // 62
        return [ "https://github.com/", Spacebars.mustache(Spacebars.dot(view.lookup("profile"), "github")) ];         // 63
      }                                                                                                                // 64
    }, HTML.I({                                                                                                        // 65
      class: "big github icon"                                                                                         // 66
    }))), "\n        " ];                                                                                              // 67
  }), "\n        ", Blaze.If(function() {                                                                              // 68
    return Spacebars.call(Spacebars.dot(view.lookup("profile"), "facebook"));                                          // 69
  }, function() {                                                                                                      // 70
    return [ "\n          ", HTML.DIV({                                                                                // 71
      class: "column"                                                                                                  // 72
    }, HTML.A({                                                                                                        // 73
      href: function() {                                                                                               // 74
        return [ "https://facebook.com/", Spacebars.mustache(Spacebars.dot(view.lookup("profile"), "facebook")) ];     // 75
      }                                                                                                                // 76
    }, HTML.I({                                                                                                        // 77
      class: "big facebook icon"                                                                                       // 78
    }))), "\n        " ];                                                                                              // 79
  }), "\n        ", Blaze.If(function() {                                                                              // 80
    return Spacebars.call(Spacebars.dot(view.lookup("profile"), "instagram"));                                         // 81
  }, function() {                                                                                                      // 82
    return [ "\n          ", HTML.DIV({                                                                                // 83
      class: "column"                                                                                                  // 84
    }, HTML.A({                                                                                                        // 85
      href: function() {                                                                                               // 86
        return [ "https://instagram.com/", Spacebars.mustache(Spacebars.dot(view.lookup("profile"), "instagram")) ];   // 87
      }                                                                                                                // 88
    }, HTML.I({                                                                                                        // 89
      class: "big instagram icon"                                                                                      // 90
    }))), "\n        " ];                                                                                              // 91
  }), "\n      "), "\n    "), "\n  ");                                                                                 // 92
}));                                                                                                                   // 93
                                                                                                                       // 94
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/directory/index.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.watch(require("./directory-profile.html"));                                                                     // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"form-controls":{"checkbox-field.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/checkbox-field.html                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.checkbox-field.js");                                                              // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.checkbox-field.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/template.checkbox-field.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Checkbox_Field");                                                                                // 2
Template["Checkbox_Field"] = new Template("Template.Checkbox_Field", (function() {                                     // 3
  var view = this;                                                                                                     // 4
  return [ "\n  ", HTML.DIV({                                                                                          // 5
    class: "field"                                                                                                     // 6
  }, "\n    ", HTML.DIV({                                                                                              // 7
    class: "ui checkbox"                                                                                               // 8
  }, "\n      ", HTML.INPUT({                                                                                          // 9
    type: "checkbox",                                                                                                  // 10
    name: function() {                                                                                                 // 11
      return Blaze.If(function() {                                                                                     // 12
        return Spacebars.call(view.lookup("name"));                                                                    // 13
      }, function() {                                                                                                  // 14
        return Blaze.View("lookup:name", function() {                                                                  // 15
          return Spacebars.mustache(view.lookup("name"));                                                              // 16
        });                                                                                                            // 17
      }, function() {                                                                                                  // 18
        return Blaze.View("lookup:label", function() {                                                                 // 19
          return Spacebars.mustache(view.lookup("label"));                                                             // 20
        });                                                                                                            // 21
      });                                                                                                              // 22
    },                                                                                                                 // 23
    id: function() {                                                                                                   // 24
      return Blaze.If(function() {                                                                                     // 25
        return Spacebars.call(view.lookup("id"));                                                                      // 26
      }, function() {                                                                                                  // 27
        return Blaze.View("lookup:id", function() {                                                                    // 28
          return Spacebars.mustache(view.lookup("id"));                                                                // 29
        });                                                                                                            // 30
      }, function() {                                                                                                  // 31
        return Blaze.View("lookup:label", function() {                                                                 // 32
          return Spacebars.mustache(view.lookup("label"));                                                             // 33
        });                                                                                                            // 34
      });                                                                                                              // 35
    },                                                                                                                 // 36
    value: function() {                                                                                                // 37
      return Blaze.If(function() {                                                                                     // 38
        return Spacebars.call(view.lookup("value"));                                                                   // 39
      }, function() {                                                                                                  // 40
        return Blaze.View("lookup:value", function() {                                                                 // 41
          return Spacebars.mustache(view.lookup("value"));                                                             // 42
        });                                                                                                            // 43
      }, function() {                                                                                                  // 44
        return Blaze.View("lookup:label", function() {                                                                 // 45
          return Spacebars.mustache(view.lookup("label"));                                                             // 46
        });                                                                                                            // 47
      });                                                                                                              // 48
    },                                                                                                                 // 49
    checked: function() {                                                                                              // 50
      return Spacebars.mustache(view.lookup("checked"));                                                               // 51
    }                                                                                                                  // 52
  }), "\n      ", HTML.LABEL(Blaze.View("lookup:label", function() {                                                   // 53
    return Spacebars.mustache(view.lookup("label"));                                                                   // 54
  })), "\n    "), "\n  ") ];                                                                                           // 55
}));                                                                                                                   // 56
                                                                                                                       // 57
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"checkbox-form-control.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/checkbox-form-control.html                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.checkbox-form-control.js");                                                       // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.checkbox-form-control.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/template.checkbox-form-control.js                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Checkbox_Form_Control");                                                                         // 2
Template["Checkbox_Form_Control"] = new Template("Template.Checkbox_Form_Control", (function() {                       // 3
  var view = this;                                                                                                     // 4
  return [ "\n  ", HTML.DIV({                                                                                          // 5
    class: "field"                                                                                                     // 6
  }, "\n    ", HTML.LABEL(Blaze.View("lookup:label", function() {                                                      // 7
    return Spacebars.mustache(view.lookup("label"));                                                                   // 8
  })), "\n    ", HTML.DIV({                                                                                            // 9
    class: "fields"                                                                                                    // 10
  }, "\n      ", Blaze.Each(function() {                                                                               // 11
    return {                                                                                                           // 12
      _sequence: Spacebars.call(view.lookup("checkboxes")),                                                            // 13
      _variable: "checkbox"                                                                                            // 14
    };                                                                                                                 // 15
  }, function() {                                                                                                      // 16
    return [ "\n        ", Blaze._TemplateWith(function() {                                                            // 17
      return {                                                                                                         // 18
        name: Spacebars.call(Spacebars.dot(view.lookup("checkbox"), "name")),                                          // 19
        id: Spacebars.call(Spacebars.dot(view.lookup("checkbox"), "id")),                                              // 20
        label: Spacebars.call(Spacebars.dot(view.lookup("checkbox"), "label")),                                        // 21
        value: Spacebars.call(Spacebars.dot(view.lookup("checkbox"), "value")),                                        // 22
        checked: Spacebars.call(Spacebars.dot(view.lookup("checkbox"), "checked"))                                     // 23
      };                                                                                                               // 24
    }, function() {                                                                                                    // 25
      return Spacebars.include(view.lookupTemplate("Checkbox_Field"));                                                 // 26
    }), "\n      " ];                                                                                                  // 27
  }), "\n    "), "\n  ") ];                                                                                            // 28
}));                                                                                                                   // 29
                                                                                                                       // 30
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"form-error-message.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/form-error-message.html                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.form-error-message.js");                                                          // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.form-error-message.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/template.form-error-message.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Form_Error_Message");                                                                            // 2
Template["Form_Error_Message"] = new Template("Template.Form_Error_Message", (function() {                             // 3
  var view = this;                                                                                                     // 4
  return [ "\n  ", Blaze.If(function() {                                                                               // 5
    return Spacebars.call(view.lookup("errorMessage"));                                                                // 6
  }, function() {                                                                                                      // 7
    return [ "\n    ", HTML.DIV({                                                                                      // 8
      class: "ui error message"                                                                                        // 9
    }, "\n      ", Blaze.View("lookup:errorMessage", function() {                                                      // 10
      return Spacebars.mustache(view.lookup("errorMessage"));                                                          // 11
    }), "\n    "), "\n  " ];                                                                                           // 12
  }) ];                                                                                                                // 13
}));                                                                                                                   // 14
                                                                                                                       // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"radio-field.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/radio-field.html                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.radio-field.js");                                                                 // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.radio-field.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/template.radio-field.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Radio_Field");                                                                                   // 2
Template["Radio_Field"] = new Template("Template.Radio_Field", (function() {                                           // 3
  var view = this;                                                                                                     // 4
  return [ "\n  ", HTML.DIV({                                                                                          // 5
    class: "field"                                                                                                     // 6
  }, "\n    ", HTML.DIV({                                                                                              // 7
    class: "ui radio checkbox"                                                                                         // 8
  }, "\n      ", HTML.INPUT({                                                                                          // 9
    type: "radio",                                                                                                     // 10
    name: function() {                                                                                                 // 11
      return Spacebars.mustache(view.lookup("name"));                                                                  // 12
    },                                                                                                                 // 13
    id: function() {                                                                                                   // 14
      return Blaze.If(function() {                                                                                     // 15
        return Spacebars.call(view.lookup("id"));                                                                      // 16
      }, function() {                                                                                                  // 17
        return Blaze.View("lookup:id", function() {                                                                    // 18
          return Spacebars.mustache(view.lookup("id"));                                                                // 19
        });                                                                                                            // 20
      }, function() {                                                                                                  // 21
        return Blaze.View("lookup:label", function() {                                                                 // 22
          return Spacebars.mustache(view.lookup("label"));                                                             // 23
        });                                                                                                            // 24
      });                                                                                                              // 25
    },                                                                                                                 // 26
    value: function() {                                                                                                // 27
      return Blaze.If(function() {                                                                                     // 28
        return Spacebars.call(view.lookup("value"));                                                                   // 29
      }, function() {                                                                                                  // 30
        return Blaze.View("lookup:value", function() {                                                                 // 31
          return Spacebars.mustache(view.lookup("value"));                                                             // 32
        });                                                                                                            // 33
      }, function() {                                                                                                  // 34
        return Blaze.View("lookup:label", function() {                                                                 // 35
          return Spacebars.mustache(view.lookup("label"));                                                             // 36
        });                                                                                                            // 37
      });                                                                                                              // 38
    },                                                                                                                 // 39
    checked: function() {                                                                                              // 40
      return Spacebars.mustache(view.lookup("checked"));                                                               // 41
    }                                                                                                                  // 42
  }), "\n      ", HTML.LABEL(Blaze.View("lookup:label", function() {                                                   // 43
    return Spacebars.mustache(view.lookup("label"));                                                                   // 44
  })), "\n    "), "\n  ") ];                                                                                           // 45
}));                                                                                                                   // 46
                                                                                                                       // 47
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"radio-form-control.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/radio-form-control.html                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.radio-form-control.js");                                                          // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.radio-form-control.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/template.radio-form-control.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Radio_Form_Control");                                                                            // 2
Template["Radio_Form_Control"] = new Template("Template.Radio_Form_Control", (function() {                             // 3
  var view = this;                                                                                                     // 4
  return [ "\n  ", HTML.DIV({                                                                                          // 5
    class: function() {                                                                                                // 6
      return [ Blaze.If(function() {                                                                                   // 7
        return Spacebars.call(view.lookup("required"));                                                                // 8
      }, function() {                                                                                                  // 9
        return "required";                                                                                             // 10
      }), " field" ];                                                                                                  // 11
    }                                                                                                                  // 12
  }, "\n    ", HTML.LABEL(Blaze.View("lookup:label", function() {                                                      // 13
    return Spacebars.mustache(view.lookup("label"));                                                                   // 14
  })), "\n    ", HTML.DIV({                                                                                            // 15
    class: "fields"                                                                                                    // 16
  }, "\n      ", Blaze.Each(function() {                                                                               // 17
    return {                                                                                                           // 18
      _sequence: Spacebars.call(view.lookup("radios")),                                                                // 19
      _variable: "radio"                                                                                               // 20
    };                                                                                                                 // 21
  }, function() {                                                                                                      // 22
    return [ "\n        ", Blaze._TemplateWith(function() {                                                            // 23
      return {                                                                                                         // 24
        name: Spacebars.call(view.lookup("name")),                                                                     // 25
        label: Spacebars.call(Spacebars.dot(view.lookup("radio"), "label")),                                           // 26
        checked: Spacebars.call(Spacebars.dot(view.lookup("radio"), "checked"))                                        // 27
      };                                                                                                               // 28
    }, function() {                                                                                                    // 29
      return Spacebars.include(view.lookupTemplate("Radio_Field"));                                                    // 30
    }), "\n      " ];                                                                                                  // 31
  }), "\n    "), "\n    ", Blaze._TemplateWith(function() {                                                            // 32
    return {                                                                                                           // 33
      errorMessage: Spacebars.call(view.lookup("errorMessage"))                                                        // 34
    };                                                                                                                 // 35
  }, function() {                                                                                                      // 36
    return Spacebars.include(view.lookupTemplate("Form_Error_Message"));                                               // 37
  }), "\n  ") ];                                                                                                       // 38
}));                                                                                                                   // 39
                                                                                                                       // 40
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"select-form-control.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/select-form-control.html                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.select-form-control.js");                                                         // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.select-form-control.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/template.select-form-control.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Select_Form_Control");                                                                           // 2
Template["Select_Form_Control"] = new Template("Template.Select_Form_Control", (function() {                           // 3
  var view = this;                                                                                                     // 4
  return [ "\n\n  ", HTML.DIV({                                                                                        // 5
    class: function() {                                                                                                // 6
      return [ Blaze.If(function() {                                                                                   // 7
        return Spacebars.call(view.lookup("required"));                                                                // 8
      }, function() {                                                                                                  // 9
        return "required";                                                                                             // 10
      }), " field" ];                                                                                                  // 11
    }                                                                                                                  // 12
  }, "\n    ", HTML.LABEL(Blaze.View("lookup:label", function() {                                                      // 13
    return Spacebars.mustache(view.lookup("label"));                                                                   // 14
  })), "\n    ", HTML.SELECT({                                                                                         // 15
    multiple: function() {                                                                                             // 16
      return Spacebars.mustache(view.lookup("multiple"));                                                              // 17
    },                                                                                                                 // 18
    class: "ui dropdown",                                                                                              // 19
    name: function() {                                                                                                 // 20
      return Blaze.If(function() {                                                                                     // 21
        return Spacebars.call(view.lookup("name"));                                                                    // 22
      }, function() {                                                                                                  // 23
        return Blaze.View("lookup:name", function() {                                                                  // 24
          return Spacebars.mustache(view.lookup("name"));                                                              // 25
        });                                                                                                            // 26
      }, function() {                                                                                                  // 27
        return Blaze.View("lookup:label", function() {                                                                 // 28
          return Spacebars.mustache(view.lookup("label"));                                                             // 29
        });                                                                                                            // 30
      });                                                                                                              // 31
    }                                                                                                                  // 32
  }, "\n      ", HTML.OPTION({                                                                                         // 33
    value: ""                                                                                                          // 34
  }, "(Select ", Blaze.If(function() {                                                                                 // 35
    return Spacebars.call(view.lookup("multiple"));                                                                    // 36
  }, function() {                                                                                                      // 37
    return "One or More";                                                                                              // 38
  }, function() {                                                                                                      // 39
    return "One";                                                                                                      // 40
  }), ")"), "\n      ", Blaze.Each(function() {                                                                        // 41
    return {                                                                                                           // 42
      _sequence: Spacebars.call(view.lookup("options")),                                                               // 43
      _variable: "option"                                                                                              // 44
    };                                                                                                                 // 45
  }, function() {                                                                                                      // 46
    return [ "\n        ", HTML.OPTION({                                                                               // 47
      value: function() {                                                                                              // 48
        return Blaze.If(function() {                                                                                   // 49
          return Spacebars.call(Spacebars.dot(view.lookup("option"), "value"));                                        // 50
        }, function() {                                                                                                // 51
          return Blaze.View("lookup:option.value", function() {                                                        // 52
            return Spacebars.mustache(Spacebars.dot(view.lookup("option"), "value"));                                  // 53
          });                                                                                                          // 54
        }, function() {                                                                                                // 55
          return Blaze.View("lookup:option.label", function() {                                                        // 56
            return Spacebars.mustache(Spacebars.dot(view.lookup("option"), "label"));                                  // 57
          });                                                                                                          // 58
        });                                                                                                            // 59
      },                                                                                                               // 60
      selected: function() {                                                                                           // 61
        return Spacebars.mustache(Spacebars.dot(view.lookup("option"), "selected"));                                   // 62
      }                                                                                                                // 63
    }, Blaze.View("lookup:option.label", function() {                                                                  // 64
      return Spacebars.mustache(Spacebars.dot(view.lookup("option"), "label"));                                        // 65
    })), "\n      " ];                                                                                                 // 66
  }), "\n    "), "\n    ", Blaze._TemplateWith(function() {                                                            // 67
    return {                                                                                                           // 68
      errorMessage: Spacebars.call(view.lookup("errorMessage"))                                                        // 69
    };                                                                                                                 // 70
  }, function() {                                                                                                      // 71
    return Spacebars.include(view.lookupTemplate("Form_Error_Message"));                                               // 72
  }), "\n  ") ];                                                                                                       // 73
}));                                                                                                                   // 74
                                                                                                                       // 75
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"social-network-form-control.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/social-network-form-control.html                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.social-network-form-control.js");                                                 // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.social-network-form-control.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/template.social-network-form-control.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Social_Network_Form_Control");                                                                   // 2
Template["Social_Network_Form_Control"] = new Template("Template.Social_Network_Form_Control", (function() {           // 3
  var view = this;                                                                                                     // 4
  return [ "\n  ", HTML.DIV({                                                                                          // 5
    class: function() {                                                                                                // 6
      return [ Blaze.If(function() {                                                                                   // 7
        return Spacebars.call(view.lookup("required"));                                                                // 8
      }, function() {                                                                                                  // 9
        return "required";                                                                                             // 10
      }), " field" ];                                                                                                  // 11
    }                                                                                                                  // 12
  }, "\n    ", HTML.LABEL(Blaze.View("lookup:label", function() {                                                      // 13
    return Spacebars.mustache(view.lookup("label"));                                                                   // 14
  })), "\n    ", HTML.DIV({                                                                                            // 15
    class: "field"                                                                                                     // 16
  }, "\n      ", HTML.DIV({                                                                                            // 17
    class: "ui left icon input"                                                                                        // 18
  }, "\n        ", HTML.INPUT({                                                                                        // 19
    type: "input",                                                                                                     // 20
    name: function() {                                                                                                 // 21
      return Blaze.If(function() {                                                                                     // 22
        return Spacebars.call(view.lookup("name"));                                                                    // 23
      }, function() {                                                                                                  // 24
        return Blaze.View("lookup:name", function() {                                                                  // 25
          return Spacebars.mustache(view.lookup("name"));                                                              // 26
        });                                                                                                            // 27
      }, function() {                                                                                                  // 28
        return Blaze.View("lookup:label", function() {                                                                 // 29
          return Spacebars.mustache(view.lookup("label"));                                                             // 30
        });                                                                                                            // 31
      });                                                                                                              // 32
    },                                                                                                                 // 33
    id: function() {                                                                                                   // 34
      return Blaze.If(function() {                                                                                     // 35
        return Spacebars.call(view.lookup("id"));                                                                      // 36
      }, function() {                                                                                                  // 37
        return Blaze.View("lookup:id", function() {                                                                    // 38
          return Spacebars.mustache(view.lookup("id"));                                                                // 39
        });                                                                                                            // 40
      }, function() {                                                                                                  // 41
        return Blaze.View("lookup:label", function() {                                                                 // 42
          return Spacebars.mustache(view.lookup("label"));                                                             // 43
        });                                                                                                            // 44
      });                                                                                                              // 45
    },                                                                                                                 // 46
    placeholder: function() {                                                                                          // 47
      return Blaze.If(function() {                                                                                     // 48
        return Spacebars.call(view.lookup("placeholder"));                                                             // 49
      }, function() {                                                                                                  // 50
        return Blaze.View("lookup:placeholder", function() {                                                           // 51
          return Spacebars.mustache(view.lookup("placeholder"));                                                       // 52
        });                                                                                                            // 53
      }, function() {                                                                                                  // 54
        return Blaze.View("lookup:label", function() {                                                                 // 55
          return Spacebars.mustache(view.lookup("label"));                                                             // 56
        });                                                                                                            // 57
      });                                                                                                              // 58
    },                                                                                                                 // 59
    value: function() {                                                                                                // 60
      return Spacebars.mustache(view.lookup("value"));                                                                 // 61
    }                                                                                                                  // 62
  }), "\n        ", HTML.I({                                                                                           // 63
    class: function() {                                                                                                // 64
      return [ Spacebars.mustache(view.lookup("icon")), " icon" ];                                                     // 65
    }                                                                                                                  // 66
  }), "\n      "), "\n    "), "\n    ", Blaze._TemplateWith(function() {                                               // 67
    return {                                                                                                           // 68
      errorMessage: Spacebars.call(view.lookup("errorMessage"))                                                        // 69
    };                                                                                                                 // 70
  }, function() {                                                                                                      // 71
    return Spacebars.include(view.lookupTemplate("Form_Error_Message"));                                               // 72
  }), "\n  ") ];                                                                                                       // 73
}));                                                                                                                   // 74
                                                                                                                       // 75
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"text-form-control.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/text-form-control.html                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.text-form-control.js");                                                           // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.text-form-control.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/template.text-form-control.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Text_Form_Control");                                                                             // 2
Template["Text_Form_Control"] = new Template("Template.Text_Form_Control", (function() {                               // 3
  var view = this;                                                                                                     // 4
  return [ "\n  ", HTML.DIV({                                                                                          // 5
    class: function() {                                                                                                // 6
      return [ Blaze.If(function() {                                                                                   // 7
        return Spacebars.call(view.lookup("required"));                                                                // 8
      }, function() {                                                                                                  // 9
        return "required";                                                                                             // 10
      }), " field" ];                                                                                                  // 11
    }                                                                                                                  // 12
  }, "\n    ", HTML.LABEL(Blaze.View("lookup:label", function() {                                                      // 13
    return Spacebars.mustache(view.lookup("label"));                                                                   // 14
  })), "\n    ", HTML.DIV({                                                                                            // 15
    class: "field"                                                                                                     // 16
  }, "\n      ", HTML.INPUT({                                                                                          // 17
    type: "text",                                                                                                      // 18
    name: function() {                                                                                                 // 19
      return Blaze.If(function() {                                                                                     // 20
        return Spacebars.call(view.lookup("name"));                                                                    // 21
      }, function() {                                                                                                  // 22
        return Blaze.View("lookup:name", function() {                                                                  // 23
          return Spacebars.mustache(view.lookup("name"));                                                              // 24
        });                                                                                                            // 25
      }, function() {                                                                                                  // 26
        return Blaze.View("lookup:label", function() {                                                                 // 27
          return Spacebars.mustache(view.lookup("label"));                                                             // 28
        });                                                                                                            // 29
      });                                                                                                              // 30
    },                                                                                                                 // 31
    id: function() {                                                                                                   // 32
      return Blaze.If(function() {                                                                                     // 33
        return Spacebars.call(view.lookup("id"));                                                                      // 34
      }, function() {                                                                                                  // 35
        return Blaze.View("lookup:id", function() {                                                                    // 36
          return Spacebars.mustache(view.lookup("id"));                                                                // 37
        });                                                                                                            // 38
      }, function() {                                                                                                  // 39
        return Blaze.View("lookup:label", function() {                                                                 // 40
          return Spacebars.mustache(view.lookup("label"));                                                             // 41
        });                                                                                                            // 42
      });                                                                                                              // 43
    },                                                                                                                 // 44
    placeholder: function() {                                                                                          // 45
      return Blaze.If(function() {                                                                                     // 46
        return Spacebars.call(view.lookup("placeholder"));                                                             // 47
      }, function() {                                                                                                  // 48
        return Blaze.View("lookup:placeholder", function() {                                                           // 49
          return Spacebars.mustache(view.lookup("placeholder"));                                                       // 50
        });                                                                                                            // 51
      }, function() {                                                                                                  // 52
        return Blaze.View("lookup:label", function() {                                                                 // 53
          return Spacebars.mustache(view.lookup("label"));                                                             // 54
        });                                                                                                            // 55
      });                                                                                                              // 56
    },                                                                                                                 // 57
    value: function() {                                                                                                // 58
      return Spacebars.mustache(view.lookup("value"));                                                                 // 59
    }                                                                                                                  // 60
  }), "\n    "), "\n    ", Blaze._TemplateWith(function() {                                                            // 61
    return {                                                                                                           // 62
      errorMessage: Spacebars.call(view.lookup("errorMessage"))                                                        // 63
    };                                                                                                                 // 64
  }, function() {                                                                                                      // 65
    return Spacebars.include(view.lookupTemplate("Form_Error_Message"));                                               // 66
  }), "\n  ") ];                                                                                                       // 67
}));                                                                                                                   // 68
                                                                                                                       // 69
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"textarea-form-control.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/textarea-form-control.html                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.textarea-form-control.js");                                                       // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.textarea-form-control.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/template.textarea-form-control.js                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("TextArea_Form_Control");                                                                         // 2
Template["TextArea_Form_Control"] = new Template("Template.TextArea_Form_Control", (function() {                       // 3
  var view = this;                                                                                                     // 4
  return [ "\n  ", HTML.DIV({                                                                                          // 5
    class: function() {                                                                                                // 6
      return [ Blaze.If(function() {                                                                                   // 7
        return Spacebars.call(view.lookup("required"));                                                                // 8
      }, function() {                                                                                                  // 9
        return "required";                                                                                             // 10
      }), " field" ];                                                                                                  // 11
    }                                                                                                                  // 12
  }, "\n    ", HTML.LABEL(Blaze.If(function() {                                                                        // 13
    return Spacebars.call(view.lookup("label"));                                                                       // 14
  }, function() {                                                                                                      // 15
    return Blaze.View("lookup:label", function() {                                                                     // 16
      return Spacebars.mustache(view.lookup("label"));                                                                 // 17
    });                                                                                                                // 18
  }, function() {                                                                                                      // 19
    return Blaze.View("lookup:name", function() {                                                                      // 20
      return Spacebars.mustache(view.lookup("name"));                                                                  // 21
    });                                                                                                                // 22
  })), "\n    ", HTML.TEXTAREA({                                                                                       // 23
    rows: function() {                                                                                                 // 24
      return Blaze.If(function() {                                                                                     // 25
        return Spacebars.call(view.lookup("rows"));                                                                    // 26
      }, function() {                                                                                                  // 27
        return Blaze.View("lookup:rows", function() {                                                                  // 28
          return Spacebars.mustache(view.lookup("rows"));                                                              // 29
        });                                                                                                            // 30
      }, function() {                                                                                                  // 31
        return "5";                                                                                                    // 32
      });                                                                                                              // 33
    },                                                                                                                 // 34
    name: function() {                                                                                                 // 35
      return Blaze.If(function() {                                                                                     // 36
        return Spacebars.call(view.lookup("name"));                                                                    // 37
      }, function() {                                                                                                  // 38
        return Blaze.View("lookup:name", function() {                                                                  // 39
          return Spacebars.mustache(view.lookup("name"));                                                              // 40
        });                                                                                                            // 41
      }, function() {                                                                                                  // 42
        return Blaze.View("lookup:label", function() {                                                                 // 43
          return Spacebars.mustache(view.lookup("label"));                                                             // 44
        });                                                                                                            // 45
      });                                                                                                              // 46
    },                                                                                                                 // 47
    id: function() {                                                                                                   // 48
      return Blaze.If(function() {                                                                                     // 49
        return Spacebars.call(view.lookup("id"));                                                                      // 50
      }, function() {                                                                                                  // 51
        return Blaze.View("lookup:id", function() {                                                                    // 52
          return Spacebars.mustache(view.lookup("id"));                                                                // 53
        });                                                                                                            // 54
      }, function() {                                                                                                  // 55
        return Blaze.View("lookup:name", function() {                                                                  // 56
          return Spacebars.mustache(view.lookup("name"));                                                              // 57
        });                                                                                                            // 58
      });                                                                                                              // 59
    },                                                                                                                 // 60
    placeholder: function() {                                                                                          // 61
      return Blaze.If(function() {                                                                                     // 62
        return Spacebars.call(view.lookup("placeholder"));                                                             // 63
      }, function() {                                                                                                  // 64
        return Blaze.View("lookup:placeholder", function() {                                                           // 65
          return Spacebars.mustache(view.lookup("placeholder"));                                                       // 66
        });                                                                                                            // 67
      }, function() {                                                                                                  // 68
        return Blaze.View("lookup:label", function() {                                                                 // 69
          return Spacebars.mustache(view.lookup("label"));                                                             // 70
        });                                                                                                            // 71
      });                                                                                                              // 72
    },                                                                                                                 // 73
    value: function() {                                                                                                // 74
      return Spacebars.mustache(view.lookup("value"));                                                                 // 75
    }                                                                                                                  // 76
  }), "\n  "), "\n  ", Blaze._TemplateWith(function() {                                                                // 77
    return {                                                                                                           // 78
      errorMessage: Spacebars.call(view.lookup("errorMessage"))                                                        // 79
    };                                                                                                                 // 80
  }, function() {                                                                                                      // 81
    return Spacebars.include(view.lookupTemplate("Form_Error_Message"));                                               // 82
  }) ];                                                                                                                // 83
}));                                                                                                                   // 84
                                                                                                                       // 85
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"checkbox-field.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/checkbox-field.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Template = void 0;                                                                                                 // 1
module.watch(require("meteor/templating"), {                                                                           // 1
  Template: function (v) {                                                                                             // 1
    Template = v;                                                                                                      // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
Template.Checkbox_Field.onRendered(function () {                                                                       // 3
  function onRendered() {                                                                                              // 3
    this.$('.ui.checkbox').checkbox();                                                                                 // 4
  }                                                                                                                    // 5
                                                                                                                       //
  return onRendered;                                                                                                   // 3
}());                                                                                                                  // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"form-control-utilities.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/form-control-utilities.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _ = void 0;                                                                                                        // 1
                                                                                                                       //
module.watch(require("meteor/underscore"), {                                                                           // 1
  _: function (v) {                                                                                                    // 1
    _ = v;                                                                                                             // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
var Template = void 0;                                                                                                 // 1
module.watch(require("meteor/templating"), {                                                                           // 1
  Template: function (v) {                                                                                             // 1
    Template = v;                                                                                                      // 1
  }                                                                                                                    // 1
}, 1);                                                                                                                 // 1
/**                                                                                                                    // 4
 * fieldError is used by both Create_Student_Data_Page and Edit_Student_Data_Page, so we register it globally.         //
 */Template.registerHelper('fieldError', function (fieldName) {                                                        //
  var invalidKeys = Template.instance().context.validationErrors();                                                    // 8
                                                                                                                       //
  var errorObject = _.find(invalidKeys, function (keyObj) {                                                            // 9
    return keyObj.name === fieldName;                                                                                  // 9
  });                                                                                                                  // 9
                                                                                                                       //
  return errorObject && Template.instance().context.keyErrorMessage(errorObject.name);                                 // 10
});                                                                                                                    // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/index.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.watch(require("./checkbox-field.html"));                                                                        // 1
module.watch(require("./checkbox-field"));                                                                             // 1
module.watch(require("./checkbox-form-control.html"));                                                                 // 1
module.watch(require("./form-control-utilities"));                                                                     // 1
module.watch(require("./form-error-message.html"));                                                                    // 1
module.watch(require("./radio-field.html"));                                                                           // 1
module.watch(require("./radio-field"));                                                                                // 1
module.watch(require("./radio-form-control.html"));                                                                    // 1
module.watch(require("./select-form-control.html"));                                                                   // 1
module.watch(require("./select-form-control"));                                                                        // 1
module.watch(require("./social-network-form-control"));                                                                // 1
module.watch(require("./text-form-control.html"));                                                                     // 1
module.watch(require("./textarea-form-control.html"));                                                                 // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"radio-field.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/radio-field.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Template = void 0;                                                                                                 // 1
module.watch(require("meteor/templating"), {                                                                           // 1
  Template: function (v) {                                                                                             // 1
    Template = v;                                                                                                      // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
Template.Radio_Field.onRendered(function () {                                                                          // 3
  function onRendered() {                                                                                              // 3
    this.$('.ui.radio.checkbox').checkbox();                                                                           // 4
  }                                                                                                                    // 5
                                                                                                                       //
  return onRendered;                                                                                                   // 3
}());                                                                                                                  // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"select-form-control.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/form-controls/select-form-control.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Template = void 0;                                                                                                 // 1
module.watch(require("meteor/templating"), {                                                                           // 1
  Template: function (v) {                                                                                             // 1
    Template = v;                                                                                                      // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
Template.Select_Form_Control.onRendered(function () {                                                                  // 3
  function onRendered() {                                                                                              // 3
    this.$('select.dropdown').dropdown();                                                                              // 4
  }                                                                                                                    // 5
                                                                                                                       //
  return onRendered;                                                                                                   // 3
}());                                                                                                                  // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"landing":{"cas-login.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/landing/cas-login.html                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.cas-login.js");                                                                   // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.cas-login.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/landing/template.cas-login.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Cas_Login");                                                                                     // 2
Template["Cas_Login"] = new Template("Template.Cas_Login", (function() {                                               // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    class: function() {                                                                                                // 6
      return [ "ui primary ", Spacebars.mustache(view.lookup("size")), " button" ];                                    // 7
    }                                                                                                                  // 8
  }, "\n      ", Blaze.If(function() {                                                                                 // 9
    return Spacebars.call(view.lookup("currentUser"));                                                                 // 10
  }, function() {                                                                                                      // 11
    return [ "\n      ", HTML.DIV({                                                                                    // 12
      class: "cas-logout"                                                                                              // 13
    }, "Logout"), "\n      " ];                                                                                        // 14
  }, function() {                                                                                                      // 15
    return [ "\n      ", HTML.DIV({                                                                                    // 16
      class: "cas-login"                                                                                               // 17
    }, "Login"), "\n      " ];                                                                                         // 18
  }), "\n    ");                                                                                                       // 19
}));                                                                                                                   // 20
                                                                                                                       // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cas-login.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/landing/cas-login.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Template = void 0;                                                                                                 // 1
module.watch(require("meteor/templating"), {                                                                           // 1
  Template: function (v) {                                                                                             // 1
    Template = v;                                                                                                      // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
var Meteor = void 0;                                                                                                   // 1
module.watch(require("meteor/meteor"), {                                                                               // 1
  Meteor: function (v) {                                                                                               // 1
    Meteor = v;                                                                                                        // 1
  }                                                                                                                    // 1
}, 1);                                                                                                                 // 1
/* eslint-disable no-console */Template.Cas_Login.events({                                                             // 4
  /**                                                                                                                  // 7
   * Handle the click on the logout link.                                                                              //
   * @param event The click event.                                                                                     //
   * @returns {boolean} False.                                                                                         //
   */'click .cas-logout': function () {                                                                                //
    function casLogout(event) {                                                                                        // 12
      event.preventDefault();                                                                                          // 13
      Meteor.logout();                                                                                                 // 14
      return false;                                                                                                    // 15
    }                                                                                                                  // 16
                                                                                                                       //
    return casLogout;                                                                                                  // 12
  }(),                                                                                                                 // 12
  /**                                                                                                                  // 18
   * Handle the click on the login link.                                                                               //
   * @param event The click event.                                                                                     //
   * @returns {boolean} False.                                                                                         //
   */'click .cas-login': function () {                                                                                 //
    function casLogin(event) {                                                                                         // 23
      event.preventDefault();                                                                                          // 24
                                                                                                                       //
      var callback = function () {                                                                                     // 25
        function loginCallback(error) {                                                                                // 25
          if (error) {                                                                                                 // 26
            console.log(error);                                                                                        // 27
          }                                                                                                            // 28
        }                                                                                                              // 29
                                                                                                                       //
        return loginCallback;                                                                                          // 25
      }();                                                                                                             // 25
                                                                                                                       //
      Meteor.loginWithCas(callback);                                                                                   // 30
      return false;                                                                                                    // 31
    }                                                                                                                  // 32
                                                                                                                       //
    return casLogin;                                                                                                   // 23
  }()                                                                                                                  // 23
});                                                                                                                    // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/landing/index.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.watch(require("./cas-login.html"));                                                                             // 1
module.watch(require("./cas-login.js"));                                                                               // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"user":{"interests-form-field.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user/interests-form-field.html                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.interests-form-field.js");                                                        // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.interests-form-field.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user/template.interests-form-field.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Interests_Form_Field");                                                                          // 2
Template["Interests_Form_Field"] = new Template("Template.Interests_Form_Field", (function() {                         // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    class: function() {                                                                                                // 6
      return [ Blaze.If(function() {                                                                                   // 7
        return Spacebars.call(view.lookup("required"));                                                                // 8
      }, function() {                                                                                                  // 9
        return "required";                                                                                             // 10
      }), " field" ];                                                                                                  // 11
    }                                                                                                                  // 12
  }, HTML.Raw('\n    <label>Interest(s)</label>\n    <select multiple="" class="ui dropdown" name="interests">\n      <option value="">Select Interest(s)</option>\n        <option value="algorithms">Algorithms</option>\n        <option value="software-engineering">Software Engineering</option>\n        <option value="scuba">Scuba</option>\n        <option value="accreditation">Accreditation</option>\n        <option value="surfing">Surfing</option>\n    </select>\n  '));
}));                                                                                                                   // 14
                                                                                                                       // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user/index.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.watch(require("./interests-form-field.html"));                                                                  // 1
module.watch(require("./interests-form-field.js"));                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"interests-form-field.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user/interests-form-field.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Template = void 0;                                                                                                 // 1
module.watch(require("meteor/templating"), {                                                                           // 1
  Template: function (v) {                                                                                             // 1
    Template = v;                                                                                                      // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
Template.Interests_Form_Field.onRendered(function () {                                                                 // 3
  function onRendered() {                                                                                              // 3
    this.$('.dropdown').dropdown();                                                                                    // 4
  }                                                                                                                    // 5
                                                                                                                       //
  return onRendered;                                                                                                   // 3
}());                                                                                                                  // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"layouts":{"directory":{"directory-layout.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/directory/directory-layout.html                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.directory-layout.js");                                                            // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.directory-layout.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/directory/template.directory-layout.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Directory_Layout");                                                                              // 2
Template["Directory_Layout"] = new Template("Template.Directory_Layout", (function() {                                 // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return {                                                                                                           // 6
      template: Spacebars.call(view.lookup("main"))                                                                    // 7
    };                                                                                                                 // 8
  }, function() {                                                                                                      // 9
    return Spacebars.include(function() {                                                                              // 10
      return Spacebars.call(Template.__dynamic);                                                                       // 11
    });                                                                                                                // 12
  });                                                                                                                  // 13
}));                                                                                                                   // 14
                                                                                                                       // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/directory/index.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.watch(require("./directory-layout.html"));                                                                      // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"landing":{"landing-layout.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/landing/landing-layout.html                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.landing-layout.js");                                                              // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.landing-layout.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/landing/template.landing-layout.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Landing_Layout");                                                                                // 2
Template["Landing_Layout"] = new Template("Template.Landing_Layout", (function() {                                     // 3
  var view = this;                                                                                                     // 4
  return Blaze._TemplateWith(function() {                                                                              // 5
    return {                                                                                                           // 6
      template: Spacebars.call(view.lookup("main"))                                                                    // 7
    };                                                                                                                 // 8
  }, function() {                                                                                                      // 9
    return Spacebars.include(function() {                                                                              // 10
      return Spacebars.call(Template.__dynamic);                                                                       // 11
    });                                                                                                                // 12
  });                                                                                                                  // 13
}));                                                                                                                   // 14
                                                                                                                       // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/landing/index.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.watch(require("./landing-layout.html"));                                                                        // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"shared":{"if-logged-in.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/shared/if-logged-in.html                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.if-logged-in.js");                                                                // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.if-logged-in.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/shared/template.if-logged-in.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("If_Logged_In");                                                                                  // 2
Template["If_Logged_In"] = new Template("Template.If_Logged_In", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return Blaze.If(function() {                                                                                         // 5
    return Spacebars.call(view.lookup("authInProcess"));                                                               // 6
  }, function() {                                                                                                      // 7
    return [ "\n    ", HTML.P("loading ..."), "\n  " ];                                                                // 8
  }, function() {                                                                                                      // 9
    return [ "\n    ", Blaze.If(function() {                                                                           // 10
      return Spacebars.call(view.lookup("canShow"));                                                                   // 11
    }, function() {                                                                                                    // 12
      return [ "\n      ", Blaze._InOuterTemplateScope(view, function() {                                              // 13
        return Spacebars.include(function() {                                                                          // 14
          return Spacebars.call(view.templateContentBlock);                                                            // 15
        });                                                                                                            // 16
      }), "\n    " ];                                                                                                  // 17
    }, function() {                                                                                                    // 18
      return [ "\n      ", HTML.DIV({                                                                                  // 19
        style: "padding-top: 40px",                                                                                    // 20
        class: "ui text container"                                                                                     // 21
      }, "\n        ", HTML.P("You are not authorized to view this page."), "\n        ", HTML.P("Please login."), "\n      "), "\n    " ];
    }), "\n  " ];                                                                                                      // 23
  });                                                                                                                  // 24
}));                                                                                                                   // 25
                                                                                                                       // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"loading.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/shared/loading.html                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.loading.js");                                                                     // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.loading.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/shared/template.loading.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Loading");                                                                                       // 2
Template["Loading"] = new Template("Template.Loading", (function() {                                                   // 3
  var view = this;                                                                                                     // 4
  return Spacebars.include(view.lookupTemplate("spinner"));                                                            // 5
}));                                                                                                                   // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"page-not-found.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/shared/page-not-found.html                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.page-not-found.js");                                                              // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.page-not-found.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/shared/template.page-not-found.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Page_Not_Found");                                                                                // 2
Template["Page_Not_Found"] = new Template("Template.Page_Not_Found", (function() {                                     // 3
  var view = this;                                                                                                     // 4
  return HTML.Raw('<div class="ui text container">\n    <h1 style="padding-top: 50px">Page not found.</h1>\n  </div>');
}));                                                                                                                   // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"if-logged-in.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/shared/if-logged-in.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Meteor = void 0;                                                                                                   // 1
module.watch(require("meteor/meteor"), {                                                                               // 1
  Meteor: function (v) {                                                                                               // 1
    Meteor = v;                                                                                                        // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
var Template = void 0;                                                                                                 // 1
module.watch(require("meteor/templating"), {                                                                           // 1
  Template: function (v) {                                                                                             // 1
    Template = v;                                                                                                      // 1
  }                                                                                                                    // 1
}, 1);                                                                                                                 // 1
/* eslint-disable object-shorthand */Template.If_Logged_In.helpers({                                                   // 4
  /**                                                                                                                  // 7
   * @returns {*} True if Meteor is in the process of logging in.                                                      //
   */authInProcess: function () {                                                                                      //
    function authInProcess() {                                                                                         // 10
      return Meteor.loggingIn();                                                                                       // 11
    }                                                                                                                  // 12
                                                                                                                       //
    return authInProcess;                                                                                              // 10
  }(),                                                                                                                 // 10
  /**                                                                                                                  // 13
   * @returns {boolean} True if there is a logged in user.                                                             //
   */canShow: function () {                                                                                            //
    function canShow() {                                                                                               // 16
      return !!Meteor.user();                                                                                          // 17
    }                                                                                                                  // 18
                                                                                                                       //
    return canShow;                                                                                                    // 16
  }()                                                                                                                  // 16
});                                                                                                                    // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/shared/index.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.watch(require("./if-logged-in.html"));                                                                          // 1
module.watch(require("./if-logged-in.js"));                                                                            // 1
module.watch(require("./loading.html"));                                                                               // 1
module.watch(require("./page-not-found.html"));                                                                        // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"user":{"if-authorized.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/user/if-authorized.html                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.if-authorized.js");                                                               // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.if-authorized.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/user/template.if-authorized.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("If_Authorized");                                                                                 // 2
Template["If_Authorized"] = new Template("Template.If_Authorized", (function() {                                       // 3
  var view = this;                                                                                                     // 4
  return Blaze.If(function() {                                                                                         // 5
    return Spacebars.call(view.lookup("authInProcess"));                                                               // 6
  }, function() {                                                                                                      // 7
    return [ "\n    ", Spacebars.include(view.lookupTemplate("Loading")), "\n  " ];                                    // 8
  }, function() {                                                                                                      // 9
    return [ "\n    ", Blaze.If(function() {                                                                           // 10
      return Spacebars.call(view.templateInstance().subscriptionsReady());                                             // 11
    }, function() {                                                                                                    // 12
      return [ "\n      ", Blaze.If(function() {                                                                       // 13
        return Spacebars.call(view.lookup("isAuthorized"));                                                            // 14
      }, function() {                                                                                                  // 15
        return [ "\n        ", Blaze._InOuterTemplateScope(view, function() {                                          // 16
          return Spacebars.include(function() {                                                                        // 17
            return Spacebars.call(view.templateContentBlock);                                                          // 18
          });                                                                                                          // 19
        }), "\n      " ];                                                                                              // 20
      }, function() {                                                                                                  // 21
        return [ "\n        ", HTML.DIV({                                                                              // 22
          style: "padding-top: 40px",                                                                                  // 23
          class: "ui text container"                                                                                   // 24
        }, "\n          ", HTML.P("You are not authorized to view this page."), "\n        "), "\n      " ];           // 25
      }), "\n    " ];                                                                                                  // 26
    }), "\n  " ];                                                                                                      // 27
  });                                                                                                                  // 28
}));                                                                                                                   // 29
                                                                                                                       // 30
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"user-footer.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/user/user-footer.html                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.user-footer.js");                                                                 // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.user-footer.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/user/template.user-footer.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("User_Footer");                                                                                   // 2
Template["User_Footer"] = new Template("Template.User_Footer", (function() {                                           // 3
  var view = this;                                                                                                     // 4
  return HTML.Raw('<footer>\n    <div style="padding-top: 15px" class="ui center aligned container">\n        <hr>\n      <a href="http://bowfolios.github.io">BowFolios</a><br>\n        Sponsored by:<br>\n        Department of Information and Computer Sciences <br>\n        University of Hawaii<br>\n        Honolulu, HI 96822\n    </div>\n  </footer>');
}));                                                                                                                   // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"user-header.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/user/user-header.html                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.user-header.js");                                                                 // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.user-header.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/user/template.user-header.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("User_Header");                                                                                   // 2
Template["User_Header"] = new Template("Template.User_Header", (function() {                                           // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    class: "ui top fixed borderless inverted teal menu"                                                                // 6
  }, "\n    ", HTML.DIV({                                                                                              // 7
    class: "ui container"                                                                                              // 8
  }, "\n      ", HTML.Raw('<div class="item"><h1>BowFolios</h1></div>'), "\n      ", HTML.A({                          // 9
    class: function() {                                                                                                // 10
      return [ Spacebars.mustache(view.lookup("isActiveRoute"), "Profile_Page"), " item" ];                            // 11
    },                                                                                                                 // 12
    href: function() {                                                                                                 // 13
      return Spacebars.mustache(view.lookup("pathFor"), "Profile_Page", Spacebars.kw({                                 // 14
        username: view.lookup("routeUserName")                                                                         // 15
      }));                                                                                                             // 16
    }                                                                                                                  // 17
  }, "Profile"), "\n      ", HTML.A({                                                                                  // 18
    class: function() {                                                                                                // 19
      return [ Spacebars.mustache(view.lookup("isActiveRoute"), "Filter_Page"), " item" ];                             // 20
    },                                                                                                                 // 21
    href: function() {                                                                                                 // 22
      return Spacebars.mustache(view.lookup("pathFor"), "Filter_Page", Spacebars.kw({                                  // 23
        username: view.lookup("routeUserName")                                                                         // 24
      }));                                                                                                             // 25
    }                                                                                                                  // 26
  }, "Filter"), "\n      ", HTML.DIV({                                                                                 // 27
    class: "right aligned item"                                                                                        // 28
  }, Spacebars.include(view.lookupTemplate("Cas_Login"))), "\n    "), "\n  ");                                         // 29
}));                                                                                                                   // 30
                                                                                                                       // 31
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"user-layout.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/user/user-layout.html                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.user-layout.js");                                                                 // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.user-layout.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/user/template.user-layout.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("User_Layout");                                                                                   // 2
Template["User_Layout"] = new Template("Template.User_Layout", (function() {                                           // 3
  var view = this;                                                                                                     // 4
  return Spacebars.include(view.lookupTemplate("If_Authorized"), function() {                                          // 5
    return [ "\n    ", Spacebars.include(view.lookupTemplate("User_Header")), "\n    ", Blaze._TemplateWith(function() {
      return {                                                                                                         // 7
        template: Spacebars.call(view.lookup("main"))                                                                  // 8
      };                                                                                                               // 9
    }, function() {                                                                                                    // 10
      return Spacebars.include(function() {                                                                            // 11
        return Spacebars.call(Template.__dynamic);                                                                     // 12
      });                                                                                                              // 13
    }), "\n    ", Spacebars.include(view.lookupTemplate("User_Footer")), "\n  " ];                                     // 14
  });                                                                                                                  // 15
}));                                                                                                                   // 16
                                                                                                                       // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"if-authorized.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/user/if-authorized.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Meteor = void 0;                                                                                                   // 1
module.watch(require("meteor/meteor"), {                                                                               // 1
  Meteor: function (v) {                                                                                               // 1
    Meteor = v;                                                                                                        // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
var Template = void 0;                                                                                                 // 1
module.watch(require("meteor/templating"), {                                                                           // 1
  Template: function (v) {                                                                                             // 1
    Template = v;                                                                                                      // 1
  }                                                                                                                    // 1
}, 1);                                                                                                                 // 1
var FlowRouter = void 0;                                                                                               // 1
module.watch(require("meteor/kadira:flow-router"), {                                                                   // 1
  FlowRouter: function (v) {                                                                                           // 1
    FlowRouter = v;                                                                                                    // 1
  }                                                                                                                    // 1
}, 2);                                                                                                                 // 1
Template.If_Authorized.helpers({                                                                                       // 5
  /**                                                                                                                  // 6
   * @returns {*} True if Meteor is in the process of logging in.                                                      //
   */authInProcess: function () {                                                                                      //
    function authInProcess() {                                                                                         // 9
      return Meteor.loggingIn();                                                                                       // 10
    }                                                                                                                  // 11
                                                                                                                       //
    return authInProcess;                                                                                              // 9
  }(),                                                                                                                 // 9
  /**                                                                                                                  // 13
   * Determine if the user is authorized to view the current page.                                                     //
   * If current user's username matches the username in the URL, they are authorized.                                  //
   * Otherwise, they are not authorized.                                                                               //
   * @returns {boolean} True if there is a logged in user and they are authorized to visit the page.                   //
   */isAuthorized: function () {                                                                                       //
    function isAuthorized() {                                                                                          // 19
      // Only logged in users can see a page protected by this template.                                               // 20
      if (!Meteor.user()) {                                                                                            // 21
        // console.log('isAuthorized', 'not logged in');                                                               // 22
        return false;                                                                                                  // 23
      } // Check that the current user is accessing a page in their area.                                              // 24
                                                                                                                       //
                                                                                                                       //
      var routeUserName = FlowRouter.getParam('username');                                                             // 27
      var loggedInUserName = Meteor.user().profile.name;                                                               // 28
      return routeUserName === loggedInUserName;                                                                       // 29
    }                                                                                                                  // 30
                                                                                                                       //
    return isAuthorized;                                                                                               // 19
  }()                                                                                                                  // 19
});                                                                                                                    // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/user/index.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.watch(require("./if-authorized.html"));                                                                         // 1
module.watch(require("./if-authorized.js"));                                                                           // 1
module.watch(require("./user-footer.html"));                                                                           // 1
module.watch(require("./user-header.html"));                                                                           // 1
module.watch(require("./user-header.js"));                                                                             // 1
module.watch(require("./user-layout.css"));                                                                            // 1
module.watch(require("./user-layout.html"));                                                                           // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"user-header.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/user/user-header.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Template = void 0;                                                                                                 // 1
module.watch(require("meteor/templating"), {                                                                           // 1
  Template: function (v) {                                                                                             // 1
    Template = v;                                                                                                      // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
var FlowRouter = void 0;                                                                                               // 1
module.watch(require("meteor/kadira:flow-router"), {                                                                   // 1
  FlowRouter: function (v) {                                                                                           // 1
    FlowRouter = v;                                                                                                    // 1
  }                                                                                                                    // 1
}, 1);                                                                                                                 // 1
Template.User_Header.helpers({                                                                                         // 4
  routeUserName: function () {                                                                                         // 5
    return FlowRouter.getParam('username');                                                                            // 6
  }                                                                                                                    // 7
});                                                                                                                    // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"user-layout.css":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/user/user-layout.css                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("meteor/modules").addStyles(                                                                  // 1
  ".user-layout-body {\n  padding-top: 75px;\n}\n\n"                                                                   // 2
);                                                                                                                     // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"pages":{"directory":{"directory-page.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/pages/directory/directory-page.html                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.directory-page.js");                                                              // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.directory-page.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/pages/directory/template.directory-page.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Directory_Page");                                                                                // 2
Template["Directory_Page"] = new Template("Template.Directory_Page", (function() {                                     // 3
  var view = this;                                                                                                     // 4
  return Blaze.If(function() {                                                                                         // 5
    return Spacebars.call(view.templateInstance().subscriptionsReady());                                               // 6
  }, function() {                                                                                                      // 7
    return [ "\n    ", HTML.DIV({                                                                                      // 8
      style: "margin-top: 10px",                                                                                       // 9
      class: "ui container"                                                                                            // 10
    }, "\n      ", HTML.DIV({                                                                                          // 11
      class: "ui cards"                                                                                                // 12
    }, "\n\n        ", Blaze.Each(function() {                                                                         // 13
      return {                                                                                                         // 14
        _sequence: Spacebars.call(view.lookup("profiles")),                                                            // 15
        _variable: "profile"                                                                                           // 16
      };                                                                                                               // 17
    }, function() {                                                                                                    // 18
      return [ "\n          ", Blaze._TemplateWith(function() {                                                        // 19
        return {                                                                                                       // 20
          profile: Spacebars.call(view.lookup("profile"))                                                              // 21
        };                                                                                                             // 22
      }, function() {                                                                                                  // 23
        return Spacebars.include(view.lookupTemplate("Directory_Profile"));                                            // 24
      }), "\n        " ];                                                                                              // 25
    }), "\n\n      "), "\n    "), "\n  " ];                                                                            // 26
  });                                                                                                                  // 27
}));                                                                                                                   // 28
                                                                                                                       // 29
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"directory-page.css":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/pages/directory/directory-page.css                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("meteor/modules").addStyles(                                                                  // 1
  ".directory-page-body {\n  background-color: #00B5AD;\n}"                                                            // 2
);                                                                                                                     // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"directory-page.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/pages/directory/directory-page.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Template = void 0;                                                                                                 // 1
module.watch(require("meteor/templating"), {                                                                           // 1
  Template: function (v) {                                                                                             // 1
    Template = v;                                                                                                      // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
var Profiles = void 0;                                                                                                 // 1
module.watch(require("/imports/api/profile/ProfileCollection"), {                                                      // 1
  Profiles: function (v) {                                                                                             // 1
    Profiles = v;                                                                                                      // 1
  }                                                                                                                    // 1
}, 1);                                                                                                                 // 1
Template.Directory_Page.onCreated(function () {                                                                        // 4
  function onCreated() {                                                                                               // 4
    this.subscribe(Profiles.getPublicationName());                                                                     // 5
  }                                                                                                                    // 6
                                                                                                                       //
  return onCreated;                                                                                                    // 4
}());                                                                                                                  // 4
Template.Directory_Page.helpers({                                                                                      // 8
  /**                                                                                                                  // 10
   * Returns a cursor to profiles, sorted by last name.                                                                //
   */profiles: function () {                                                                                           //
    return Profiles.find({}, {                                                                                         // 14
      sort: {                                                                                                          // 14
        lastName: 1                                                                                                    // 14
      }                                                                                                                // 14
    });                                                                                                                // 14
  }                                                                                                                    // 15
});                                                                                                                    // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/pages/directory/index.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.watch(require("./directory-page.html"));                                                                        // 1
module.watch(require("./directory-page.css"));                                                                         // 1
module.watch(require("./directory-page.js"));                                                                          // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"filter":{"filter-page-directory.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/pages/filter/filter-page-directory.html                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.filter-page-directory.js");                                                       // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.filter-page-directory.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/pages/filter/template.filter-page-directory.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Filter_Page_Directory");                                                                         // 2
Template["Filter_Page_Directory"] = new Template("Template.Filter_Page_Directory", (function() {                       // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    style: "margin-top: 20px",                                                                                         // 6
    class: "ui cards"                                                                                                  // 7
  }, "\n    ", Blaze.Each(function() {                                                                                 // 8
    return {                                                                                                           // 9
      _sequence: Spacebars.call(view.lookup("profiles")),                                                              // 10
      _variable: "profile"                                                                                             // 11
    };                                                                                                                 // 12
  }, function() {                                                                                                      // 13
    return [ "\n      ", Blaze._TemplateWith(function() {                                                              // 14
      return {                                                                                                         // 15
        profile: Spacebars.call(view.lookup("profile"))                                                                // 16
      };                                                                                                               // 17
    }, function() {                                                                                                    // 18
      return Spacebars.include(view.lookupTemplate("Directory_Profile"));                                              // 19
    }), "\n    " ];                                                                                                    // 20
  }), "\n  ");                                                                                                         // 21
}));                                                                                                                   // 22
                                                                                                                       // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"filter-page.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/pages/filter/filter-page.html                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.filter-page.js");                                                                 // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.filter-page.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/pages/filter/template.filter-page.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Filter_Page");                                                                                   // 2
Template["Filter_Page"] = new Template("Template.Filter_Page", (function() {                                           // 3
  var view = this;                                                                                                     // 4
  return Blaze.If(function() {                                                                                         // 5
    return Spacebars.call(view.templateInstance().subscriptionsReady());                                               // 6
  }, function() {                                                                                                      // 7
    return [ "\n    ", HTML.DIV({                                                                                      // 8
      style: "margin-top: 10px",                                                                                       // 9
      class: "ui container"                                                                                            // 10
    }, "\n\n      ", HTML.FORM({                                                                                       // 11
      class: "ui equal width form filter-data-form"                                                                    // 12
    }, "\n        ", HTML.DIV({                                                                                        // 13
      class: "field"                                                                                                   // 14
    }, "\n          ", Blaze._TemplateWith(function() {                                                                // 15
      return {                                                                                                         // 16
        label: Spacebars.call("Interests"),                                                                            // 17
        options: Spacebars.call(view.lookup("interests")),                                                             // 18
        multiple: Spacebars.call(true)                                                                                 // 19
      };                                                                                                               // 20
    }, function() {                                                                                                    // 21
      return Spacebars.include(view.lookupTemplate("Select_Form_Control"));                                            // 22
    }), "\n        "), "\n        ", HTML.BUTTON({                                                                     // 23
      class: "ui teal button",                                                                                         // 24
      type: "submit"                                                                                                   // 25
    }, "Filter"), "\n      "), "\n\n      ", Blaze._TemplateWith(function() {                                          // 26
      return {                                                                                                         // 27
        profiles: Spacebars.call(view.lookup("profiles"))                                                              // 28
      };                                                                                                               // 29
    }, function() {                                                                                                    // 30
      return Spacebars.include(view.lookupTemplate("Filter_Page_Directory"));                                          // 31
    }), "\n\n    "), "\n  " ];                                                                                         // 32
  });                                                                                                                  // 33
}));                                                                                                                   // 34
                                                                                                                       // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"filter-page.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/pages/filter/filter-page.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Template = void 0;                                                                                                 // 1
module.watch(require("meteor/templating"), {                                                                           // 1
  Template: function (v) {                                                                                             // 1
    Template = v;                                                                                                      // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
var ReactiveDict = void 0;                                                                                             // 1
module.watch(require("meteor/reactive-dict"), {                                                                        // 1
  ReactiveDict: function (v) {                                                                                         // 1
    ReactiveDict = v;                                                                                                  // 1
  }                                                                                                                    // 1
}, 1);                                                                                                                 // 1
                                                                                                                       //
var _ = void 0;                                                                                                        // 1
                                                                                                                       //
module.watch(require("meteor/underscore"), {                                                                           // 1
  _: function (v) {                                                                                                    // 1
    _ = v;                                                                                                             // 1
  }                                                                                                                    // 1
}, 2);                                                                                                                 // 1
var Profiles = void 0;                                                                                                 // 1
module.watch(require("/imports/api/profile/ProfileCollection"), {                                                      // 1
  Profiles: function (v) {                                                                                             // 1
    Profiles = v;                                                                                                      // 1
  }                                                                                                                    // 1
}, 3);                                                                                                                 // 1
var Interests = void 0;                                                                                                // 1
module.watch(require("/imports/api/interest/InterestCollection"), {                                                    // 1
  Interests: function (v) {                                                                                            // 1
    Interests = v;                                                                                                     // 1
  }                                                                                                                    // 1
}, 4);                                                                                                                 // 1
var selectedInterestsKey = 'selectedInterests';                                                                        // 7
Template.Filter_Page.onCreated(function () {                                                                           // 9
  function onCreated() {                                                                                               // 9
    this.subscribe(Interests.getPublicationName());                                                                    // 10
    this.subscribe(Profiles.getPublicationName());                                                                     // 11
    this.messageFlags = new ReactiveDict();                                                                            // 12
    this.messageFlags.set(selectedInterestsKey, undefined);                                                            // 13
  }                                                                                                                    // 14
                                                                                                                       //
  return onCreated;                                                                                                    // 9
}());                                                                                                                  // 9
Template.Filter_Page.helpers({                                                                                         // 16
  profiles: function () {                                                                                              // 17
    // Initialize selectedInterests to all of them if messageFlags is undefined.                                       // 18
    if (!Template.instance().messageFlags.get(selectedInterestsKey)) {                                                 // 19
      Template.instance().messageFlags.set(selectedInterestsKey, _.map(Interests.findAll(), function (interest) {      // 20
        return interest.name;                                                                                          // 20
      }));                                                                                                             // 20
    } // Find all profiles with the currently selected interests.                                                      // 21
                                                                                                                       //
                                                                                                                       //
    var allProfiles = Profiles.findAll();                                                                              // 23
    var selectedInterests = Template.instance().messageFlags.get(selectedInterestsKey);                                // 24
    return _.filter(allProfiles, function (profile) {                                                                  // 25
      return _.intersection(profile.interests, selectedInterests).length > 0;                                          // 25
    });                                                                                                                // 25
  },                                                                                                                   // 26
  interests: function () {                                                                                             // 28
    return _.map(Interests.findAll(), function () {                                                                    // 29
      function makeInterestObject(interest) {                                                                          // 30
        return {                                                                                                       // 31
          label: interest.name,                                                                                        // 32
          selected: _.contains(Template.instance().messageFlags.get(selectedInterestsKey), interest.name)              // 33
        };                                                                                                             // 31
      }                                                                                                                // 35
                                                                                                                       //
      return makeInterestObject;                                                                                       // 29
    }());                                                                                                              // 29
  }                                                                                                                    // 36
});                                                                                                                    // 16
Template.Filter_Page.events({                                                                                          // 39
  'submit .filter-data-form': function (event, instance) {                                                             // 40
    event.preventDefault();                                                                                            // 41
                                                                                                                       //
    var selectedOptions = _.filter(event.target.Interests.selectedOptions, function (option) {                         // 42
      return option.selected;                                                                                          // 42
    });                                                                                                                // 42
                                                                                                                       //
    instance.messageFlags.set(selectedInterestsKey, _.map(selectedOptions, function (option) {                         // 43
      return option.value;                                                                                             // 43
    }));                                                                                                               // 43
  }                                                                                                                    // 44
});                                                                                                                    // 39
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/pages/filter/index.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.watch(require("./filter-page.html"));                                                                           // 1
module.watch(require("./filter-page-directory.html"));                                                                 // 1
module.watch(require("./filter-page.js"));                                                                             // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"landing":{"landing-page.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/pages/landing/landing-page.html                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.landing-page.js");                                                                // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.landing-page.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/pages/landing/template.landing-page.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Landing_Page");                                                                                  // 2
Template["Landing_Page"] = new Template("Template.Landing_Page", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return [ HTML.DIV({                                                                                                  // 5
    class: "landing-section-1"                                                                                         // 6
  }, "\n    ", HTML.DIV({                                                                                              // 7
    class: "ui grid"                                                                                                   // 8
  }, "\n\n      ", HTML.DIV({                                                                                          // 9
    class: "row"                                                                                                       // 10
  }, "\n        ", HTML.DIV({                                                                                          // 11
    class: "ui right aligned sixteen wide column"                                                                      // 12
  }, "\n          ", Spacebars.include(view.lookupTemplate("Cas_Login")), "\n        "), "\n\n      "), "\n      ", HTML.Raw('<div class="row">\n        <div class="ui center aligned sixteen wide column">\n          <h1 class="landing-section-1-welcome">Welcome to BowFolios</h1>\n          <h3 class="landing-section-1-tagline">Professional portfolios and networking for the University of Hawaii community</h3>\n        </div>\n      </div>'), "\n    "), "\n  "), HTML.Raw('\n\n  <div class="landing-section-2">\n    <div class="ui grid">\n      <div class="ui eight wide column">\n        <img class="ui centered medium image" src="/images/profile.png">\n      </div>\n      <div class="ui eight wide middle aligned column">\n        <h1 class="landing-section-header">Create your portfolio.</h1>\n        <h1 class="landing-section-header">Specify your interests.</h1>\n      </div>\n    </div>\n  </div>\n\n  <div class="landing-section-3">\n    <div class="ui grid">\n      <div class="ui eight wide middle aligned column">\n        <h1 class="landing-section-header">Publish your portfolio in the BowFolio directory.</h1>\n      </div>\n      <div class="ui eight wide column">\n        <img class="ui centered medium image" src="/images/directory.png">\n      </div>\n    </div>\n  </div>\n\n  <div class="landing-section-2">\n    <div class="ui grid">\n      <div class="ui eight wide column">\n        <img class="ui centered medium image" src="/images/filter.png">\n      </div>\n      <div class="ui eight wide middle aligned column">\n        <h1 class="landing-section-header">Find UH community members with similar interests.</h1>\n      </div>\n    </div>\n  </div>\n\n  '), HTML.DIV({
    class: "landing-section-5"                                                                                         // 14
  }, "\n    ", HTML.DIV({                                                                                              // 15
    class: "ui grid"                                                                                                   // 16
  }, "\n      ", HTML.DIV({                                                                                            // 17
    class: "ui center aligned sixteen wide column"                                                                     // 18
  }, "\n        ", Blaze._TemplateWith(function() {                                                                    // 19
    return {                                                                                                           // 20
      size: Spacebars.call("large")                                                                                    // 21
    };                                                                                                                 // 22
  }, function() {                                                                                                      // 23
    return Spacebars.include(view.lookupTemplate("Cas_Login"));                                                        // 24
  }), "\n      "), "\n    "), "\n  ") ];                                                                               // 25
}));                                                                                                                   // 26
                                                                                                                       // 27
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/pages/landing/index.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.watch(require("./landing-page.html"));                                                                          // 1
module.watch(require("./landing-page.css"));                                                                           // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"landing-page.css":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/pages/landing/landing-page.css                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("meteor/modules").addStyles(                                                                  // 1
  ".landing-section-1 {\n  padding: 10px 10px 30px 10px;\n  background-color: #00B5AD;\n  color: #E5F9E7;\n}\n\n.landing-section-2 {\n  padding: 20px 10px 20px 10px;\n  background-color: #E5F9E7;\n  color:  #00B5AD;\n}\n\n.landing-section-3 {\n  padding: 20px 10px 30px 30px;\n  background-color: #00B5AD;\n  color: #E5F9E7;\n}\n\n.landing-section-5 {\n  padding: 20px 10px 20px 10px;\n  background-color: #00B5AD;\n  color: #E5F9E7;\n}\n\n\n.landing-section-1-welcome {\n  font-family: 'Roboto', sans-serif;\n  font-weight: 900;\n  font-size: 72px;\n}\n\n.landing-section-header {\n  font-family: 'Roboto', sans-serif;\n  font-weight: 900;\n  font-size: 36px;\n}"
);                                                                                                                     // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"user":{"profile-page.html":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/pages/user/profile-page.html                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.profile-page.js");                                                                // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"template.profile-page.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/pages/user/template.profile-page.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("Profile_Page");                                                                                  // 2
Template["Profile_Page"] = new Template("Template.Profile_Page", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return Blaze.If(function() {                                                                                         // 5
    return Spacebars.call(view.templateInstance().subscriptionsReady());                                               // 6
  }, function() {                                                                                                      // 7
    return [ "\n\n  ", HTML.DIV({                                                                                      // 8
      class: "ui text container segment"                                                                               // 9
    }, "\n    ", HTML.DIV({                                                                                            // 10
      class: "ui dividing header"                                                                                      // 11
    }, "\n      Profile\n    "), "\n    ", HTML.FORM({                                                                 // 12
      class: function() {                                                                                              // 13
        return [ "ui equal width form profile-data-form ", Spacebars.mustache(view.lookup("successClass")), " ", Spacebars.mustache(view.lookup("errorClass")) ];
      }                                                                                                                // 15
    }, "\n\n      ", HTML.DIV({                                                                                        // 16
      class: "fields"                                                                                                  // 17
    }, "\n        ", Blaze._TemplateWith(function() {                                                                  // 18
      return {                                                                                                         // 19
        label: Spacebars.call("First"),                                                                                // 20
        placeholder: Spacebars.call("Philip"),                                                                         // 21
        value: Spacebars.call(Spacebars.dot(view.lookup("profile"), "firstName")),                                     // 22
        errorMessage: Spacebars.call(Spacebars.dataMustache(view.lookup("fieldError"), "firstName"))                   // 23
      };                                                                                                               // 24
    }, function() {                                                                                                    // 25
      return Spacebars.include(view.lookupTemplate("Text_Form_Control"));                                              // 26
    }), "\n        ", Blaze._TemplateWith(function() {                                                                 // 27
      return {                                                                                                         // 28
        label: Spacebars.call("Last"),                                                                                 // 29
        placeholder: Spacebars.call("Johnson"),                                                                        // 30
        value: Spacebars.call(Spacebars.dot(view.lookup("profile"), "lastName")),                                      // 31
        errorMessage: Spacebars.call(Spacebars.dataMustache(view.lookup("fieldError"), "lastName"))                    // 32
      };                                                                                                               // 33
    }, function() {                                                                                                    // 34
      return Spacebars.include(view.lookupTemplate("Text_Form_Control"));                                              // 35
    }), "\n\n      "), "\n\n      ", HTML.DIV({                                                                        // 36
      class: "field"                                                                                                   // 37
    }, "\n        ", Blaze._TemplateWith(function() {                                                                  // 38
      return {                                                                                                         // 39
        label: Spacebars.call("Title"),                                                                                // 40
        placeholder: Spacebars.call("Student"),                                                                        // 41
        value: Spacebars.call(Spacebars.dot(view.lookup("profile"), "title")),                                         // 42
        errorMessage: Spacebars.call(Spacebars.dataMustache(view.lookup("fieldError"), "title"))                       // 43
      };                                                                                                               // 44
    }, function() {                                                                                                    // 45
      return Spacebars.include(view.lookupTemplate("Text_Form_Control"));                                              // 46
    }), "\n        ", Blaze._TemplateWith(function() {                                                                 // 47
      return {                                                                                                         // 48
        label: Spacebars.call("Location"),                                                                             // 49
        placeholder: Spacebars.call("Location"),                                                                       // 50
        value: Spacebars.call(Spacebars.dot(view.lookup("profile"), "location")),                                      // 51
        errorMessage: Spacebars.call(Spacebars.dataMustache(view.lookup("fieldError"), "location"))                    // 52
      };                                                                                                               // 53
    }, function() {                                                                                                    // 54
      return Spacebars.include(view.lookupTemplate("Text_Form_Control"));                                              // 55
    }), "\n        ", Blaze._TemplateWith(function() {                                                                 // 56
      return {                                                                                                         // 57
        label: Spacebars.call("Picture"),                                                                              // 58
        placeholder: Spacebars.call("http://foo.com/shot.jpg"),                                                        // 59
        value: Spacebars.call(Spacebars.dot(view.lookup("profile"), "picture")),                                       // 60
        errorMessage: Spacebars.call(Spacebars.dataMustache(view.lookup("fieldError"), "picture"))                     // 61
      };                                                                                                               // 62
    }, function() {                                                                                                    // 63
      return Spacebars.include(view.lookupTemplate("Text_Form_Control"));                                              // 64
    }), "\n      "), "\n\n      ", HTML.DIV({                                                                          // 65
      class: "field"                                                                                                   // 66
    }, "\n        ", Blaze._TemplateWith(function() {                                                                  // 67
      return {                                                                                                         // 68
        label: Spacebars.call("Interests"),                                                                            // 69
        options: Spacebars.call(view.lookup("interests")),                                                             // 70
        errorMessage: Spacebars.call(Spacebars.dataMustache(view.lookup("fieldError"), "interests")),                  // 71
        multiple: Spacebars.call(true)                                                                                 // 72
      };                                                                                                               // 73
    }, function() {                                                                                                    // 74
      return Spacebars.include(view.lookupTemplate("Select_Form_Control"));                                            // 75
    }), "\n      "), "\n\n      ", HTML.DIV({                                                                          // 76
      class: "fields"                                                                                                  // 77
    }, "\n\n        ", Blaze._TemplateWith(function() {                                                                // 78
      return {                                                                                                         // 79
        label: Spacebars.call("Github"),                                                                               // 80
        icon: Spacebars.call("github"),                                                                                // 81
        placeholder: Spacebars.call("pmjohnson"),                                                                      // 82
        value: Spacebars.call(Spacebars.dot(view.lookup("profile"), "github")),                                        // 83
        errorMessage: Spacebars.call(Spacebars.dataMustache(view.lookup("fieldError"), "github"))                      // 84
      };                                                                                                               // 85
    }, function() {                                                                                                    // 86
      return Spacebars.include(view.lookupTemplate("Social_Network_Form_Control"));                                    // 87
    }), "\n        ", Blaze._TemplateWith(function() {                                                                 // 88
      return {                                                                                                         // 89
        label: Spacebars.call("Facebook"),                                                                             // 90
        icon: Spacebars.call("facebook"),                                                                              // 91
        placeholder: Spacebars.call("pmjohnson"),                                                                      // 92
        value: Spacebars.call(Spacebars.dot(view.lookup("profile"), "facebook")),                                      // 93
        errorMessage: Spacebars.call(Spacebars.dataMustache(view.lookup("fieldError"), "facebook"))                    // 94
      };                                                                                                               // 95
    }, function() {                                                                                                    // 96
      return Spacebars.include(view.lookupTemplate("Social_Network_Form_Control"));                                    // 97
    }), "\n        ", Blaze._TemplateWith(function() {                                                                 // 98
      return {                                                                                                         // 99
        label: Spacebars.call("Instagram"),                                                                            // 100
        icon: Spacebars.call("instagram"),                                                                             // 101
        placeholder: Spacebars.call("pmjohnson"),                                                                      // 102
        value: Spacebars.call(Spacebars.dot(view.lookup("profile"), "instagram")),                                     // 103
        errorMessage: Spacebars.call(Spacebars.dataMustache(view.lookup("fieldError"), "instagram"))                   // 104
      };                                                                                                               // 105
    }, function() {                                                                                                    // 106
      return Spacebars.include(view.lookupTemplate("Social_Network_Form_Control"));                                    // 107
    }), "\n\n      "), "\n\n      ", Blaze._TemplateWith(function() {                                                  // 108
      return {                                                                                                         // 109
        label: Spacebars.call("Bio"),                                                                                  // 110
        value: Spacebars.call(Spacebars.dot(view.lookup("profile"), "bio")),                                           // 111
        placeholder: Spacebars.call("Short bio statement here"),                                                       // 112
        errorMessage: Spacebars.call(Spacebars.dataMustache(view.lookup("fieldError"), "bio"))                         // 113
      };                                                                                                               // 114
    }, function() {                                                                                                    // 115
      return Spacebars.include(view.lookupTemplate("TextArea_Form_Control"));                                          // 116
    }), "\n\n\n      ", HTML.BUTTON({                                                                                  // 117
      class: "ui primary button",                                                                                      // 118
      type: "submit"                                                                                                   // 119
    }, "Submit"), "\n      ", Blaze.If(function() {                                                                    // 120
      return Spacebars.call(view.lookup("displaySuccessMessage"));                                                     // 121
    }, function() {                                                                                                    // 122
      return [ "\n        ", HTML.DIV({                                                                                // 123
        class: "ui success message"                                                                                    // 124
      }, "\n          ", HTML.P("Profile data successfully updated."), "\n        "), "\n      " ];                    // 125
    }), "\n    "), "\n  "), "\n\n  " ];                                                                                // 126
  });                                                                                                                  // 127
}));                                                                                                                   // 128
                                                                                                                       // 129
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/pages/user/index.js                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.watch(require("./profile-page.html"));                                                                          // 1
module.watch(require("./profile-page"));                                                                               // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"profile-page.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/pages/user/profile-page.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Template = void 0;                                                                                                 // 1
module.watch(require("meteor/templating"), {                                                                           // 1
  Template: function (v) {                                                                                             // 1
    Template = v;                                                                                                      // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
var ReactiveDict = void 0;                                                                                             // 1
module.watch(require("meteor/reactive-dict"), {                                                                        // 1
  ReactiveDict: function (v) {                                                                                         // 1
    ReactiveDict = v;                                                                                                  // 1
  }                                                                                                                    // 1
}, 1);                                                                                                                 // 1
var FlowRouter = void 0;                                                                                               // 1
module.watch(require("meteor/kadira:flow-router"), {                                                                   // 1
  FlowRouter: function (v) {                                                                                           // 1
    FlowRouter = v;                                                                                                    // 1
  }                                                                                                                    // 1
}, 2);                                                                                                                 // 1
                                                                                                                       //
var _ = void 0;                                                                                                        // 1
                                                                                                                       //
module.watch(require("meteor/underscore"), {                                                                           // 1
  _: function (v) {                                                                                                    // 1
    _ = v;                                                                                                             // 1
  }                                                                                                                    // 1
}, 3);                                                                                                                 // 1
var Profiles = void 0;                                                                                                 // 1
module.watch(require("/imports/api/profile/ProfileCollection"), {                                                      // 1
  Profiles: function (v) {                                                                                             // 1
    Profiles = v;                                                                                                      // 1
  }                                                                                                                    // 1
}, 4);                                                                                                                 // 1
var Interests = void 0;                                                                                                // 1
module.watch(require("/imports/api/interest/InterestCollection"), {                                                    // 1
  Interests: function (v) {                                                                                            // 1
    Interests = v;                                                                                                     // 1
  }                                                                                                                    // 1
}, 5);                                                                                                                 // 1
var displaySuccessMessage = 'displaySuccessMessage';                                                                   // 8
var displayErrorMessages = 'displayErrorMessages';                                                                     // 9
Template.Profile_Page.onCreated(function () {                                                                          // 11
  function onCreated() {                                                                                               // 11
    this.subscribe(Interests.getPublicationName());                                                                    // 12
    this.subscribe(Profiles.getPublicationName());                                                                     // 13
    this.messageFlags = new ReactiveDict();                                                                            // 14
    this.messageFlags.set(displaySuccessMessage, false);                                                               // 15
    this.messageFlags.set(displayErrorMessages, false);                                                                // 16
    this.context = Profiles.getSchema().namedContext('Profile_Page');                                                  // 17
  }                                                                                                                    // 18
                                                                                                                       //
  return onCreated;                                                                                                    // 11
}());                                                                                                                  // 11
Template.Profile_Page.helpers({                                                                                        // 20
  successClass: function () {                                                                                          // 21
    return Template.instance().messageFlags.get(displaySuccessMessage) ? 'success' : '';                               // 22
  },                                                                                                                   // 23
  displaySuccessMessage: function () {                                                                                 // 24
    return Template.instance().messageFlags.get(displaySuccessMessage);                                                // 25
  },                                                                                                                   // 26
  errorClass: function () {                                                                                            // 27
    return Template.instance().messageFlags.get(displayErrorMessages) ? 'error' : '';                                  // 28
  },                                                                                                                   // 29
  profile: function () {                                                                                               // 30
    return Profiles.findDoc(FlowRouter.getParam('username'));                                                          // 31
  },                                                                                                                   // 32
  interests: function () {                                                                                             // 33
    var profile = Profiles.findDoc(FlowRouter.getParam('username'));                                                   // 34
    var selectedInterests = profile.interests;                                                                         // 35
    return profile && _.map(Interests.findAll(), function () {                                                         // 36
      function makeInterestObject(interest) {                                                                          // 37
        return {                                                                                                       // 38
          label: interest.name,                                                                                        // 38
          selected: _.contains(selectedInterests, interest.name)                                                       // 38
        };                                                                                                             // 38
      }                                                                                                                // 39
                                                                                                                       //
      return makeInterestObject;                                                                                       // 36
    }());                                                                                                              // 36
  }                                                                                                                    // 40
});                                                                                                                    // 20
Template.Profile_Page.events({                                                                                         // 44
  'submit .profile-data-form': function (event, instance) {                                                            // 45
    event.preventDefault();                                                                                            // 46
    var firstName = event.target.First.value;                                                                          // 47
    var lastName = event.target.Last.value;                                                                            // 48
    var title = event.target.Title.value;                                                                              // 49
    var location = event.target.Location.value;                                                                        // 50
    var username = FlowRouter.getParam('username'); // schema requires username.                                       // 51
                                                                                                                       //
    var picture = event.target.Picture.value;                                                                          // 52
    var github = event.target.Github.value;                                                                            // 53
    var facebook = event.target.Facebook.value;                                                                        // 54
    var instagram = event.target.Instagram.value;                                                                      // 55
    var bio = event.target.Bio.value;                                                                                  // 56
                                                                                                                       //
    var selectedInterests = _.filter(event.target.Interests.selectedOptions, function (option) {                       // 57
      return option.selected;                                                                                          // 57
    });                                                                                                                // 57
                                                                                                                       //
    var interests = _.map(selectedInterests, function (option) {                                                       // 58
      return option.value;                                                                                             // 58
    });                                                                                                                // 58
                                                                                                                       //
    var updatedProfileData = {                                                                                         // 60
      firstName: firstName,                                                                                            // 60
      lastName: lastName,                                                                                              // 60
      title: title,                                                                                                    // 60
      picture: picture,                                                                                                // 60
      github: github,                                                                                                  // 60
      facebook: facebook,                                                                                              // 60
      instagram: instagram,                                                                                            // 60
      bio: bio,                                                                                                        // 60
      interests: interests,                                                                                            // 60
      username: username,                                                                                              // 61
      location: location                                                                                               // 61
    }; // Clear out any old validation errors.                                                                         // 60
                                                                                                                       //
    instance.context.reset(); // Invoke clean so that updatedProfileData reflects what will be inserted.               // 64
                                                                                                                       //
    var cleanData = Profiles.getSchema().clean(updatedProfileData); // Determine validity.                             // 66
                                                                                                                       //
    instance.context.validate(cleanData);                                                                              // 68
                                                                                                                       //
    if (instance.context.isValid()) {                                                                                  // 70
      var docID = Profiles.findDoc(FlowRouter.getParam('username'))._id;                                               // 71
                                                                                                                       //
      var id = Profiles.update(docID, {                                                                                // 72
        $set: cleanData                                                                                                // 72
      });                                                                                                              // 72
      instance.messageFlags.set(displaySuccessMessage, id);                                                            // 73
      instance.messageFlags.set(displayErrorMessages, false);                                                          // 74
    } else {                                                                                                           // 75
      instance.messageFlags.set(displaySuccessMessage, false);                                                         // 76
      instance.messageFlags.set(displayErrorMessages, true);                                                           // 77
    }                                                                                                                  // 78
  }                                                                                                                    // 79
});                                                                                                                    // 44
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"stylesheets":{"style.css":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/stylesheets/style.css                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("meteor/modules").addStyles(                                                                  // 1
  "<!-- Cannot change body padding here due to landing page. -->"                                                      // 2
);                                                                                                                     // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"api":{"base":{"BaseCollection.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/base/BaseCollection.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
var module1 = module;                                                                                                  // 1
var Mongo = void 0;                                                                                                    // 1
module1.watch(require("meteor/mongo"), {                                                                               // 1
  Mongo: function (v) {                                                                                                // 1
    Mongo = v;                                                                                                         // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
var Meteor = void 0;                                                                                                   // 1
module1.watch(require("meteor/meteor"), {                                                                              // 1
  Meteor: function (v) {                                                                                               // 1
    Meteor = v;                                                                                                        // 1
  }                                                                                                                    // 1
}, 1);                                                                                                                 // 1
var check = void 0;                                                                                                    // 1
module1.watch(require("meteor/check"), {                                                                               // 1
  check: function (v) {                                                                                                // 1
    check = v;                                                                                                         // 1
  }                                                                                                                    // 1
}, 2);                                                                                                                 // 1
                                                                                                                       //
var _ = void 0;                                                                                                        // 1
                                                                                                                       //
module1.watch(require("meteor/underscore"), {                                                                          // 1
  _: function (v) {                                                                                                    // 1
    _ = v;                                                                                                             // 1
  }                                                                                                                    // 1
}, 3);                                                                                                                 // 1
                                                                                                                       //
/** @module Base */ /**                                                                                                // 6
                     * BaseCollection is an abstract superclass of all RadGrad data model entities.                    //
                     * It is the direct superclass for SlugCollection and SemesterCollection.                          //
                     * Other collection classes are derived from BaseInstanceCollection or BaseTypeCollection, which are abstract
                     * classes that inherit from this one.                                                             //
                     */var BaseCollection = function () {                                                              //
  /**                                                                                                                  // 16
   * Superclass constructor for all RadGrad entities.                                                                  //
   * Defines internal fields needed by all entities: _type, _collectionName, _collection, and _schema.                 //
   * @param {String} type The name of the entity defined by the subclass.                                              //
   * @param {SimpleSchema} schema The schema for validating fields on insertion to the DB.                             //
   */function BaseCollection(type, schema) {                                                                           //
    (0, _classCallCheck3.default)(this, BaseCollection);                                                               // 22
    this._type = type;                                                                                                 // 23
    this._collectionName = type + "Collection";                                                                        // 24
    this._collection = new Mongo.Collection(type + "Collection");                                                      // 25
    this._schema = schema;                                                                                             // 26
                                                                                                                       //
    this._collection.attachSchema(this._schema);                                                                       // 27
  } /**                                                                                                                // 28
     * Returns the number of documents in this collection.                                                             //
     * @returns { Number } The number of elements in this collection.                                                  //
     */                                                                                                                //
                                                                                                                       //
  BaseCollection.prototype.count = function () {                                                                       //
    function count() {                                                                                                 //
      return this._collection.find().count();                                                                          // 35
    }                                                                                                                  // 36
                                                                                                                       //
    return count;                                                                                                      //
  }(); /**                                                                                                             //
        * Returns the SimpleSchema instance associated with this collection.                                           //
        * @returns {SimpleSchema} The schema.                                                                          //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.getSchema = function () {                                                                   //
    function getSchema() {                                                                                             //
      return this._schema;                                                                                             // 43
    }                                                                                                                  // 44
                                                                                                                       //
    return getSchema;                                                                                                  //
  }(); /**                                                                                                             //
        * Default publication method for entities.                                                                     //
        * It publishes the entire collection.                                                                          //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.publish = function () {                                                                     //
    function publish() {                                                                                               //
      var _this = this;                                                                                                // 50
                                                                                                                       //
      if (Meteor.isServer) {                                                                                           // 51
        Meteor.publish(this._collectionName, function () {                                                             // 52
          return _this._collection.find();                                                                             // 52
        });                                                                                                            // 52
      }                                                                                                                // 53
    }                                                                                                                  // 54
                                                                                                                       //
    return publish;                                                                                                    //
  }(); /**                                                                                                             //
        * Default subscription method for entities.                                                                    //
        * It subscribes to the entire collection.                                                                      //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.subscribe = function () {                                                                   //
    function subscribe() {                                                                                             //
      if (Meteor.isClient) {                                                                                           // 61
        Meteor.subscribe(this._collectionName);                                                                        // 62
      }                                                                                                                // 63
    }                                                                                                                  // 64
                                                                                                                       //
    return subscribe;                                                                                                  //
  }(); /**                                                                                                             //
        * A stricter form of findOne, in that it throws an exception if the entity isn't found in the collection.      //
        * @param { String | Object } name Either the docID, or an object selector, or the 'name' field value, or the   //
        * username field value.                                                                                        //
        * @returns { Object } The document associated with name.                                                       //
        * @throws { Meteor.Error } If the document cannot be found.                                                    //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.findDoc = function () {                                                                     //
    function findDoc(name) {                                                                                           //
      var doc = this._collection.findOne(name) || this._collection.findOne({                                           // 74
        name: name                                                                                                     // 76
      }) || this._collection.findOne({                                                                                 // 76
        username: name                                                                                                 // 77
      }) || this._collection.findOne({                                                                                 // 77
        _id: name                                                                                                      // 78
      });                                                                                                              // 78
                                                                                                                       //
      if (!doc) {                                                                                                      // 79
        throw new Meteor.Error(name + " is not a defined " + this._type);                                              // 80
      }                                                                                                                // 81
                                                                                                                       //
      return doc;                                                                                                      // 82
    }                                                                                                                  // 83
                                                                                                                       //
    return findDoc;                                                                                                    //
  }(); /**                                                                                                             //
        * Runs find on this collection.                                                                                //
        * @see {@link http://docs.meteor.com/#/full/find|Meteor Docs on Mongo Find}                                    //
        * @param { Object } selector A MongoDB selector.                                                               //
        * @param { Object } options MongoDB options.                                                                   //
        * @returns {Mongo.Cursor}                                                                                      //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.find = function () {                                                                        //
    function find(selector, options) {                                                                                 //
      var theSelector = typeof selector === 'undefined' ? {} : selector;                                               // 93
      return this._collection.find(theSelector, options);                                                              // 94
    }                                                                                                                  // 95
                                                                                                                       //
    return find;                                                                                                       //
  }(); /**                                                                                                             //
        * Returns the entire collection via find().fetch().                                                            //
        * @returns [Array] A list of this collection as objects.                                                       //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.findAll = function () {                                                                     //
    function findAll() {                                                                                               //
      return this._collection.find().fetch();                                                                          // 102
    }                                                                                                                  // 103
                                                                                                                       //
    return findAll;                                                                                                    //
  }(); /**                                                                                                             //
        * Runs a simplified version of update on this collection.                                                      //
        * @see {@link http://docs.meteor.com/api/collections.html#Mongo-Collection-update}                             //
        * @param { Object } selector A MongoDB selector.                                                               //
        * @param { Object } modifier A MongoDB modifier                                                                //
        * @returns true                                                                                                //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.update = function () {                                                                      //
    function update(selector, modifier) {                                                                              //
      var theSelector = typeof selector === 'undefined' ? {} : selector;                                               // 113
                                                                                                                       //
      this._collection.update(theSelector, modifier);                                                                  // 114
                                                                                                                       //
      return true;                                                                                                     // 115
    }                                                                                                                  // 116
                                                                                                                       //
    return update;                                                                                                     //
  }(); /**                                                                                                             //
        * Returns true if the passed entity is in this collection.                                                     //
        * @param { String | Object } name The docID, or an object specifying a document, or the name, or the username.
        * @returns {boolean} True if name exists in this collection.                                                   //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.isDefined = function () {                                                                   //
    function isDefined(name) {                                                                                         //
      return !!this._collection.findOne(name) || !!this._collection.findOne({                                          // 124
        name: name                                                                                                     // 126
      }) || !!this._collection.findOne({                                                                               // 126
        username: name                                                                                                 // 127
      }) || !!this._collection.findOne({                                                                               // 127
        _id: name                                                                                                      // 128
      });                                                                                                              // 128
    }                                                                                                                  // 129
                                                                                                                       //
    return isDefined;                                                                                                  //
  }(); /**                                                                                                             //
        * A stricter form of remove that throws an error if the document or docID could not be found in this collection.
        * @param { String | Object } name A document or docID in this collection.                                      //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.removeIt = function () {                                                                    //
    function removeIt(name) {                                                                                          //
      var doc = this.findDoc(name);                                                                                    // 136
      check(doc, Object);                                                                                              // 137
                                                                                                                       //
      this._collection.remove(doc._id);                                                                                // 138
    }                                                                                                                  // 139
                                                                                                                       //
    return removeIt;                                                                                                   //
  }(); /**                                                                                                             //
        * Removes all elements of this collection.                                                                     //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.removeAll = function () {                                                                   //
    function removeAll() {                                                                                             //
      this._collection.remove({});                                                                                     // 145
    }                                                                                                                  // 146
                                                                                                                       //
    return removeAll;                                                                                                  //
  }(); /**                                                                                                             //
        * Return the type of this collection.                                                                          //
        * @returns { String } The type, as a string.                                                                   //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.getType = function () {                                                                     //
    function getType() {                                                                                               //
      return this._type;                                                                                               // 153
    }                                                                                                                  // 154
                                                                                                                       //
    return getType;                                                                                                    //
  }(); /**                                                                                                             //
        * Return the publication name.                                                                                 //
        * @returns { String } The publication name, as a string.                                                       //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.getPublicationName = function () {                                                          //
    function getPublicationName() {                                                                                    //
      return this._collectionName;                                                                                     // 161
    }                                                                                                                  // 162
                                                                                                                       //
    return getPublicationName;                                                                                         //
  }(); /**                                                                                                             //
        * Returns a string representing all of the documents in this collection.                                       //
        * @returns {String}                                                                                            //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.toString = function () {                                                                    //
    function toString() {                                                                                              //
      return this._collection.find().fetch();                                                                          // 169
    }                                                                                                                  // 170
                                                                                                                       //
    return toString;                                                                                                   //
  }(); /**                                                                                                             //
        * Verifies that the passed object is one of this collection's instances.                                       //
        * @param { String | List } name Should be a defined ID or doc in this collection.                              //
        * @throws { Meteor.Error } If not defined.                                                                     //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.assertDefined = function () {                                                               //
    function assertDefined(name) {                                                                                     //
      if (!this.isDefined(name)) {                                                                                     // 178
        throw new Meteor.Error(name + " is not a valid instance of " + this._type + ".");                              // 179
      }                                                                                                                // 180
    }                                                                                                                  // 181
                                                                                                                       //
    return assertDefined;                                                                                              //
  }(); /**                                                                                                             //
        * Verifies that the list of passed instances are all members of this collection.                               //
        * @param names Should be a list of docs and/or docIDs.                                                         //
        * @throws { Meteor.Error } If instances is not an array, or if any instance is not in this collection.         //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.assertAllDefined = function () {                                                            //
    function assertAllDefined(names) {                                                                                 //
      var _this2 = this;                                                                                               // 188
                                                                                                                       //
      if (!_.isArray(names)) {                                                                                         // 189
        throw new Meteor.Error(names + " is not an array.");                                                           // 190
      }                                                                                                                // 191
                                                                                                                       //
      names.map(function (name) {                                                                                      // 192
        return _this2.assertDefined(name);                                                                             // 192
      });                                                                                                              // 192
    }                                                                                                                  // 193
                                                                                                                       //
    return assertAllDefined;                                                                                           //
  }(); /**                                                                                                             //
        * Define the default integrity checker for all applications.                                                   //
        * Returns an array with a string indicating that this method is not overridden.                                //
        * @returns { array } An array containing a string indicating the use of the default integrity checker.         //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.checkIntegrity = function () {                                                              //
    function checkIntegrity() {                                                                                        //
      // eslint-disable-line class-methods-use-this                                                                    // 200
      return ['There is no integrity checker defined for this collection.'];                                           // 201
    }                                                                                                                  // 202
                                                                                                                       //
    return checkIntegrity;                                                                                             //
  }(); /**                                                                                                             //
        * Returns an object with two fields: name and contents.                                                        //
        * Name is the name of this collection.                                                                         //
        * Contents is an array of objects suitable for passing to the restore() method.                                //
        * @returns {Object} An object representing the contents of this collection.                                    //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.dumpAll = function () {                                                                     //
    function dumpAll() {                                                                                               //
      var _this3 = this;                                                                                               // 210
                                                                                                                       //
      var dumpObject = {                                                                                               // 211
        name: this._collectionName,                                                                                    // 211
        contents: this.find().map(function (docID) {                                                                   // 211
          return _this3.dumpOne(docID);                                                                                // 211
        })                                                                                                             // 211
      }; // sort the contents array by slug (if present)                                                               // 211
                                                                                                                       //
      if (dumpObject.contents[0] && dumpObject.contents[0].slug) {                                                     // 213
        dumpObject.contents = _.sortBy(dumpObject.contents, function (obj) {                                           // 214
          return obj.slug;                                                                                             // 214
        });                                                                                                            // 214
      }                                                                                                                // 215
                                                                                                                       //
      return dumpObject;                                                                                               // 216
    }                                                                                                                  // 217
                                                                                                                       //
    return dumpAll;                                                                                                    //
  }(); /**                                                                                                             //
        * Returns an object representing the definition of docID in a format appropriate to the restoreOne function.   //
        * Must be overridden by each collection.                                                                       //
        * @param docID A docID from this collection.                                                                   //
        * @returns { Object } An object representing this document.                                                    //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.dumpOne = function () {                                                                     //
    function dumpOne(docID) {                                                                                          //
      // eslint-disable-line                                                                                           // 225
      throw new Meteor.Error("Default dumpOne method invoked by collection " + this._collectionName);                  // 226
    }                                                                                                                  // 227
                                                                                                                       //
    return dumpOne;                                                                                                    //
  }(); /**                                                                                                             //
        * Defines the entity represented by dumpObject.                                                                //
        * Defaults to calling the define() method if it exists.                                                        //
        * @param dumpObject An object representing one document in this collection.                                    //
        * @returns { String } The docID of the newly created document.                                                 //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.restoreOne = function () {                                                                  //
    function restoreOne(dumpObject) {                                                                                  //
      if (typeof this.define === 'function') {                                                                         // 236
        return this.define(dumpObject);                                                                                // 237
      }                                                                                                                // 238
                                                                                                                       //
      return null;                                                                                                     // 239
    }                                                                                                                  // 240
                                                                                                                       //
    return restoreOne;                                                                                                 //
  }(); /**                                                                                                             //
        * Defines all the entities in the passed array of objects.                                                     //
        * @param dumpObjects The array of objects representing the definition of a document in this collection.        //
        */                                                                                                             //
                                                                                                                       //
  BaseCollection.prototype.restoreAll = function () {                                                                  //
    function restoreAll(dumpObjects) {                                                                                 //
      var _this4 = this;                                                                                               // 246
                                                                                                                       //
      _.each(dumpObjects, function (dumpObject) {                                                                      // 247
        return _this4.restoreOne(dumpObject);                                                                          // 247
      });                                                                                                              // 247
    }                                                                                                                  // 248
                                                                                                                       //
    return restoreAll;                                                                                                 //
  }();                                                                                                                 //
                                                                                                                       //
  return BaseCollection;                                                                                               //
}(); /**                                                                                                               //
      * The BaseCollection used by all RadGrad entities.                                                               //
      */                                                                                                               //
                                                                                                                       //
module1.exportDefault(BaseCollection);                                                                                 // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"BaseUtilities.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/base/BaseUtilities.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({                                                                                                        // 1
  removeAllEntities: function () {                                                                                     // 1
    return removeAllEntities;                                                                                          // 1
  }                                                                                                                    // 1
});                                                                                                                    // 1
var Profiles = void 0;                                                                                                 // 1
module.watch(require("/imports/api/profile/ProfileCollection"), {                                                      // 1
  Profiles: function (v) {                                                                                             // 1
    Profiles = v;                                                                                                      // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
var Interests = void 0;                                                                                                // 1
module.watch(require("/imports/api/interest/InterestCollection"), {                                                    // 1
  Interests: function (v) {                                                                                            // 1
    Interests = v;                                                                                                     // 1
  }                                                                                                                    // 1
}, 1);                                                                                                                 // 1
                                                                                                                       //
function removeAllEntities() {                                                                                         // 4
  Profiles.removeAll();                                                                                                // 5
  Interests.removeAll();                                                                                               // 6
}                                                                                                                      // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/base/index.js                                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.watch(require("./BaseCollection"));                                                                             // 1
module.watch(require("./BaseUtilities"));                                                                              // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"interest":{"InterestCollection.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/interest/InterestCollection.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");                          //
                                                                                                                       //
var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //
                                                                                                                       //
var _inherits2 = require("babel-runtime/helpers/inherits");                                                            //
                                                                                                                       //
var _inherits3 = _interopRequireDefault(_inherits2);                                                                   //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
var module1 = module;                                                                                                  // 1
module1.export({                                                                                                       // 1
  Interests: function () {                                                                                             // 1
    return Interests;                                                                                                  // 1
  }                                                                                                                    // 1
});                                                                                                                    // 1
var SimpleSchema = void 0;                                                                                             // 1
module1.watch(require("simpl-schema"), {                                                                               // 1
  "default": function (v) {                                                                                            // 1
    SimpleSchema = v;                                                                                                  // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
var BaseCollection = void 0;                                                                                           // 1
module1.watch(require("/imports/api/base/BaseCollection"), {                                                           // 1
  "default": function (v) {                                                                                            // 1
    BaseCollection = v;                                                                                                // 1
  }                                                                                                                    // 1
}, 1);                                                                                                                 // 1
var check = void 0;                                                                                                    // 1
module1.watch(require("meteor/check"), {                                                                               // 1
  check: function (v) {                                                                                                // 1
    check = v;                                                                                                         // 1
  }                                                                                                                    // 1
}, 2);                                                                                                                 // 1
var Meteor = void 0;                                                                                                   // 1
module1.watch(require("meteor/meteor"), {                                                                              // 1
  Meteor: function (v) {                                                                                               // 1
    Meteor = v;                                                                                                        // 1
  }                                                                                                                    // 1
}, 3);                                                                                                                 // 1
                                                                                                                       //
var _ = void 0;                                                                                                        // 1
                                                                                                                       //
module1.watch(require("meteor/underscore"), {                                                                          // 1
  _: function (v) {                                                                                                    // 1
    _ = v;                                                                                                             // 1
  }                                                                                                                    // 1
}, 4);                                                                                                                 // 1
var Tracker = void 0;                                                                                                  // 1
module1.watch(require("meteor/tracker"), {                                                                             // 1
  Tracker: function (v) {                                                                                              // 1
    Tracker = v;                                                                                                       // 1
  }                                                                                                                    // 1
}, 5);                                                                                                                 // 1
                                                                                                                       //
/** @module Interest */ /**                                                                                            // 8
                         * Represents a specific interest, such as "Software Engineering".                             //
                         * @extends module:Base~BaseCollection                                                         //
                         */var InterestCollection = function (_BaseCollection) {                                       //
  (0, _inherits3.default)(InterestCollection, _BaseCollection);                                                        //
                                                                                                                       //
  /**                                                                                                                  // 16
   * Creates the Interest collection.                                                                                  //
   */function InterestCollection() {                                                                                   //
    (0, _classCallCheck3.default)(this, InterestCollection);                                                           // 19
    return (0, _possibleConstructorReturn3.default)(this, _BaseCollection.call(this, 'Interest', new SimpleSchema({    // 19
      name: {                                                                                                          // 21
        type: String                                                                                                   // 21
      },                                                                                                               // 21
      description: {                                                                                                   // 22
        type: String,                                                                                                  // 22
        optional: true                                                                                                 // 22
      }                                                                                                                // 22
    }, {                                                                                                               // 20
      tracker: Tracker                                                                                                 // 23
    })));                                                                                                              // 23
  } /**                                                                                                                // 24
     * Defines a new Interest.                                                                                         //
     * @example                                                                                                        //
     * Interests.define({ name: 'Software Engineering',                                                                //
     *                    description: 'Methods for group development of large, high quality software systems' });     //
     * @param { Object } description Object with keys name and description.                                            //
     * Name must be previously undefined. Description is optional.                                                     //
     * Creates a "slug" for this name and stores it in the slug field.                                                 //
     * @throws {Meteor.Error} If the interest definition includes a defined name.                                      //
     * @returns The newly created docID.                                                                               //
     */                                                                                                                //
                                                                                                                       //
  InterestCollection.prototype.define = function () {                                                                  //
    function define(_ref) {                                                                                            //
      var name = _ref.name,                                                                                            // 37
          description = _ref.description;                                                                              // 37
      check(name, String);                                                                                             // 38
      check(description, String);                                                                                      // 39
                                                                                                                       //
      if (this.find({                                                                                                  // 40
        name: name                                                                                                     // 40
      }).count() > 0) {                                                                                                // 40
        throw new Meteor.Error(name + " is previously defined in another Interest");                                   // 41
      }                                                                                                                // 42
                                                                                                                       //
      return this._collection.insert({                                                                                 // 43
        name: name,                                                                                                    // 43
        description: description                                                                                       // 43
      });                                                                                                              // 43
    }                                                                                                                  // 44
                                                                                                                       //
    return define;                                                                                                     //
  }(); /**                                                                                                             //
        * Returns the Interest name corresponding to the passed interest docID.                                        //
        * @param interestID An interest docID.                                                                         //
        * @returns { String } An interest name.                                                                        //
        * @throws { Meteor.Error} If the interest docID cannot be found.                                               //
        */                                                                                                             //
                                                                                                                       //
  InterestCollection.prototype.findName = function () {                                                                //
    function findName(interestID) {                                                                                    //
      this.assertDefined(interestID);                                                                                  // 53
      return this.findDoc(interestID).name;                                                                            // 54
    }                                                                                                                  // 55
                                                                                                                       //
    return findName;                                                                                                   //
  }(); /**                                                                                                             //
        * Returns a list of Interest names corresponding to the passed list of Interest docIDs.                        //
        * @param interestIDs A list of Interest docIDs.                                                                //
        * @returns { Array }                                                                                           //
        * @throws { Meteor.Error} If any of the instanceIDs cannot be found.                                           //
        */                                                                                                             //
                                                                                                                       //
  InterestCollection.prototype.findNames = function () {                                                               //
    function findNames(interestIDs) {                                                                                  //
      var _this2 = this;                                                                                               // 63
                                                                                                                       //
      return interestIDs.map(function (interestID) {                                                                   // 64
        return _this2.findName(interestID);                                                                            // 64
      });                                                                                                              // 64
    }                                                                                                                  // 65
                                                                                                                       //
    return findNames;                                                                                                  //
  }(); /**                                                                                                             //
        * Throws an error if the passed name is not a defined Interest name.                                           //
        * @param name The name of an interest.                                                                         //
        */                                                                                                             //
                                                                                                                       //
  InterestCollection.prototype.assertName = function () {                                                              //
    function assertName(name) {                                                                                        //
      this.findDoc(name);                                                                                              // 72
    }                                                                                                                  // 73
                                                                                                                       //
    return assertName;                                                                                                 //
  }(); /**                                                                                                             //
        * Throws an error if the passed list of names are not all Interest names.                                      //
        * @param names An array of (hopefully) Interest names.                                                         //
        */                                                                                                             //
                                                                                                                       //
  InterestCollection.prototype.assertNames = function () {                                                             //
    function assertNames(names) {                                                                                      //
      var _this3 = this;                                                                                               // 79
                                                                                                                       //
      _.each(names, function (name) {                                                                                  // 80
        return _this3.assertName(name);                                                                                // 80
      });                                                                                                              // 80
    }                                                                                                                  // 81
                                                                                                                       //
    return assertNames;                                                                                                //
  }(); /**                                                                                                             //
        * Returns the docID associated with the passed Interest name, or throws an error if it cannot be found.        //
        * @param { String } name An interest name.                                                                     //
        * @returns { String } The docID associated with the name.                                                      //
        * @throws { Meteor.Error } If name is not associated with an Interest.                                         //
        */                                                                                                             //
                                                                                                                       //
  InterestCollection.prototype.findID = function () {                                                                  //
    function findID(name) {                                                                                            //
      return this.findDoc(name)._id;                                                                                   // 90
    }                                                                                                                  // 91
                                                                                                                       //
    return findID;                                                                                                     //
  }(); /**                                                                                                             //
        * Returns the docIDs associated with the array of Interest names, or throws an error if any name cannot be found.
        * If nothing is passed, then an empty array is returned.                                                       //
        * @param { String[] } names An array of interest names.                                                        //
        * @returns { String[] } The docIDs associated with the names.                                                  //
        * @throws { Meteor.Error } If any instance is not an Interest name.                                            //
        */                                                                                                             //
                                                                                                                       //
  InterestCollection.prototype.findIDs = function () {                                                                 //
    function findIDs(names) {                                                                                          //
      var _this4 = this;                                                                                               // 100
                                                                                                                       //
      return names ? names.map(function (instance) {                                                                   // 101
        return _this4.findID(instance);                                                                                // 101
      }) : [];                                                                                                         // 101
    }                                                                                                                  // 102
                                                                                                                       //
    return findIDs;                                                                                                    //
  }(); /**                                                                                                             //
        * Returns an object representing the Interest docID in a format acceptable to define().                        //
        * @param docID The docID of an Interest.                                                                       //
        * @returns { Object } An object representing the definition of docID.                                          //
        */                                                                                                             //
                                                                                                                       //
  InterestCollection.prototype.dumpOne = function () {                                                                 //
    function dumpOne(docID) {                                                                                          //
      var doc = this.findDoc(docID);                                                                                   // 110
      var name = doc.name;                                                                                             // 111
      var description = doc.description;                                                                               // 112
      return {                                                                                                         // 113
        name: name,                                                                                                    // 113
        description: description                                                                                       // 113
      };                                                                                                               // 113
    }                                                                                                                  // 114
                                                                                                                       //
    return dumpOne;                                                                                                    //
  }();                                                                                                                 //
                                                                                                                       //
  return InterestCollection;                                                                                           //
}(BaseCollection); /**                                                                                                 //
                    * Provides the singleton instance of this class to all other entities.                             //
                    */                                                                                                 //
                                                                                                                       //
var Interests = new InterestCollection();                                                                              // 120
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/interest/index.js                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.watch(require("./InterestCollection.js"));                                                                      // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"profile":{"ProfileCollection.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/profile/ProfileCollection.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");                                                //
                                                                                                                       //
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //
                                                                                                                       //
var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");                          //
                                                                                                                       //
var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //
                                                                                                                       //
var _inherits2 = require("babel-runtime/helpers/inherits");                                                            //
                                                                                                                       //
var _inherits3 = _interopRequireDefault(_inherits2);                                                                   //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
var module1 = module;                                                                                                  // 1
module1.export({                                                                                                       // 1
  Profiles: function () {                                                                                              // 1
    return Profiles;                                                                                                   // 1
  }                                                                                                                    // 1
});                                                                                                                    // 1
var SimpleSchema = void 0;                                                                                             // 1
module1.watch(require("simpl-schema"), {                                                                               // 1
  "default": function (v) {                                                                                            // 1
    SimpleSchema = v;                                                                                                  // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
var BaseCollection = void 0;                                                                                           // 1
module1.watch(require("/imports/api/base/BaseCollection"), {                                                           // 1
  "default": function (v) {                                                                                            // 1
    BaseCollection = v;                                                                                                // 1
  }                                                                                                                    // 1
}, 1);                                                                                                                 // 1
var Interests = void 0;                                                                                                // 1
module1.watch(require("/imports/api/interest/InterestCollection"), {                                                   // 1
  Interests: function (v) {                                                                                            // 1
    Interests = v;                                                                                                     // 1
  }                                                                                                                    // 1
}, 2);                                                                                                                 // 1
var check = void 0;                                                                                                    // 1
module1.watch(require("meteor/check"), {                                                                               // 1
  check: function (v) {                                                                                                // 1
    check = v;                                                                                                         // 1
  }                                                                                                                    // 1
}, 3);                                                                                                                 // 1
var Meteor = void 0;                                                                                                   // 1
module1.watch(require("meteor/meteor"), {                                                                              // 1
  Meteor: function (v) {                                                                                               // 1
    Meteor = v;                                                                                                        // 1
  }                                                                                                                    // 1
}, 4);                                                                                                                 // 1
                                                                                                                       //
var _ = void 0;                                                                                                        // 1
                                                                                                                       //
module1.watch(require("meteor/underscore"), {                                                                          // 1
  _: function (v) {                                                                                                    // 1
    _ = v;                                                                                                             // 1
  }                                                                                                                    // 1
}, 5);                                                                                                                 // 1
var Tracker = void 0;                                                                                                  // 1
module1.watch(require("meteor/tracker"), {                                                                             // 1
  Tracker: function (v) {                                                                                              // 1
    Tracker = v;                                                                                                       // 1
  }                                                                                                                    // 1
}, 6);                                                                                                                 // 1
                                                                                                                       //
/** @module Profile */ /**                                                                                             // 9
                        * Profiles provide portfolio data for a user.                                                  //
                        * @extends module:Base~BaseCollection                                                          //
                        */var ProfileCollection = function (_BaseCollection) {                                         //
  (0, _inherits3.default)(ProfileCollection, _BaseCollection);                                                         //
                                                                                                                       //
  /**                                                                                                                  // 17
   * Creates the Profile collection.                                                                                   //
   */function ProfileCollection() {                                                                                    //
    (0, _classCallCheck3.default)(this, ProfileCollection);                                                            // 20
    return (0, _possibleConstructorReturn3.default)(this, _BaseCollection.call(this, 'Profile', new SimpleSchema({     // 20
      username: {                                                                                                      // 22
        type: String                                                                                                   // 22
      },                                                                                                               // 22
      // Remainder are optional                                                                                        // 23
      firstName: {                                                                                                     // 24
        type: String,                                                                                                  // 24
        optional: true                                                                                                 // 24
      },                                                                                                               // 24
      lastName: {                                                                                                      // 25
        type: String,                                                                                                  // 25
        optional: true                                                                                                 // 25
      },                                                                                                               // 25
      bio: {                                                                                                           // 26
        type: String,                                                                                                  // 26
        optional: true                                                                                                 // 26
      },                                                                                                               // 26
      interests: {                                                                                                     // 27
        type: Array,                                                                                                   // 27
        optional: true                                                                                                 // 27
      },                                                                                                               // 27
      'interests.$': {                                                                                                 // 28
        type: String                                                                                                   // 28
      },                                                                                                               // 28
      title: {                                                                                                         // 29
        type: String,                                                                                                  // 29
        optional: true                                                                                                 // 29
      },                                                                                                               // 29
      location: {                                                                                                      // 30
        type: String,                                                                                                  // 30
        optional: true                                                                                                 // 30
      },                                                                                                               // 30
      picture: {                                                                                                       // 31
        type: SimpleSchema.RegEx.Url,                                                                                  // 31
        optional: true                                                                                                 // 31
      },                                                                                                               // 31
      github: {                                                                                                        // 32
        type: SimpleSchema.RegEx.Url,                                                                                  // 32
        optional: true                                                                                                 // 32
      },                                                                                                               // 32
      facebook: {                                                                                                      // 33
        type: SimpleSchema.RegEx.Url,                                                                                  // 33
        optional: true                                                                                                 // 33
      },                                                                                                               // 33
      instagram: {                                                                                                     // 34
        type: SimpleSchema.RegEx.Url,                                                                                  // 34
        optional: true                                                                                                 // 34
      }                                                                                                                // 34
    }, {                                                                                                               // 21
      tracker: Tracker                                                                                                 // 35
    })));                                                                                                              // 35
  } /**                                                                                                                // 36
     * Defines a new Profile.                                                                                          //
     * @example                                                                                                        //
     * Profiles.define({ firstName: 'Philip',                                                                          //
     *                   lastName: 'Johnson',                                                                          //
     *                   username: 'johnson',                                                                          //
     *                   bio: 'I have been a professor of computer science at UH since 1990.',                         //
     *                   interests: ['Application Development', 'Software Engineering', 'Databases'],                  //
     *                   title: 'Professor of Information and Computer Sciences',                                      //
     *                   picture: 'http://philipmjohnson.org/headshot.jpg',                                            //
     *                   github: 'https://github.com/philipmjohnson',                                                  //
     *                   facebook: 'https://facebook.com/philipmjohnson',                                              //
     *                   instagram: 'https://instagram.com/philipmjohnson' });                                         //
     * @param { Object } description Object with required key username.                                                //
     * Remaining keys are optional.                                                                                    //
     * Username must be unique for all users. It should be the UH email account.                                       //
     * Interests is an array of defined interest names.                                                                //
     * @throws { Meteor.Error } If a user with the supplied username already exists, or                                //
     * if one or more interests are not defined, or if github, facebook, and instagram are not URLs.                   //
     * @returns The newly created docID.                                                                               //
     */                                                                                                                //
                                                                                                                       //
  ProfileCollection.prototype.define = function () {                                                                   //
    function define(_ref) {                                                                                            //
      var _ref$firstName = _ref.firstName,                                                                             // 60
          firstName = _ref$firstName === undefined ? '' : _ref$firstName,                                              // 60
          _ref$lastName = _ref.lastName,                                                                               // 60
          lastName = _ref$lastName === undefined ? '' : _ref$lastName,                                                 // 60
          username = _ref.username,                                                                                    // 60
          _ref$bio = _ref.bio,                                                                                         // 60
          bio = _ref$bio === undefined ? '' : _ref$bio,                                                                // 60
          _ref$interests = _ref.interests,                                                                             // 60
          interests = _ref$interests === undefined ? [] : _ref$interests,                                              // 60
          _ref$picture = _ref.picture,                                                                                 // 60
          picture = _ref$picture === undefined ? '' : _ref$picture,                                                    // 60
          _ref$title = _ref.title,                                                                                     // 60
          title = _ref$title === undefined ? '' : _ref$title,                                                          // 60
          _ref$github = _ref.github,                                                                                   // 60
          github = _ref$github === undefined ? '' : _ref$github,                                                       // 60
          _ref$facebook = _ref.facebook,                                                                               // 60
          facebook = _ref$facebook === undefined ? '' : _ref$facebook,                                                 // 60
          _ref$instagram = _ref.instagram,                                                                             // 60
          instagram = _ref$instagram === undefined ? '' : _ref$instagram,                                              // 60
          _ref$location = _ref.location,                                                                               // 60
          location = _ref$location === undefined ? '' : _ref$location;                                                 // 60
      // make sure required fields are OK.                                                                             // 61
      var checkPattern = {                                                                                             // 62
        firstName: String,                                                                                             // 62
        lastName: String,                                                                                              // 62
        username: String,                                                                                              // 62
        bio: String,                                                                                                   // 62
        picture: String,                                                                                               // 62
        title: String,                                                                                                 // 63
        location: String                                                                                               // 63
      };                                                                                                               // 62
      check({                                                                                                          // 64
        firstName: firstName,                                                                                          // 64
        lastName: lastName,                                                                                            // 64
        username: username,                                                                                            // 64
        bio: bio,                                                                                                      // 64
        picture: picture,                                                                                              // 64
        title: title,                                                                                                  // 64
        location: location                                                                                             // 64
      }, checkPattern);                                                                                                // 64
                                                                                                                       //
      if (this.find({                                                                                                  // 66
        username: username                                                                                             // 66
      }).count() > 0) {                                                                                                // 66
        throw new Meteor.Error(username + " is previously defined in another Profile");                                // 67
      } // Throw an error if any of the passed Interest names are not defined.                                         // 68
                                                                                                                       //
                                                                                                                       //
      Interests.assertNames(interests); // Throw an error if there are duplicates in the passed interest names.        // 71
                                                                                                                       //
      if (interests.length !== _.uniq(interests).length) {                                                             // 74
        throw new Meteor.Error(interests + " contains duplicates");                                                    // 75
      }                                                                                                                // 76
                                                                                                                       //
      return this._collection.insert({                                                                                 // 78
        firstName: firstName,                                                                                          // 78
        lastName: lastName,                                                                                            // 78
        username: username,                                                                                            // 78
        bio: bio,                                                                                                      // 78
        interests: interests,                                                                                          // 78
        picture: picture,                                                                                              // 78
        title: title,                                                                                                  // 78
        github: github,                                                                                                // 78
        facebook: facebook,                                                                                            // 79
        instagram: instagram,                                                                                          // 79
        location: location                                                                                             // 79
      });                                                                                                              // 78
    }                                                                                                                  // 80
                                                                                                                       //
    return define;                                                                                                     //
  }(); /**                                                                                                             //
        * Returns an object representing the Profile docID in a format acceptable to define().                         //
        * @param docID The docID of a Profile.                                                                         //
        * @returns { Object } An object representing the definition of docID.                                          //
        */                                                                                                             //
                                                                                                                       //
  ProfileCollection.prototype.dumpOne = function () {                                                                  //
    function dumpOne(docID) {                                                                                          //
      var doc = this.findDoc(docID);                                                                                   // 88
      var firstName = doc.firstName;                                                                                   // 89
      var lastName = doc.lastName;                                                                                     // 90
      var username = doc.username;                                                                                     // 91
      var bio = doc.bio;                                                                                               // 92
      var interests = doc.interests;                                                                                   // 93
      var picture = doc.picture;                                                                                       // 94
      var title = doc.title;                                                                                           // 95
      var location = doc.location;                                                                                     // 96
      var github = doc.github;                                                                                         // 97
      var facebook = doc.facebook;                                                                                     // 98
      var instagram = doc.instagram;                                                                                   // 99
      return {                                                                                                         // 100
        firstName: firstName,                                                                                          // 100
        lastName: lastName,                                                                                            // 100
        username: username,                                                                                            // 100
        bio: bio,                                                                                                      // 100
        interests: interests,                                                                                          // 100
        picture: picture,                                                                                              // 100
        title: title,                                                                                                  // 100
        github: github,                                                                                                // 100
        facebook: facebook,                                                                                            // 100
        instagram: instagram,                                                                                          // 100
        location: location                                                                                             // 100
      };                                                                                                               // 100
    }                                                                                                                  // 101
                                                                                                                       //
    return dumpOne;                                                                                                    //
  }();                                                                                                                 //
                                                                                                                       //
  return ProfileCollection;                                                                                            //
}(BaseCollection); /**                                                                                                 //
                    * Provides the singleton instance of this class to all other entities.                             //
                    */                                                                                                 //
                                                                                                                       //
var Profiles = new ProfileCollection();                                                                                // 107
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/profile/index.js                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.watch(require("./ProfileCollection.js"));                                                                       // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"startup":{"client":{"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/client/index.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.watch(require("./router.js"));                                                                                  // 1
module.watch(require("./useraccount-configuration"));                                                                  // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"router.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/client/router.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({                                                                                                        // 1
  landingPageRouteName: function () {                                                                                  // 1
    return landingPageRouteName;                                                                                       // 1
  },                                                                                                                   // 1
  directoryPageRouteName: function () {                                                                                // 1
    return directoryPageRouteName;                                                                                     // 1
  },                                                                                                                   // 1
  profilePageRouteName: function () {                                                                                  // 1
    return profilePageRouteName;                                                                                       // 1
  },                                                                                                                   // 1
  filterPageRouteName: function () {                                                                                   // 1
    return filterPageRouteName;                                                                                        // 1
  }                                                                                                                    // 1
});                                                                                                                    // 1
var FlowRouter = void 0;                                                                                               // 1
module.watch(require("meteor/kadira:flow-router"), {                                                                   // 1
  FlowRouter: function (v) {                                                                                           // 1
    FlowRouter = v;                                                                                                    // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
var BlazeLayout = void 0;                                                                                              // 1
module.watch(require("meteor/kadira:blaze-layout"), {                                                                  // 1
  BlazeLayout: function (v) {                                                                                          // 1
    BlazeLayout = v;                                                                                                   // 1
  }                                                                                                                    // 1
}, 1);                                                                                                                 // 1
var $ = void 0;                                                                                                        // 1
module.watch(require("meteor/jquery"), {                                                                               // 1
  $: function (v) {                                                                                                    // 1
    $ = v;                                                                                                             // 1
  }                                                                                                                    // 1
}, 2);                                                                                                                 // 1
var landingPageRouteName = 'Landing_Page';                                                                             // 8
FlowRouter.route('/', {                                                                                                // 9
  name: landingPageRouteName,                                                                                          // 10
  action: function () {                                                                                                // 11
    BlazeLayout.render('Landing_Layout', {                                                                             // 12
      main: landingPageRouteName                                                                                       // 12
    });                                                                                                                // 12
  }                                                                                                                    // 13
}); /*                        DIRECTORY ROUTE                       */                                                 // 9
                                                                                                                       //
function addDirectoryBodyClass() {                                                                                     // 18
  $('body').addClass('directory-page-body');                                                                           // 19
}                                                                                                                      // 20
                                                                                                                       //
function removeDirectoryBodyClass() {                                                                                  // 22
  $('body').removeClass('directory-page-body');                                                                        // 23
}                                                                                                                      // 24
                                                                                                                       //
var directoryPageRouteName = 'Directory_Page';                                                                         // 26
FlowRouter.route('/directory', {                                                                                       // 27
  name: directoryPageRouteName,                                                                                        // 28
  action: function () {                                                                                                // 29
    BlazeLayout.render('Directory_Layout', {                                                                           // 30
      main: directoryPageRouteName                                                                                     // 30
    });                                                                                                                // 30
  },                                                                                                                   // 31
  triggersEnter: [addDirectoryBodyClass],                                                                              // 32
  triggersExit: [removeDirectoryBodyClass]                                                                             // 33
}); /*                        USER ROUTES                      */                                                      // 27
                                                                                                                       //
function addUserBodyClass() {                                                                                          // 40
  $('body').addClass('user-layout-body');                                                                              // 41
}                                                                                                                      // 42
                                                                                                                       //
function removeUserBodyClass() {                                                                                       // 44
  $('body').removeClass('user-layout-body');                                                                           // 45
}                                                                                                                      // 46
                                                                                                                       //
var userRoutes = FlowRouter.group({                                                                                    // 48
  prefix: '/:username',                                                                                                // 49
  name: 'userRoutes',                                                                                                  // 50
  triggersEnter: [addUserBodyClass],                                                                                   // 51
  triggersExit: [removeUserBodyClass]                                                                                  // 52
});                                                                                                                    // 48
var profilePageRouteName = 'Profile_Page';                                                                             // 55
userRoutes.route('/profile', {                                                                                         // 56
  name: profilePageRouteName,                                                                                          // 57
  action: function () {                                                                                                // 58
    BlazeLayout.render('User_Layout', {                                                                                // 59
      main: profilePageRouteName                                                                                       // 59
    });                                                                                                                // 59
  }                                                                                                                    // 60
});                                                                                                                    // 56
var filterPageRouteName = 'Filter_Page';                                                                               // 63
userRoutes.route('/filter', {                                                                                          // 64
  name: filterPageRouteName,                                                                                           // 65
  action: function () {                                                                                                // 66
    BlazeLayout.render('User_Layout', {                                                                                // 67
      main: filterPageRouteName                                                                                        // 67
    });                                                                                                                // 67
  }                                                                                                                    // 68
}); /*                        MISC ROUTES                       */                                                     // 64
FlowRouter.notFound = {                                                                                                // 72
  action: function () {                                                                                                // 73
    BlazeLayout.render('Page_Not_Found');                                                                              // 74
  }                                                                                                                    // 75
};                                                                                                                     // 72
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useraccount-configuration.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/client/useraccount-configuration.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Meteor = void 0;                                                                                                   // 1
module.watch(require("meteor/meteor"), {                                                                               // 1
  Meteor: function (v) {                                                                                               // 1
    Meteor = v;                                                                                                        // 1
  }                                                                                                                    // 1
}, 0);                                                                                                                 // 1
var Accounts = void 0;                                                                                                 // 1
module.watch(require("meteor/accounts-base"), {                                                                        // 1
  Accounts: function (v) {                                                                                             // 1
    Accounts = v;                                                                                                      // 1
  }                                                                                                                    // 1
}, 1);                                                                                                                 // 1
var FlowRouter = void 0;                                                                                               // 1
module.watch(require("meteor/kadira:flow-router"), {                                                                   // 1
  FlowRouter: function (v) {                                                                                           // 1
    FlowRouter = v;                                                                                                    // 1
  }                                                                                                                    // 1
}, 2);                                                                                                                 // 1
/**                                                                                                                    // 6
 * Define a callback to be run when after a user logs in to redirect them to their home page.                          //
 * This is not straightforward because this callback is invoked even on a page refresh, and we don't want to do        //
 * anything on a page refresh.                                                                                         //
 * To determine if the function is being invoked during a "true" login, we check to see that the userId is defined and
 * that the user is currently on the landing page. Only then do we redirect to the user's profile page.                //
 */Accounts.onLogin(function () {                                                                                      //
  function onLogin() {                                                                                                 // 13
    var id = Meteor.userId();                                                                                          // 14
    var onLandingPage = FlowRouter.current().path && FlowRouter.current().path === '/';                                // 15
    var initialLogin = id && onLandingPage;                                                                            // 16
                                                                                                                       //
    if (initialLogin) {                                                                                                // 18
      var username = Meteor.user().profile.name;                                                                       // 19
      FlowRouter.go("/" + username + "/profile");                                                                      // 20
    }                                                                                                                  // 21
  }                                                                                                                    // 22
                                                                                                                       //
  return onLogin;                                                                                                      // 13
}());                                                                                                                  // 13
Accounts.onLogout(function () {                                                                                        // 24
  function logout() {                                                                                                  // 24
    FlowRouter.go('/');                                                                                                // 25
  }                                                                                                                    // 26
                                                                                                                       //
  return logout;                                                                                                       // 24
}());                                                                                                                  // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"client":{"lib":{"semantic-ui":{"definitions":{"behaviors":{"api.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/behaviors/api.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - API                                                                                              //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  var window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.api = $.fn.api = function (parameters) {                                                                           // 27
    var // use window context if none specified                                                                        // 29
    $allModules = $.isFunction(this) ? $(window) : $(this),                                                            // 31
        moduleSelector = $allModules.selector || '',                                                                   // 29
        time = new Date().getTime(),                                                                                   // 29
        performance = [],                                                                                              // 29
        query = arguments[0],                                                                                          // 29
        methodInvoked = typeof query == 'string',                                                                      // 29
        queryArguments = [].slice.call(arguments, 1),                                                                  // 29
        returnedValue;                                                                                                 // 29
    $allModules.each(function () {                                                                                     // 45
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.api.settings, parameters) : $.extend({}, $.fn.api.settings),
          // internal aliases                                                                                          // 47
      namespace = settings.namespace,                                                                                  // 53
          metadata = settings.metadata,                                                                                // 47
          selector = settings.selector,                                                                                // 47
          error = settings.error,                                                                                      // 47
          className = settings.className,                                                                              // 47
          // define namespaces for modules                                                                             // 47
      eventNamespace = '.' + namespace,                                                                                // 60
          moduleNamespace = 'module-' + namespace,                                                                     // 47
          // element that creates request                                                                              // 47
      $module = $(this),                                                                                               // 64
          $form = $module.closest(selector.form),                                                                      // 47
          // context used for state                                                                                    // 47
      $context = settings.stateContext ? $(settings.stateContext) : $module,                                           // 68
          // request details                                                                                           // 47
      ajaxSettings,                                                                                                    // 73
          requestSettings,                                                                                             // 47
          url,                                                                                                         // 47
          data,                                                                                                        // 47
          requestStartTime,                                                                                            // 47
          // standard module                                                                                           // 47
      element = this,                                                                                                  // 80
          context = $context[0],                                                                                       // 47
          instance = $module.data(moduleNamespace),                                                                    // 47
          module;                                                                                                      // 47
      module = {                                                                                                       // 86
        initialize: function () {                                                                                      // 88
          if (!methodInvoked) {                                                                                        // 89
            module.bind.events();                                                                                      // 90
          }                                                                                                            // 91
                                                                                                                       //
          module.instantiate();                                                                                        // 92
        },                                                                                                             // 93
        instantiate: function () {                                                                                     // 95
          module.verbose('Storing instance of module', module);                                                        // 96
          instance = module;                                                                                           // 97
          $module.data(moduleNamespace, instance);                                                                     // 98
        },                                                                                                             // 101
        destroy: function () {                                                                                         // 103
          module.verbose('Destroying previous module for', element);                                                   // 104
          $module.removeData(moduleNamespace).off(eventNamespace);                                                     // 105
        },                                                                                                             // 109
        bind: {                                                                                                        // 111
          events: function () {                                                                                        // 112
            var triggerEvent = module.get.event();                                                                     // 113
                                                                                                                       //
            if (triggerEvent) {                                                                                        // 116
              module.verbose('Attaching API events to element', triggerEvent);                                         // 117
              $module.on(triggerEvent + eventNamespace, module.event.trigger);                                         // 118
            } else if (settings.on == 'now') {                                                                         // 121
              module.debug('Querying API endpoint immediately');                                                       // 123
              module.query();                                                                                          // 124
            }                                                                                                          // 125
          }                                                                                                            // 126
        },                                                                                                             // 111
        decode: {                                                                                                      // 129
          json: function (response) {                                                                                  // 130
            if (response !== undefined && typeof response == 'string') {                                               // 131
              try {                                                                                                    // 132
                response = JSON.parse(response);                                                                       // 133
              } catch (e) {// isnt json string                                                                         // 134
              }                                                                                                        // 137
            }                                                                                                          // 138
                                                                                                                       //
            return response;                                                                                           // 139
          }                                                                                                            // 140
        },                                                                                                             // 129
        read: {                                                                                                        // 143
          cachedResponse: function (url) {                                                                             // 144
            var response;                                                                                              // 145
                                                                                                                       //
            if (window.Storage === undefined) {                                                                        // 148
              module.error(error.noStorage);                                                                           // 149
              return;                                                                                                  // 150
            }                                                                                                          // 151
                                                                                                                       //
            response = sessionStorage.getItem(url);                                                                    // 152
            module.debug('Using cached response', url, response);                                                      // 153
            response = module.decode.json(response);                                                                   // 154
            return response;                                                                                           // 155
          }                                                                                                            // 156
        },                                                                                                             // 143
        write: {                                                                                                       // 158
          cachedResponse: function (url, response) {                                                                   // 159
            if (response && response === '') {                                                                         // 160
              module.debug('Response empty, not caching', response);                                                   // 161
              return;                                                                                                  // 162
            }                                                                                                          // 163
                                                                                                                       //
            if (window.Storage === undefined) {                                                                        // 164
              module.error(error.noStorage);                                                                           // 165
              return;                                                                                                  // 166
            }                                                                                                          // 167
                                                                                                                       //
            if ($.isPlainObject(response)) {                                                                           // 168
              response = JSON.stringify(response);                                                                     // 169
            }                                                                                                          // 170
                                                                                                                       //
            sessionStorage.setItem(url, response);                                                                     // 171
            module.verbose('Storing cached response for url', url, response);                                          // 172
          }                                                                                                            // 173
        },                                                                                                             // 158
        query: function () {                                                                                           // 176
          if (module.is.disabled()) {                                                                                  // 178
            module.debug('Element is disabled API request aborted');                                                   // 179
            return;                                                                                                    // 180
          }                                                                                                            // 181
                                                                                                                       //
          if (module.is.loading()) {                                                                                   // 183
            if (settings.interruptRequests) {                                                                          // 184
              module.debug('Interrupting previous request');                                                           // 185
              module.abort();                                                                                          // 186
            } else {                                                                                                   // 187
              module.debug('Cancelling request, previous request is still pending');                                   // 189
              return;                                                                                                  // 190
            }                                                                                                          // 191
          } // pass element metadata to url (value, text)                                                              // 192
                                                                                                                       //
                                                                                                                       //
          if (settings.defaultData) {                                                                                  // 195
            $.extend(true, settings.urlData, module.get.defaultData());                                                // 196
          } // Add form content                                                                                        // 197
                                                                                                                       //
                                                                                                                       //
          if (settings.serializeForm) {                                                                                // 200
            settings.data = module.add.formData(settings.data);                                                        // 201
          } // call beforesend and get any settings changes                                                            // 202
                                                                                                                       //
                                                                                                                       //
          requestSettings = module.get.settings(); // check if before send cancelled request                           // 205
                                                                                                                       //
          if (requestSettings === false) {                                                                             // 208
            module.cancelled = true;                                                                                   // 209
            module.error(error.beforeSend);                                                                            // 210
            return;                                                                                                    // 211
          } else {                                                                                                     // 212
            module.cancelled = false;                                                                                  // 214
          } // get url                                                                                                 // 215
                                                                                                                       //
                                                                                                                       //
          url = module.get.templatedURL();                                                                             // 218
                                                                                                                       //
          if (!url && !module.is.mocked()) {                                                                           // 220
            module.error(error.missingURL);                                                                            // 221
            return;                                                                                                    // 222
          } // replace variables                                                                                       // 223
                                                                                                                       //
                                                                                                                       //
          url = module.add.urlData(url); // missing url parameters                                                     // 226
                                                                                                                       //
          if (!url && !module.is.mocked()) {                                                                           // 228
            return;                                                                                                    // 229
          }                                                                                                            // 230
                                                                                                                       //
          requestSettings.url = settings.base + url; // look for jQuery ajax parameters in settings                    // 232
                                                                                                                       //
          ajaxSettings = $.extend(true, {}, settings, {                                                                // 235
            type: settings.method || settings.type,                                                                    // 236
            data: data,                                                                                                // 237
            url: settings.base + url,                                                                                  // 238
            beforeSend: settings.beforeXHR,                                                                            // 239
            success: function () {},                                                                                   // 240
            failure: function () {},                                                                                   // 241
            complete: function () {}                                                                                   // 242
          });                                                                                                          // 235
          module.debug('Querying URL', ajaxSettings.url);                                                              // 245
          module.verbose('Using AJAX settings', ajaxSettings);                                                         // 246
                                                                                                                       //
          if (settings.cache === 'local' && module.read.cachedResponse(url)) {                                         // 247
            module.debug('Response returned from local cache');                                                        // 248
            module.request = module.create.request();                                                                  // 249
            module.request.resolveWith(context, [module.read.cachedResponse(url)]);                                    // 250
            return;                                                                                                    // 251
          }                                                                                                            // 252
                                                                                                                       //
          if (!settings.throttle) {                                                                                    // 254
            module.debug('Sending request', data, ajaxSettings.method);                                                // 255
            module.send.request();                                                                                     // 256
          } else {                                                                                                     // 257
            if (!settings.throttleFirstRequest && !module.timer) {                                                     // 259
              module.debug('Sending request', data, ajaxSettings.method);                                              // 260
              module.send.request();                                                                                   // 261
              module.timer = setTimeout(function () {}, settings.throttle);                                            // 262
            } else {                                                                                                   // 263
              module.debug('Throttling request', settings.throttle);                                                   // 265
              clearTimeout(module.timer);                                                                              // 266
              module.timer = setTimeout(function () {                                                                  // 267
                if (module.timer) {                                                                                    // 268
                  delete module.timer;                                                                                 // 269
                }                                                                                                      // 270
                                                                                                                       //
                module.debug('Sending throttled request', data, ajaxSettings.method);                                  // 271
                module.send.request();                                                                                 // 272
              }, settings.throttle);                                                                                   // 273
            }                                                                                                          // 274
          }                                                                                                            // 275
        },                                                                                                             // 277
        should: {                                                                                                      // 279
          removeError: function () {                                                                                   // 280
            return settings.hideError === true || settings.hideError === 'auto' && !module.is.form();                  // 281
          }                                                                                                            // 282
        },                                                                                                             // 279
        is: {                                                                                                          // 285
          disabled: function () {                                                                                      // 286
            return $module.filter(selector.disabled).length > 0;                                                       // 287
          },                                                                                                           // 288
          expectingJSON: function () {                                                                                 // 289
            return settings.dataType === 'json' || settings.dataType === 'jsonp';                                      // 290
          },                                                                                                           // 291
          form: function () {                                                                                          // 292
            return $module.is('form') || $context.is('form');                                                          // 293
          },                                                                                                           // 294
          mocked: function () {                                                                                        // 295
            return settings.mockResponse || settings.mockResponseAsync || settings.response || settings.responseAsync;
          },                                                                                                           // 297
          input: function () {                                                                                         // 298
            return $module.is('input');                                                                                // 299
          },                                                                                                           // 300
          loading: function () {                                                                                       // 301
            return module.request ? module.request.state() == 'pending' : false;                                       // 302
          },                                                                                                           // 306
          abortedRequest: function (xhr) {                                                                             // 307
            if (xhr && xhr.readyState !== undefined && xhr.readyState === 0) {                                         // 308
              module.verbose('XHR request determined to be aborted');                                                  // 309
              return true;                                                                                             // 310
            } else {                                                                                                   // 311
              module.verbose('XHR request was not aborted');                                                           // 313
              return false;                                                                                            // 314
            }                                                                                                          // 315
          },                                                                                                           // 316
          validResponse: function (response) {                                                                         // 317
            if (!module.is.expectingJSON() || !$.isFunction(settings.successTest)) {                                   // 318
              module.verbose('Response is not JSON, skipping validation', settings.successTest, response);             // 319
              return true;                                                                                             // 320
            }                                                                                                          // 321
                                                                                                                       //
            module.debug('Checking JSON returned success', settings.successTest, response);                            // 322
                                                                                                                       //
            if (settings.successTest(response)) {                                                                      // 323
              module.debug('Response passed success test', response);                                                  // 324
              return true;                                                                                             // 325
            } else {                                                                                                   // 326
              module.debug('Response failed success test', response);                                                  // 328
              return false;                                                                                            // 329
            }                                                                                                          // 330
          }                                                                                                            // 331
        },                                                                                                             // 285
        was: {                                                                                                         // 334
          cancelled: function () {                                                                                     // 335
            return module.cancelled || false;                                                                          // 336
          },                                                                                                           // 337
          succesful: function () {                                                                                     // 338
            return module.request && module.request.state() == 'resolved';                                             // 339
          },                                                                                                           // 340
          failure: function () {                                                                                       // 341
            return module.request && module.request.state() == 'rejected';                                             // 342
          },                                                                                                           // 343
          complete: function () {                                                                                      // 344
            return module.request && (module.request.state() == 'resolved' || module.request.state() == 'rejected');   // 345
          }                                                                                                            // 346
        },                                                                                                             // 334
        add: {                                                                                                         // 349
          urlData: function (url, urlData) {                                                                           // 350
            var requiredVariables, optionalVariables;                                                                  // 351
                                                                                                                       //
            if (url) {                                                                                                 // 355
              requiredVariables = url.match(settings.regExp.required);                                                 // 356
              optionalVariables = url.match(settings.regExp.optional);                                                 // 357
              urlData = urlData || settings.urlData;                                                                   // 358
                                                                                                                       //
              if (requiredVariables) {                                                                                 // 359
                module.debug('Looking for required URL variables', requiredVariables);                                 // 360
                $.each(requiredVariables, function (index, templatedString) {                                          // 361
                  var // allow legacy {$var} style                                                                     // 362
                  variable = templatedString.indexOf('$') !== -1 ? templatedString.substr(2, templatedString.length - 3) : templatedString.substr(1, templatedString.length - 2),
                      value = $.isPlainObject(urlData) && urlData[variable] !== undefined ? urlData[variable] : $module.data(variable) !== undefined ? $module.data(variable) : $context.data(variable) !== undefined ? $context.data(variable) : urlData[variable]; // remove value
                                                                                                                       //
                  if (value === undefined) {                                                                           // 376
                    module.error(error.requiredParameter, variable, url);                                              // 377
                    url = false;                                                                                       // 378
                    return false;                                                                                      // 379
                  } else {                                                                                             // 380
                    module.verbose('Found required variable', variable, value);                                        // 382
                    value = settings.encodeParameters ? module.get.urlEncodedValue(value) : value;                     // 383
                    url = url.replace(templatedString, value);                                                         // 387
                  }                                                                                                    // 388
                });                                                                                                    // 389
              }                                                                                                        // 390
                                                                                                                       //
              if (optionalVariables) {                                                                                 // 391
                module.debug('Looking for optional URL variables', requiredVariables);                                 // 392
                $.each(optionalVariables, function (index, templatedString) {                                          // 393
                  var // allow legacy {/$var} style                                                                    // 394
                  variable = templatedString.indexOf('$') !== -1 ? templatedString.substr(3, templatedString.length - 4) : templatedString.substr(2, templatedString.length - 3),
                      value = $.isPlainObject(urlData) && urlData[variable] !== undefined ? urlData[variable] : $module.data(variable) !== undefined ? $module.data(variable) : $context.data(variable) !== undefined ? $context.data(variable) : urlData[variable]; // optional replacement
                                                                                                                       //
                  if (value !== undefined) {                                                                           // 408
                    module.verbose('Optional variable Found', variable, value);                                        // 409
                    url = url.replace(templatedString, value);                                                         // 410
                  } else {                                                                                             // 411
                    module.verbose('Optional variable not found', variable); // remove preceding slash if set          // 413
                                                                                                                       //
                    if (url.indexOf('/' + templatedString) !== -1) {                                                   // 415
                      url = url.replace('/' + templatedString, '');                                                    // 416
                    } else {                                                                                           // 417
                      url = url.replace(templatedString, '');                                                          // 419
                    }                                                                                                  // 420
                  }                                                                                                    // 421
                });                                                                                                    // 422
              }                                                                                                        // 423
            }                                                                                                          // 424
                                                                                                                       //
            return url;                                                                                                // 425
          },                                                                                                           // 426
          formData: function (data) {                                                                                  // 427
            var canSerialize = $.fn.serializeObject !== undefined,                                                     // 428
                formData = canSerialize ? $form.serializeObject() : $form.serialize(),                                 // 428
                hasOtherData;                                                                                          // 428
            data = data || settings.data;                                                                              // 435
            hasOtherData = $.isPlainObject(data);                                                                      // 436
                                                                                                                       //
            if (hasOtherData) {                                                                                        // 438
              if (canSerialize) {                                                                                      // 439
                module.debug('Extending existing data with form data', data, formData);                                // 440
                data = $.extend(true, {}, data, formData);                                                             // 441
              } else {                                                                                                 // 442
                module.error(error.missingSerialize);                                                                  // 444
                module.debug('Cant extend data. Replacing data with form data', data, formData);                       // 445
                data = formData;                                                                                       // 446
              }                                                                                                        // 447
            } else {                                                                                                   // 448
              module.debug('Adding form data', formData);                                                              // 450
              data = formData;                                                                                         // 451
            }                                                                                                          // 452
                                                                                                                       //
            return data;                                                                                               // 453
          }                                                                                                            // 454
        },                                                                                                             // 349
        send: {                                                                                                        // 457
          request: function () {                                                                                       // 458
            module.set.loading();                                                                                      // 459
            module.request = module.create.request();                                                                  // 460
                                                                                                                       //
            if (module.is.mocked()) {                                                                                  // 461
              module.mockedXHR = module.create.mockedXHR();                                                            // 462
            } else {                                                                                                   // 463
              module.xhr = module.create.xhr();                                                                        // 465
            }                                                                                                          // 466
                                                                                                                       //
            settings.onRequest.call(context, module.request, module.xhr);                                              // 467
          }                                                                                                            // 468
        },                                                                                                             // 457
        event: {                                                                                                       // 471
          trigger: function (event) {                                                                                  // 472
            module.query();                                                                                            // 473
                                                                                                                       //
            if (event.type == 'submit' || event.type == 'click') {                                                     // 474
              event.preventDefault();                                                                                  // 475
            }                                                                                                          // 476
          },                                                                                                           // 477
          xhr: {                                                                                                       // 478
            always: function () {// nothing special                                                                    // 479
            },                                                                                                         // 481
            done: function (response, textStatus, xhr) {                                                               // 482
              var context = this,                                                                                      // 483
                  elapsedTime = new Date().getTime() - requestStartTime,                                               // 483
                  timeLeft = settings.loadingDuration - elapsedTime,                                                   // 483
                  translatedResponse = $.isFunction(settings.onResponse) ? module.is.expectingJSON() ? settings.onResponse.call(context, $.extend(true, {}, response)) : settings.onResponse.call(context, response) : false;
              timeLeft = timeLeft > 0 ? timeLeft : 0;                                                                  // 493
                                                                                                                       //
              if (translatedResponse) {                                                                                // 497
                module.debug('Modified API response in onResponse callback', settings.onResponse, translatedResponse, response);
                response = translatedResponse;                                                                         // 499
              }                                                                                                        // 500
                                                                                                                       //
              if (timeLeft > 0) {                                                                                      // 501
                module.debug('Response completed early delaying state change by', timeLeft);                           // 502
              }                                                                                                        // 503
                                                                                                                       //
              setTimeout(function () {                                                                                 // 504
                if (module.is.validResponse(response)) {                                                               // 505
                  module.request.resolveWith(context, [response, xhr]);                                                // 506
                } else {                                                                                               // 507
                  module.request.rejectWith(context, [xhr, 'invalid']);                                                // 509
                }                                                                                                      // 510
              }, timeLeft);                                                                                            // 511
            },                                                                                                         // 512
            fail: function (xhr, status, httpMessage) {                                                                // 513
              var context = this,                                                                                      // 514
                  elapsedTime = new Date().getTime() - requestStartTime,                                               // 514
                  timeLeft = settings.loadingDuration - elapsedTime;                                                   // 514
              timeLeft = timeLeft > 0 ? timeLeft : 0;                                                                  // 519
                                                                                                                       //
              if (timeLeft > 0) {                                                                                      // 523
                module.debug('Response completed early delaying state change by', timeLeft);                           // 524
              }                                                                                                        // 525
                                                                                                                       //
              setTimeout(function () {                                                                                 // 526
                if (module.is.abortedRequest(xhr)) {                                                                   // 527
                  module.request.rejectWith(context, [xhr, 'aborted', httpMessage]);                                   // 528
                } else {                                                                                               // 529
                  module.request.rejectWith(context, [xhr, 'error', status, httpMessage]);                             // 531
                }                                                                                                      // 532
              }, timeLeft);                                                                                            // 533
            }                                                                                                          // 534
          },                                                                                                           // 478
          request: {                                                                                                   // 536
            done: function (response, xhr) {                                                                           // 537
              module.debug('Successful API Response', response);                                                       // 538
                                                                                                                       //
              if (settings.cache === 'local' && url) {                                                                 // 539
                module.write.cachedResponse(url, response);                                                            // 540
                module.debug('Saving server response locally', module.cache);                                          // 541
              }                                                                                                        // 542
                                                                                                                       //
              settings.onSuccess.call(context, response, $module, xhr);                                                // 543
            },                                                                                                         // 544
            complete: function (firstParameter, secondParameter) {                                                     // 545
              var xhr, response; // have to guess callback parameters based on request success                         // 546
                                                                                                                       //
              if (module.was.succesful()) {                                                                            // 551
                response = firstParameter;                                                                             // 552
                xhr = secondParameter;                                                                                 // 553
              } else {                                                                                                 // 554
                xhr = firstParameter;                                                                                  // 556
                response = module.get.responseFromXHR(xhr);                                                            // 557
              }                                                                                                        // 558
                                                                                                                       //
              module.remove.loading();                                                                                 // 559
              settings.onComplete.call(context, response, $module, xhr);                                               // 560
            },                                                                                                         // 561
            fail: function (xhr, status, httpMessage) {                                                                // 562
              var // pull response from xhr if available                                                               // 563
              response = module.get.responseFromXHR(xhr),                                                              // 565
                  errorMessage = module.get.errorFromRequest(response, status, httpMessage);                           // 563
                                                                                                                       //
              if (status == 'aborted') {                                                                               // 568
                module.debug('XHR Aborted (Most likely caused by page navigation or CORS Policy)', status, httpMessage);
                settings.onAbort.call(context, status, $module, xhr);                                                  // 570
                return true;                                                                                           // 571
              } else if (status == 'invalid') {                                                                        // 572
                module.debug('JSON did not pass success test. A server-side error has most likely occurred', response);
              } else if (status == 'error') {                                                                          // 575
                if (xhr !== undefined) {                                                                               // 577
                  module.debug('XHR produced a server error', status, httpMessage); // make sure we have an error to display to console
                                                                                                                       //
                  if (xhr.status != 200 && httpMessage !== undefined && httpMessage !== '') {                          // 580
                    module.error(error.statusMessage + httpMessage, ajaxSettings.url);                                 // 581
                  }                                                                                                    // 582
                                                                                                                       //
                  settings.onError.call(context, errorMessage, $module, xhr);                                          // 583
                }                                                                                                      // 584
              }                                                                                                        // 585
                                                                                                                       //
              if (settings.errorDuration && status !== 'aborted') {                                                    // 587
                module.debug('Adding error state');                                                                    // 588
                module.set.error();                                                                                    // 589
                                                                                                                       //
                if (module.should.removeError()) {                                                                     // 590
                  setTimeout(module.remove.error, settings.errorDuration);                                             // 591
                }                                                                                                      // 592
              }                                                                                                        // 593
                                                                                                                       //
              module.debug('API Request failed', errorMessage, xhr);                                                   // 594
              settings.onFailure.call(context, response, $module, xhr);                                                // 595
            }                                                                                                          // 596
          }                                                                                                            // 536
        },                                                                                                             // 471
        create: {                                                                                                      // 600
          request: function () {                                                                                       // 602
            // api request promise                                                                                     // 603
            return $.Deferred().always(module.event.request.complete).done(module.event.request.done).fail(module.event.request.fail);
          },                                                                                                           // 609
          mockedXHR: function () {                                                                                     // 611
            var // xhr does not simulate these properties of xhr but must return them                                  // 612
            textStatus = false,                                                                                        // 614
                status = false,                                                                                        // 612
                httpMessage = false,                                                                                   // 612
                responder = settings.mockResponse || settings.response,                                                // 612
                asyncResponder = settings.mockResponseAsync || settings.responseAsync,                                 // 612
                asyncCallback,                                                                                         // 612
                response,                                                                                              // 612
                mockedXHR;                                                                                             // 612
            mockedXHR = $.Deferred().always(module.event.xhr.complete).done(module.event.xhr.done).fail(module.event.xhr.fail);
                                                                                                                       //
            if (responder) {                                                                                           // 630
              if ($.isFunction(responder)) {                                                                           // 631
                module.debug('Using specified synchronous callback', responder);                                       // 632
                response = responder.call(context, requestSettings);                                                   // 633
              } else {                                                                                                 // 634
                module.debug('Using settings specified response', responder);                                          // 636
                response = responder;                                                                                  // 637
              } // simulating response                                                                                 // 638
                                                                                                                       //
                                                                                                                       //
              mockedXHR.resolveWith(context, [response, textStatus, {                                                  // 640
                responseText: response                                                                                 // 640
              }]);                                                                                                     // 640
            } else if ($.isFunction(asyncResponder)) {                                                                 // 641
              asyncCallback = function (response) {                                                                    // 643
                module.debug('Async callback returned response', response);                                            // 644
                                                                                                                       //
                if (response) {                                                                                        // 646
                  mockedXHR.resolveWith(context, [response, textStatus, {                                              // 647
                    responseText: response                                                                             // 647
                  }]);                                                                                                 // 647
                } else {                                                                                               // 648
                  mockedXHR.rejectWith(context, [{                                                                     // 650
                    responseText: response                                                                             // 650
                  }, status, httpMessage]);                                                                            // 650
                }                                                                                                      // 651
              };                                                                                                       // 652
                                                                                                                       //
              module.debug('Using specified async response callback', asyncResponder);                                 // 653
              asyncResponder.call(context, requestSettings, asyncCallback);                                            // 654
            }                                                                                                          // 655
                                                                                                                       //
            return mockedXHR;                                                                                          // 656
          },                                                                                                           // 657
          xhr: function () {                                                                                           // 659
            var xhr; // ajax request promise                                                                           // 660
                                                                                                                       //
            xhr = $.ajax(ajaxSettings).always(module.event.xhr.always).done(module.event.xhr.done).fail(module.event.xhr.fail);
            module.verbose('Created server request', xhr, ajaxSettings);                                               // 669
            return xhr;                                                                                                // 670
          }                                                                                                            // 671
        },                                                                                                             // 600
        set: {                                                                                                         // 674
          error: function () {                                                                                         // 675
            module.verbose('Adding error state to element', $context);                                                 // 676
            $context.addClass(className.error);                                                                        // 677
          },                                                                                                           // 678
          loading: function () {                                                                                       // 679
            module.verbose('Adding loading state to element', $context);                                               // 680
            $context.addClass(className.loading);                                                                      // 681
            requestStartTime = new Date().getTime();                                                                   // 682
          }                                                                                                            // 683
        },                                                                                                             // 674
        remove: {                                                                                                      // 686
          error: function () {                                                                                         // 687
            module.verbose('Removing error state from element', $context);                                             // 688
            $context.removeClass(className.error);                                                                     // 689
          },                                                                                                           // 690
          loading: function () {                                                                                       // 691
            module.verbose('Removing loading state from element', $context);                                           // 692
            $context.removeClass(className.loading);                                                                   // 693
          }                                                                                                            // 694
        },                                                                                                             // 686
        get: {                                                                                                         // 697
          responseFromXHR: function (xhr) {                                                                            // 698
            return $.isPlainObject(xhr) ? module.is.expectingJSON() ? module.decode.json(xhr.responseText) : xhr.responseText : false;
          },                                                                                                           // 705
          errorFromRequest: function (response, status, httpMessage) {                                                 // 706
            return $.isPlainObject(response) && response.error !== undefined ? response.error // use json error message
            : settings.error[status] !== undefined ? // use server error message                                       // 707
            settings.error[status] : httpMessage;                                                                      // 710
          },                                                                                                           // 713
          request: function () {                                                                                       // 714
            return module.request || false;                                                                            // 715
          },                                                                                                           // 716
          xhr: function () {                                                                                           // 717
            return module.xhr || false;                                                                                // 718
          },                                                                                                           // 719
          settings: function () {                                                                                      // 720
            var runSettings;                                                                                           // 721
            runSettings = settings.beforeSend.call(context, settings);                                                 // 724
                                                                                                                       //
            if (runSettings) {                                                                                         // 725
              if (runSettings.success !== undefined) {                                                                 // 726
                module.debug('Legacy success callback detected', runSettings);                                         // 727
                module.error(error.legacyParameters, runSettings.success);                                             // 728
                runSettings.onSuccess = runSettings.success;                                                           // 729
              }                                                                                                        // 730
                                                                                                                       //
              if (runSettings.failure !== undefined) {                                                                 // 731
                module.debug('Legacy failure callback detected', runSettings);                                         // 732
                module.error(error.legacyParameters, runSettings.failure);                                             // 733
                runSettings.onFailure = runSettings.failure;                                                           // 734
              }                                                                                                        // 735
                                                                                                                       //
              if (runSettings.complete !== undefined) {                                                                // 736
                module.debug('Legacy complete callback detected', runSettings);                                        // 737
                module.error(error.legacyParameters, runSettings.complete);                                            // 738
                runSettings.onComplete = runSettings.complete;                                                         // 739
              }                                                                                                        // 740
            }                                                                                                          // 741
                                                                                                                       //
            if (runSettings === undefined) {                                                                           // 742
              module.error(error.noReturnedValue);                                                                     // 743
            }                                                                                                          // 744
                                                                                                                       //
            if (runSettings === false) {                                                                               // 745
              return runSettings;                                                                                      // 746
            }                                                                                                          // 747
                                                                                                                       //
            return runSettings !== undefined ? $.extend(true, {}, runSettings) : $.extend(true, {}, settings);         // 748
          },                                                                                                           // 752
          urlEncodedValue: function (value) {                                                                          // 753
            var decodedValue = window.decodeURIComponent(value),                                                       // 754
                encodedValue = window.encodeURIComponent(value),                                                       // 754
                alreadyEncoded = decodedValue !== value;                                                               // 754
                                                                                                                       //
            if (alreadyEncoded) {                                                                                      // 759
              module.debug('URL value is already encoded, avoiding double encoding', value);                           // 760
              return value;                                                                                            // 761
            }                                                                                                          // 762
                                                                                                                       //
            module.verbose('Encoding value using encodeURIComponent', value, encodedValue);                            // 763
            return encodedValue;                                                                                       // 764
          },                                                                                                           // 765
          defaultData: function () {                                                                                   // 766
            var data = {};                                                                                             // 767
                                                                                                                       //
            if (!$.isWindow(element)) {                                                                                // 770
              if (module.is.input()) {                                                                                 // 771
                data.value = $module.val();                                                                            // 772
              } else if (module.is.form()) {} else {                                                                   // 773
                data.text = $module.text();                                                                            // 778
              }                                                                                                        // 779
            }                                                                                                          // 780
                                                                                                                       //
            return data;                                                                                               // 781
          },                                                                                                           // 782
          event: function () {                                                                                         // 783
            if ($.isWindow(element) || settings.on == 'now') {                                                         // 784
              module.debug('API called without element, no events attached');                                          // 785
              return false;                                                                                            // 786
            } else if (settings.on == 'auto') {                                                                        // 787
              if ($module.is('input')) {                                                                               // 789
                return element.oninput !== undefined ? 'input' : element.onpropertychange !== undefined ? 'propertychange' : 'keyup';
              } else if ($module.is('form')) {                                                                         // 796
                return 'submit';                                                                                       // 798
              } else {                                                                                                 // 799
                return 'click';                                                                                        // 801
              }                                                                                                        // 802
            } else {                                                                                                   // 803
              return settings.on;                                                                                      // 805
            }                                                                                                          // 806
          },                                                                                                           // 807
          templatedURL: function (action) {                                                                            // 808
            action = action || $module.data(metadata.action) || settings.action || false;                              // 809
            url = $module.data(metadata.url) || settings.url || false;                                                 // 810
                                                                                                                       //
            if (url) {                                                                                                 // 811
              module.debug('Using specified url', url);                                                                // 812
              return url;                                                                                              // 813
            }                                                                                                          // 814
                                                                                                                       //
            if (action) {                                                                                              // 815
              module.debug('Looking up url for action', action, settings.api);                                         // 816
                                                                                                                       //
              if (settings.api[action] === undefined && !module.is.mocked()) {                                         // 817
                module.error(error.missingAction, settings.action, settings.api);                                      // 818
                return;                                                                                                // 819
              }                                                                                                        // 820
                                                                                                                       //
              url = settings.api[action];                                                                              // 821
            } else if (module.is.form()) {                                                                             // 822
              url = $module.attr('action') || $context.attr('action') || false;                                        // 824
              module.debug('No url or action specified, defaulting to form action', url);                              // 825
            }                                                                                                          // 826
                                                                                                                       //
            return url;                                                                                                // 827
          }                                                                                                            // 828
        },                                                                                                             // 697
        abort: function () {                                                                                           // 831
          var xhr = module.get.xhr();                                                                                  // 832
                                                                                                                       //
          if (xhr && xhr.state() !== 'resolved') {                                                                     // 835
            module.debug('Cancelling API request');                                                                    // 836
            xhr.abort();                                                                                               // 837
          }                                                                                                            // 838
        },                                                                                                             // 839
        // reset state                                                                                                 // 841
        reset: function () {                                                                                           // 842
          module.remove.error();                                                                                       // 843
          module.remove.loading();                                                                                     // 844
        },                                                                                                             // 845
        setting: function (name, value) {                                                                              // 847
          module.debug('Changing setting', name, value);                                                               // 848
                                                                                                                       //
          if ($.isPlainObject(name)) {                                                                                 // 849
            $.extend(true, settings, name);                                                                            // 850
          } else if (value !== undefined) {                                                                            // 851
            if ($.isPlainObject(settings[name])) {                                                                     // 853
              $.extend(true, settings[name], value);                                                                   // 854
            } else {                                                                                                   // 855
              settings[name] = value;                                                                                  // 857
            }                                                                                                          // 858
          } else {                                                                                                     // 859
            return settings[name];                                                                                     // 861
          }                                                                                                            // 862
        },                                                                                                             // 863
        internal: function (name, value) {                                                                             // 864
          if ($.isPlainObject(name)) {                                                                                 // 865
            $.extend(true, module, name);                                                                              // 866
          } else if (value !== undefined) {                                                                            // 867
            module[name] = value;                                                                                      // 869
          } else {                                                                                                     // 870
            return module[name];                                                                                       // 872
          }                                                                                                            // 873
        },                                                                                                             // 874
        debug: function () {                                                                                           // 875
          if (!settings.silent && settings.debug) {                                                                    // 876
            if (settings.performance) {                                                                                // 877
              module.performance.log(arguments);                                                                       // 878
            } else {                                                                                                   // 879
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 881
              module.debug.apply(console, arguments);                                                                  // 882
            }                                                                                                          // 883
          }                                                                                                            // 884
        },                                                                                                             // 885
        verbose: function () {                                                                                         // 886
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 887
            if (settings.performance) {                                                                                // 888
              module.performance.log(arguments);                                                                       // 889
            } else {                                                                                                   // 890
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 892
              module.verbose.apply(console, arguments);                                                                // 893
            }                                                                                                          // 894
          }                                                                                                            // 895
        },                                                                                                             // 896
        error: function () {                                                                                           // 897
          if (!settings.silent) {                                                                                      // 898
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 899
            module.error.apply(console, arguments);                                                                    // 900
          }                                                                                                            // 901
        },                                                                                                             // 902
        performance: {                                                                                                 // 903
          log: function (message) {                                                                                    // 904
            var currentTime, executionTime, previousTime;                                                              // 905
                                                                                                                       //
            if (settings.performance) {                                                                                // 910
              currentTime = new Date().getTime();                                                                      // 911
              previousTime = time || currentTime;                                                                      // 912
              executionTime = currentTime - previousTime;                                                              // 913
              time = currentTime;                                                                                      // 914
              performance.push({                                                                                       // 915
                'Name': message[0],                                                                                    // 916
                'Arguments': [].slice.call(message, 1) || '',                                                          // 917
                //'Element'        : element,                                                                          // 918
                'Execution Time': executionTime                                                                        // 919
              });                                                                                                      // 915
            }                                                                                                          // 921
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 922
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 923
          },                                                                                                           // 924
          display: function () {                                                                                       // 925
            var title = settings.name + ':',                                                                           // 926
                totalTime = 0;                                                                                         // 926
            time = false;                                                                                              // 930
            clearTimeout(module.performance.timer);                                                                    // 931
            $.each(performance, function (index, data) {                                                               // 932
              totalTime += data['Execution Time'];                                                                     // 933
            });                                                                                                        // 934
            title += ' ' + totalTime + 'ms';                                                                           // 935
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 936
              title += ' \'' + moduleSelector + '\'';                                                                  // 937
            }                                                                                                          // 938
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 939
              console.groupCollapsed(title);                                                                           // 940
                                                                                                                       //
              if (console.table) {                                                                                     // 941
                console.table(performance);                                                                            // 942
              } else {                                                                                                 // 943
                $.each(performance, function (index, data) {                                                           // 945
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 946
                });                                                                                                    // 947
              }                                                                                                        // 948
                                                                                                                       //
              console.groupEnd();                                                                                      // 949
            }                                                                                                          // 950
                                                                                                                       //
            performance = [];                                                                                          // 951
          }                                                                                                            // 952
        },                                                                                                             // 903
        invoke: function (query, passedArguments, context) {                                                           // 954
          var object = instance,                                                                                       // 955
              maxDepth,                                                                                                // 955
              found,                                                                                                   // 955
              response;                                                                                                // 955
          passedArguments = passedArguments || queryArguments;                                                         // 961
          context = element || context;                                                                                // 962
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 963
            query = query.split(/[\. ]/);                                                                              // 964
            maxDepth = query.length - 1;                                                                               // 965
            $.each(query, function (depth, value) {                                                                    // 966
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 971
                object = object[camelCaseValue];                                                                       // 972
              } else if (object[camelCaseValue] !== undefined) {                                                       // 973
                found = object[camelCaseValue];                                                                        // 975
                return false;                                                                                          // 976
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 977
                object = object[value];                                                                                // 979
              } else if (object[value] !== undefined) {                                                                // 980
                found = object[value];                                                                                 // 982
                return false;                                                                                          // 983
              } else {                                                                                                 // 984
                module.error(error.method, query);                                                                     // 986
                return false;                                                                                          // 987
              }                                                                                                        // 988
            });                                                                                                        // 989
          }                                                                                                            // 990
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 991
            response = found.apply(context, passedArguments);                                                          // 992
          } else if (found !== undefined) {                                                                            // 993
            response = found;                                                                                          // 995
          }                                                                                                            // 996
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 997
            returnedValue.push(response);                                                                              // 998
          } else if (returnedValue !== undefined) {                                                                    // 999
            returnedValue = [returnedValue, response];                                                                 // 1001
          } else if (response !== undefined) {                                                                         // 1002
            returnedValue = response;                                                                                  // 1004
          }                                                                                                            // 1005
                                                                                                                       //
          return found;                                                                                                // 1006
        }                                                                                                              // 1007
      };                                                                                                               // 86
                                                                                                                       //
      if (methodInvoked) {                                                                                             // 1010
        if (instance === undefined) {                                                                                  // 1011
          module.initialize();                                                                                         // 1012
        }                                                                                                              // 1013
                                                                                                                       //
        module.invoke(query);                                                                                          // 1014
      } else {                                                                                                         // 1015
        if (instance !== undefined) {                                                                                  // 1017
          instance.invoke('destroy');                                                                                  // 1018
        }                                                                                                              // 1019
                                                                                                                       //
        module.initialize();                                                                                           // 1020
      }                                                                                                                // 1021
    });                                                                                                                // 1022
    return returnedValue !== undefined ? returnedValue : this;                                                         // 1025
  };                                                                                                                   // 1029
                                                                                                                       //
  $.api.settings = {                                                                                                   // 1031
    name: 'API',                                                                                                       // 1033
    namespace: 'api',                                                                                                  // 1034
    debug: false,                                                                                                      // 1036
    verbose: false,                                                                                                    // 1037
    performance: true,                                                                                                 // 1038
    // object containing all templates endpoints                                                                       // 1040
    api: {},                                                                                                           // 1041
    // whether to cache responses                                                                                      // 1043
    cache: true,                                                                                                       // 1044
    // whether new requests should abort previous requests                                                             // 1046
    interruptRequests: true,                                                                                           // 1047
    // event binding                                                                                                   // 1049
    on: 'auto',                                                                                                        // 1050
    // context for applying state classes                                                                              // 1052
    stateContext: false,                                                                                               // 1053
    // duration for loading state                                                                                      // 1055
    loadingDuration: 0,                                                                                                // 1056
    // whether to hide errors after a period of time                                                                   // 1058
    hideError: 'auto',                                                                                                 // 1059
    // duration for error state                                                                                        // 1061
    errorDuration: 2000,                                                                                               // 1062
    // whether parameters should be encoded with encodeURIComponent                                                    // 1064
    encodeParameters: true,                                                                                            // 1065
    // API action to use                                                                                               // 1067
    action: false,                                                                                                     // 1068
    // templated URL to use                                                                                            // 1070
    url: false,                                                                                                        // 1071
    // base URL to apply to all endpoints                                                                              // 1073
    base: '',                                                                                                          // 1074
    // data that will                                                                                                  // 1076
    urlData: {},                                                                                                       // 1077
    // whether to add default data to url data                                                                         // 1079
    defaultData: true,                                                                                                 // 1080
    // whether to serialize closest form                                                                               // 1082
    serializeForm: false,                                                                                              // 1083
    // how long to wait before request should occur                                                                    // 1085
    throttle: 0,                                                                                                       // 1086
    // whether to throttle first request or only repeated                                                              // 1088
    throttleFirstRequest: true,                                                                                        // 1089
    // standard ajax settings                                                                                          // 1091
    method: 'get',                                                                                                     // 1092
    data: {},                                                                                                          // 1093
    dataType: 'json',                                                                                                  // 1094
    // mock response                                                                                                   // 1096
    mockResponse: false,                                                                                               // 1097
    mockResponseAsync: false,                                                                                          // 1098
    // aliases for mock                                                                                                // 1100
    response: false,                                                                                                   // 1101
    responseAsync: false,                                                                                              // 1102
    // callbacks before request                                                                                        // 1104
    beforeSend: function (settings) {                                                                                  // 1105
      return settings;                                                                                                 // 1105
    },                                                                                                                 // 1105
    beforeXHR: function (xhr) {},                                                                                      // 1106
    onRequest: function (promise, xhr) {},                                                                             // 1107
    // after request                                                                                                   // 1109
    onResponse: false,                                                                                                 // 1110
    // function(response) { },                                                                                         // 1110
    // response was successful, if JSON passed validation                                                              // 1112
    onSuccess: function (response, $module) {},                                                                        // 1113
    // request finished without aborting                                                                               // 1115
    onComplete: function (response, $module) {},                                                                       // 1116
    // failed JSON success test                                                                                        // 1118
    onFailure: function (response, $module) {},                                                                        // 1119
    // server error                                                                                                    // 1121
    onError: function (errorMessage, $module) {},                                                                      // 1122
    // request aborted                                                                                                 // 1124
    onAbort: function (errorMessage, $module) {},                                                                      // 1125
    successTest: false,                                                                                                // 1127
    // errors                                                                                                          // 1129
    error: {                                                                                                           // 1130
      beforeSend: 'The before send function has aborted the request',                                                  // 1131
      error: 'There was an error with your request',                                                                   // 1132
      exitConditions: 'API Request Aborted. Exit conditions met',                                                      // 1133
      JSONParse: 'JSON could not be parsed during error handling',                                                     // 1134
      legacyParameters: 'You are using legacy API success callback names',                                             // 1135
      method: 'The method you called is not defined',                                                                  // 1136
      missingAction: 'API action used but no url was defined',                                                         // 1137
      missingSerialize: 'jquery-serialize-object is required to add form data to an existing data object',             // 1138
      missingURL: 'No URL specified for api event',                                                                    // 1139
      noReturnedValue: 'The beforeSend callback must return a settings object, beforeSend ignored.',                   // 1140
      noStorage: 'Caching responses locally requires session storage',                                                 // 1141
      parseError: 'There was an error parsing your request',                                                           // 1142
      requiredParameter: 'Missing a required URL parameter: ',                                                         // 1143
      statusMessage: 'Server gave an error: ',                                                                         // 1144
      timeout: 'Your request timed out'                                                                                // 1145
    },                                                                                                                 // 1130
    regExp: {                                                                                                          // 1148
      required: /\{\$*[A-z0-9]+\}/g,                                                                                   // 1149
      optional: /\{\/\$*[A-z0-9]+\}/g                                                                                  // 1150
    },                                                                                                                 // 1148
    className: {                                                                                                       // 1153
      loading: 'loading',                                                                                              // 1154
      error: 'error'                                                                                                   // 1155
    },                                                                                                                 // 1153
    selector: {                                                                                                        // 1158
      disabled: '.disabled',                                                                                           // 1159
      form: 'form'                                                                                                     // 1160
    },                                                                                                                 // 1158
    metadata: {                                                                                                        // 1163
      action: 'action',                                                                                                // 1164
      url: 'url'                                                                                                       // 1165
    }                                                                                                                  // 1163
  };                                                                                                                   // 1031
})(jQuery, window, document);                                                                                          // 1171
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"colorize.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/behaviors/colorize.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Colorize                                                                                         //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.colorize = function (parameters) {                                                                              // 26
    var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.colorize.settings, parameters) : $.extend({}, $.fn.colorize.settings),
        // hoist arguments                                                                                             // 27
    moduleArguments = arguments || false;                                                                              // 32
    $(this).each(function (instanceIndex) {                                                                            // 34
      var $module = $(this),                                                                                           // 37
          mainCanvas = $('<canvas />')[0],                                                                             // 37
          imageCanvas = $('<canvas />')[0],                                                                            // 37
          overlayCanvas = $('<canvas />')[0],                                                                          // 37
          backgroundImage = new Image(),                                                                               // 37
          // defs                                                                                                      // 37
      mainContext,                                                                                                     // 47
          imageContext,                                                                                                // 37
          overlayContext,                                                                                              // 37
          image,                                                                                                       // 37
          imageName,                                                                                                   // 37
          width,                                                                                                       // 37
          height,                                                                                                      // 37
          // shortcuts                                                                                                 // 37
      colors = settings.colors,                                                                                        // 58
          paths = settings.paths,                                                                                      // 37
          namespace = settings.namespace,                                                                              // 37
          error = settings.error,                                                                                      // 37
          // boilerplate                                                                                               // 37
      instance = $module.data('module-' + namespace),                                                                  // 64
          module;                                                                                                      // 37
      module = {                                                                                                       // 68
        checkPreconditions: function () {                                                                              // 70
          module.debug('Checking pre-conditions');                                                                     // 71
                                                                                                                       //
          if (!$.isPlainObject(colors) || $.isEmptyObject(colors)) {                                                   // 73
            module.error(error.undefinedColors);                                                                       // 74
            return false;                                                                                              // 75
          }                                                                                                            // 76
                                                                                                                       //
          return true;                                                                                                 // 77
        },                                                                                                             // 78
        async: function (callback) {                                                                                   // 80
          if (settings.async) {                                                                                        // 81
            setTimeout(callback, 0);                                                                                   // 82
          } else {                                                                                                     // 83
            callback();                                                                                                // 85
          }                                                                                                            // 86
        },                                                                                                             // 87
        getMetadata: function () {                                                                                     // 89
          module.debug('Grabbing metadata');                                                                           // 90
          image = $module.data('image') || settings.image || undefined;                                                // 91
          imageName = $module.data('name') || settings.name || instanceIndex;                                          // 92
          width = settings.width || $module.width();                                                                   // 93
          height = settings.height || $module.height();                                                                // 94
                                                                                                                       //
          if (width === 0 || height === 0) {                                                                           // 95
            module.error(error.undefinedSize);                                                                         // 96
          }                                                                                                            // 97
        },                                                                                                             // 98
        initialize: function () {                                                                                      // 100
          module.debug('Initializing with colors', colors);                                                            // 101
                                                                                                                       //
          if (module.checkPreconditions()) {                                                                           // 102
            module.async(function () {                                                                                 // 104
              module.getMetadata();                                                                                    // 105
              module.canvas.create();                                                                                  // 106
              module.draw.image(function () {                                                                          // 108
                module.draw.colors();                                                                                  // 109
                module.canvas.merge();                                                                                 // 110
              });                                                                                                      // 111
              $module.data('module-' + namespace, module);                                                             // 112
            });                                                                                                        // 115
          }                                                                                                            // 116
        },                                                                                                             // 117
        redraw: function () {                                                                                          // 119
          module.debug('Redrawing image');                                                                             // 120
          module.async(function () {                                                                                   // 121
            module.canvas.clear();                                                                                     // 122
            module.draw.colors();                                                                                      // 123
            module.canvas.merge();                                                                                     // 124
          });                                                                                                          // 125
        },                                                                                                             // 126
        change: {                                                                                                      // 128
          color: function (colorName, color) {                                                                         // 129
            module.debug('Changing color', colorName);                                                                 // 130
                                                                                                                       //
            if (colors[colorName] === undefined) {                                                                     // 131
              module.error(error.missingColor);                                                                        // 132
              return false;                                                                                            // 133
            }                                                                                                          // 134
                                                                                                                       //
            colors[colorName] = color;                                                                                 // 135
            module.redraw();                                                                                           // 136
          }                                                                                                            // 137
        },                                                                                                             // 128
        canvas: {                                                                                                      // 140
          create: function () {                                                                                        // 141
            module.debug('Creating canvases');                                                                         // 142
            mainCanvas.width = width;                                                                                  // 144
            mainCanvas.height = height;                                                                                // 145
            imageCanvas.width = width;                                                                                 // 146
            imageCanvas.height = height;                                                                               // 147
            overlayCanvas.width = width;                                                                               // 148
            overlayCanvas.height = height;                                                                             // 149
            mainContext = mainCanvas.getContext('2d');                                                                 // 151
            imageContext = imageCanvas.getContext('2d');                                                               // 152
            overlayContext = overlayCanvas.getContext('2d');                                                           // 153
            $module.append(mainCanvas);                                                                                // 155
            mainContext = $module.children('canvas')[0].getContext('2d');                                              // 158
          },                                                                                                           // 159
          clear: function (context) {                                                                                  // 160
            module.debug('Clearing canvas');                                                                           // 161
            overlayContext.fillStyle = '#FFFFFF';                                                                      // 162
            overlayContext.fillRect(0, 0, width, height);                                                              // 163
          },                                                                                                           // 164
          merge: function () {                                                                                         // 165
            if (!$.isFunction(mainContext.blendOnto)) {                                                                // 166
              module.error(error.missingPlugin);                                                                       // 167
              return;                                                                                                  // 168
            }                                                                                                          // 169
                                                                                                                       //
            mainContext.putImageData(imageContext.getImageData(0, 0, width, height), 0, 0);                            // 170
            overlayContext.blendOnto(mainContext, 'multiply');                                                         // 171
          }                                                                                                            // 172
        },                                                                                                             // 140
        draw: {                                                                                                        // 175
          image: function (callback) {                                                                                 // 177
            module.debug('Drawing image');                                                                             // 178
                                                                                                                       //
            callback = callback || function () {};                                                                     // 179
                                                                                                                       //
            if (image) {                                                                                               // 180
              backgroundImage.src = image;                                                                             // 181
                                                                                                                       //
              backgroundImage.onload = function () {                                                                   // 182
                imageContext.drawImage(backgroundImage, 0, 0);                                                         // 183
                callback();                                                                                            // 184
              };                                                                                                       // 185
            } else {                                                                                                   // 186
              module.error(error.noImage);                                                                             // 188
              callback();                                                                                              // 189
            }                                                                                                          // 190
          },                                                                                                           // 191
          colors: function () {                                                                                        // 193
            module.debug('Drawing color overlays', colors);                                                            // 194
            $.each(colors, function (colorName, color) {                                                               // 195
              settings.onDraw(overlayContext, imageName, colorName, color);                                            // 196
            });                                                                                                        // 197
          }                                                                                                            // 198
        },                                                                                                             // 175
        debug: function (message, variableName) {                                                                      // 202
          if (settings.debug) {                                                                                        // 203
            if (variableName !== undefined) {                                                                          // 204
              console.info(settings.name + ': ' + message, variableName);                                              // 205
            } else {                                                                                                   // 206
              console.info(settings.name + ': ' + message);                                                            // 208
            }                                                                                                          // 209
          }                                                                                                            // 210
        },                                                                                                             // 211
        error: function (errorMessage) {                                                                               // 212
          console.warn(settings.name + ': ' + errorMessage);                                                           // 213
        },                                                                                                             // 214
        invoke: function (methodName, context, methodArguments) {                                                      // 215
          var method;                                                                                                  // 216
          methodArguments = methodArguments || Array.prototype.slice.call(arguments, 2);                               // 219
                                                                                                                       //
          if (typeof methodName == 'string' && instance !== undefined) {                                               // 221
            methodName = methodName.split('.');                                                                        // 222
            $.each(methodName, function (index, name) {                                                                // 223
              if ($.isPlainObject(instance[name])) {                                                                   // 224
                instance = instance[name];                                                                             // 225
                return true;                                                                                           // 226
              } else if ($.isFunction(instance[name])) {                                                               // 227
                method = instance[name];                                                                               // 229
                return true;                                                                                           // 230
              }                                                                                                        // 231
                                                                                                                       //
              module.error(settings.error.method);                                                                     // 232
              return false;                                                                                            // 233
            });                                                                                                        // 234
          }                                                                                                            // 235
                                                                                                                       //
          return $.isFunction(method) ? method.apply(context, methodArguments) : false;                                // 236
        }                                                                                                              // 240
      };                                                                                                               // 68
                                                                                                                       //
      if (instance !== undefined && moduleArguments) {                                                                 // 243
        // simpler than invoke realizing to invoke itself (and losing scope due prototype.call()                       // 244
        if (moduleArguments[0] == 'invoke') {                                                                          // 245
          moduleArguments = Array.prototype.slice.call(moduleArguments, 1);                                            // 246
        }                                                                                                              // 247
                                                                                                                       //
        return module.invoke(moduleArguments[0], this, Array.prototype.slice.call(moduleArguments, 1));                // 248
      } // initializing                                                                                                // 249
                                                                                                                       //
                                                                                                                       //
      module.initialize();                                                                                             // 251
    });                                                                                                                // 252
    return this;                                                                                                       // 254
  };                                                                                                                   // 255
                                                                                                                       //
  $.fn.colorize.settings = {                                                                                           // 257
    name: 'Image Colorizer',                                                                                           // 258
    debug: true,                                                                                                       // 259
    namespace: 'colorize',                                                                                             // 260
    onDraw: function (overlayContext, imageName, colorName, color) {},                                                 // 262
    // whether to block execution while updating canvas                                                                // 264
    async: true,                                                                                                       // 265
    // object containing names and default values of color regions                                                     // 266
    colors: {},                                                                                                        // 267
    metadata: {                                                                                                        // 269
      image: 'image',                                                                                                  // 270
      name: 'name'                                                                                                     // 271
    },                                                                                                                 // 269
    error: {                                                                                                           // 274
      noImage: 'No tracing image specified',                                                                           // 275
      undefinedColors: 'No default colors specified.',                                                                 // 276
      missingColor: 'Attempted to change color that does not exist',                                                   // 277
      missingPlugin: 'Blend onto plug-in must be included',                                                            // 278
      undefinedHeight: 'The width or height of image canvas could not be automatically determined. Please specify a height.'
    }                                                                                                                  // 274
  };                                                                                                                   // 257
})(jQuery, window, document);                                                                                          // 284
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"form.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/behaviors/form.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Form Validation                                                                                  //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.form = function (parameters) {                                                                                  // 26
    var $allModules = $(this),                                                                                         // 27
        moduleSelector = $allModules.selector || '',                                                                   // 27
        time = new Date().getTime(),                                                                                   // 27
        performance = [],                                                                                              // 27
        query = arguments[0],                                                                                          // 27
        legacyParameters = arguments[1],                                                                               // 27
        methodInvoked = typeof query == 'string',                                                                      // 27
        queryArguments = [].slice.call(arguments, 1),                                                                  // 27
        returnedValue;                                                                                                 // 27
    $allModules.each(function () {                                                                                     // 40
      var $module = $(this),                                                                                           // 42
          element = this,                                                                                              // 42
          formErrors = [],                                                                                             // 42
          keyHeldDown = false,                                                                                         // 42
          // set at run-time                                                                                           // 42
      $field,                                                                                                          // 50
          $group,                                                                                                      // 42
          $message,                                                                                                    // 42
          $prompt,                                                                                                     // 42
          $submit,                                                                                                     // 42
          $clear,                                                                                                      // 42
          $reset,                                                                                                      // 42
          settings,                                                                                                    // 42
          validation,                                                                                                  // 42
          metadata,                                                                                                    // 42
          selector,                                                                                                    // 42
          className,                                                                                                   // 42
          error,                                                                                                       // 42
          namespace,                                                                                                   // 42
          moduleNamespace,                                                                                             // 42
          eventNamespace,                                                                                              // 42
          instance,                                                                                                    // 42
          module;                                                                                                      // 42
      module = {                                                                                                       // 74
        initialize: function () {                                                                                      // 76
          // settings grabbed at run time                                                                              // 78
          module.get.settings();                                                                                       // 79
                                                                                                                       //
          if (methodInvoked) {                                                                                         // 80
            if (instance === undefined) {                                                                              // 81
              module.instantiate();                                                                                    // 82
            }                                                                                                          // 83
                                                                                                                       //
            module.invoke(query);                                                                                      // 84
          } else {                                                                                                     // 85
            if (instance !== undefined) {                                                                              // 87
              instance.invoke('destroy');                                                                              // 88
            }                                                                                                          // 89
                                                                                                                       //
            module.verbose('Initializing form validation', $module, settings);                                         // 90
            module.bindEvents();                                                                                       // 91
            module.set.defaults();                                                                                     // 92
            module.instantiate();                                                                                      // 93
          }                                                                                                            // 94
        },                                                                                                             // 95
        instantiate: function () {                                                                                     // 97
          module.verbose('Storing instance of module', module);                                                        // 98
          instance = module;                                                                                           // 99
          $module.data(moduleNamespace, module);                                                                       // 100
        },                                                                                                             // 103
        destroy: function () {                                                                                         // 105
          module.verbose('Destroying previous module', instance);                                                      // 106
          module.removeEvents();                                                                                       // 107
          $module.removeData(moduleNamespace);                                                                         // 108
        },                                                                                                             // 111
        refresh: function () {                                                                                         // 113
          module.verbose('Refreshing selector cache');                                                                 // 114
          $field = $module.find(selector.field);                                                                       // 115
          $group = $module.find(selector.group);                                                                       // 116
          $message = $module.find(selector.message);                                                                   // 117
          $prompt = $module.find(selector.prompt);                                                                     // 118
          $submit = $module.find(selector.submit);                                                                     // 120
          $clear = $module.find(selector.clear);                                                                       // 121
          $reset = $module.find(selector.reset);                                                                       // 122
        },                                                                                                             // 123
        submit: function () {                                                                                          // 125
          module.verbose('Submitting form', $module);                                                                  // 126
          $module.submit();                                                                                            // 127
        },                                                                                                             // 130
        attachEvents: function (selector, action) {                                                                    // 132
          action = action || 'submit';                                                                                 // 133
          $(selector).on('click' + eventNamespace, function (event) {                                                  // 134
            module[action]();                                                                                          // 136
            event.preventDefault();                                                                                    // 137
          });                                                                                                          // 138
        },                                                                                                             // 140
        bindEvents: function () {                                                                                      // 142
          module.verbose('Attaching form events');                                                                     // 143
          $module.on('submit' + eventNamespace, module.validate.form).on('blur' + eventNamespace, selector.field, module.event.field.blur).on('click' + eventNamespace, selector.submit, module.submit).on('click' + eventNamespace, selector.reset, module.reset).on('click' + eventNamespace, selector.clear, module.clear);
                                                                                                                       //
          if (settings.keyboardShortcuts) {                                                                            // 151
            $module.on('keydown' + eventNamespace, selector.field, module.event.field.keydown);                        // 152
          }                                                                                                            // 155
                                                                                                                       //
          $field.each(function () {                                                                                    // 156
            var $input = $(this),                                                                                      // 158
                type = $input.prop('type'),                                                                            // 158
                inputEvent = module.get.changeEvent(type, $input);                                                     // 158
            $(this).on(inputEvent + eventNamespace, module.event.field.change);                                        // 163
          });                                                                                                          // 166
        },                                                                                                             // 168
        clear: function () {                                                                                           // 170
          $field.each(function () {                                                                                    // 171
            var $field = $(this),                                                                                      // 173
                $element = $field.parent(),                                                                            // 173
                $fieldGroup = $field.closest($group),                                                                  // 173
                $prompt = $fieldGroup.find(selector.prompt),                                                           // 173
                defaultValue = $field.data(metadata.defaultValue) || '',                                               // 173
                isCheckbox = $element.is(selector.uiCheckbox),                                                         // 173
                isDropdown = $element.is(selector.uiDropdown),                                                         // 173
                isErrored = $fieldGroup.hasClass(className.error);                                                     // 173
                                                                                                                       //
            if (isErrored) {                                                                                           // 183
              module.verbose('Resetting error on field', $fieldGroup);                                                 // 184
              $fieldGroup.removeClass(className.error);                                                                // 185
              $prompt.remove();                                                                                        // 186
            }                                                                                                          // 187
                                                                                                                       //
            if (isDropdown) {                                                                                          // 188
              module.verbose('Resetting dropdown value', $element, defaultValue);                                      // 189
              $element.dropdown('clear');                                                                              // 190
            } else if (isCheckbox) {                                                                                   // 191
              $field.prop('checked', false);                                                                           // 193
            } else {                                                                                                   // 194
              module.verbose('Resetting field value', $field, defaultValue);                                           // 196
              $field.val('');                                                                                          // 197
            }                                                                                                          // 198
          });                                                                                                          // 199
        },                                                                                                             // 201
        reset: function () {                                                                                           // 203
          $field.each(function () {                                                                                    // 204
            var $field = $(this),                                                                                      // 206
                $element = $field.parent(),                                                                            // 206
                $fieldGroup = $field.closest($group),                                                                  // 206
                $prompt = $fieldGroup.find(selector.prompt),                                                           // 206
                defaultValue = $field.data(metadata.defaultValue),                                                     // 206
                isCheckbox = $element.is(selector.uiCheckbox),                                                         // 206
                isDropdown = $element.is(selector.uiDropdown),                                                         // 206
                isErrored = $fieldGroup.hasClass(className.error);                                                     // 206
                                                                                                                       //
            if (defaultValue === undefined) {                                                                          // 216
              return;                                                                                                  // 217
            }                                                                                                          // 218
                                                                                                                       //
            if (isErrored) {                                                                                           // 219
              module.verbose('Resetting error on field', $fieldGroup);                                                 // 220
              $fieldGroup.removeClass(className.error);                                                                // 221
              $prompt.remove();                                                                                        // 222
            }                                                                                                          // 223
                                                                                                                       //
            if (isDropdown) {                                                                                          // 224
              module.verbose('Resetting dropdown value', $element, defaultValue);                                      // 225
              $element.dropdown('restore defaults');                                                                   // 226
            } else if (isCheckbox) {                                                                                   // 227
              module.verbose('Resetting checkbox value', $element, defaultValue);                                      // 229
              $field.prop('checked', defaultValue);                                                                    // 230
            } else {                                                                                                   // 231
              module.verbose('Resetting field value', $field, defaultValue);                                           // 233
              $field.val(defaultValue);                                                                                // 234
            }                                                                                                          // 235
          });                                                                                                          // 236
        },                                                                                                             // 238
        is: {                                                                                                          // 240
          bracketedRule: function (rule) {                                                                             // 241
            return rule.type && rule.type.match(settings.regExp.bracket);                                              // 242
          },                                                                                                           // 243
          empty: function ($field) {                                                                                   // 244
            if (!$field || $field.length === 0) {                                                                      // 245
              return true;                                                                                             // 246
            } else if ($field.is('input[type="checkbox"]')) {                                                          // 247
              return !$field.is(':checked');                                                                           // 249
            } else {                                                                                                   // 250
              return module.is.blank($field);                                                                          // 252
            }                                                                                                          // 253
          },                                                                                                           // 254
          blank: function ($field) {                                                                                   // 255
            return $.trim($field.val()) === '';                                                                        // 256
          },                                                                                                           // 257
          valid: function () {                                                                                         // 258
            var allValid = true;                                                                                       // 259
            module.verbose('Checking if form is valid');                                                               // 262
            $.each(validation, function (fieldName, field) {                                                           // 263
              if (!module.validate.field(field, fieldName)) {                                                          // 264
                allValid = false;                                                                                      // 265
              }                                                                                                        // 266
            });                                                                                                        // 267
            return allValid;                                                                                           // 268
          }                                                                                                            // 269
        },                                                                                                             // 240
        removeEvents: function () {                                                                                    // 272
          $module.off(eventNamespace);                                                                                 // 273
          $field.off(eventNamespace);                                                                                  // 276
          $submit.off(eventNamespace);                                                                                 // 279
          $field.off(eventNamespace);                                                                                  // 282
        },                                                                                                             // 285
        event: {                                                                                                       // 287
          field: {                                                                                                     // 288
            keydown: function (event) {                                                                                // 289
              var $field = $(this),                                                                                    // 290
                  key = event.which,                                                                                   // 290
                  isInput = $field.is(selector.input),                                                                 // 290
                  isCheckbox = $field.is(selector.checkbox),                                                           // 290
                  isInDropdown = $field.closest(selector.uiDropdown).length > 0,                                       // 290
                  keyCode = {                                                                                          // 290
                enter: 13,                                                                                             // 297
                escape: 27                                                                                             // 298
              };                                                                                                       // 296
                                                                                                                       //
              if (key == keyCode.escape) {                                                                             // 301
                module.verbose('Escape key pressed blurring field');                                                   // 302
                $field.blur();                                                                                         // 303
              }                                                                                                        // 306
                                                                                                                       //
              if (!event.ctrlKey && key == keyCode.enter && isInput && !isInDropdown && !isCheckbox) {                 // 307
                if (!keyHeldDown) {                                                                                    // 308
                  $field.one('keyup' + eventNamespace, module.event.field.keyup);                                      // 309
                  module.submit();                                                                                     // 312
                  module.debug('Enter pressed on input submitting form');                                              // 313
                }                                                                                                      // 314
                                                                                                                       //
                keyHeldDown = true;                                                                                    // 315
              }                                                                                                        // 316
            },                                                                                                         // 317
            keyup: function () {                                                                                       // 318
              keyHeldDown = false;                                                                                     // 319
            },                                                                                                         // 320
            blur: function (event) {                                                                                   // 321
              var $field = $(this),                                                                                    // 322
                  $fieldGroup = $field.closest($group),                                                                // 322
                  validationRules = module.get.validation($field);                                                     // 322
                                                                                                                       //
              if ($fieldGroup.hasClass(className.error)) {                                                             // 327
                module.debug('Revalidating field', $field, validationRules);                                           // 328
                                                                                                                       //
                if (validationRules) {                                                                                 // 329
                  module.validate.field(validationRules);                                                              // 330
                }                                                                                                      // 331
              } else if (settings.on == 'blur' || settings.on == 'change') {                                           // 332
                if (validationRules) {                                                                                 // 334
                  module.validate.field(validationRules);                                                              // 335
                }                                                                                                      // 336
              }                                                                                                        // 337
            },                                                                                                         // 338
            change: function (event) {                                                                                 // 339
              var $field = $(this),                                                                                    // 340
                  $fieldGroup = $field.closest($group),                                                                // 340
                  validationRules = module.get.validation($field);                                                     // 340
                                                                                                                       //
              if (settings.on == 'change' || $fieldGroup.hasClass(className.error) && settings.revalidate) {           // 345
                clearTimeout(module.timer);                                                                            // 346
                module.timer = setTimeout(function () {                                                                // 347
                  module.debug('Revalidating field', $field, module.get.validation($field));                           // 348
                  module.validate.field(validationRules);                                                              // 349
                }, settings.delay);                                                                                    // 350
              }                                                                                                        // 351
            }                                                                                                          // 352
          }                                                                                                            // 288
        },                                                                                                             // 287
        get: {                                                                                                         // 357
          ancillaryValue: function (rule) {                                                                            // 358
            if (!rule.type || !module.is.bracketedRule(rule)) {                                                        // 359
              return false;                                                                                            // 360
            }                                                                                                          // 361
                                                                                                                       //
            return rule.type.match(settings.regExp.bracket)[1] + '';                                                   // 362
          },                                                                                                           // 363
          ruleName: function (rule) {                                                                                  // 364
            if (module.is.bracketedRule(rule)) {                                                                       // 365
              return rule.type.replace(rule.type.match(settings.regExp.bracket)[0], '');                               // 366
            }                                                                                                          // 367
                                                                                                                       //
            return rule.type;                                                                                          // 368
          },                                                                                                           // 369
          changeEvent: function (type, $input) {                                                                       // 370
            if (type == 'checkbox' || type == 'radio' || type == 'hidden' || $input.is('select')) {                    // 371
              return 'change';                                                                                         // 372
            } else {                                                                                                   // 373
              return module.get.inputEvent();                                                                          // 375
            }                                                                                                          // 376
          },                                                                                                           // 377
          inputEvent: function () {                                                                                    // 378
            return document.createElement('input').oninput !== undefined ? 'input' : document.createElement('input').onpropertychange !== undefined ? 'propertychange' : 'keyup';
          },                                                                                                           // 385
          prompt: function (rule, field) {                                                                             // 386
            var ruleName = module.get.ruleName(rule),                                                                  // 387
                ancillary = module.get.ancillaryValue(rule),                                                           // 387
                prompt = rule.prompt || settings.prompt[ruleName] || settings.text.unspecifiedRule,                    // 387
                requiresValue = prompt.search('{value}') !== -1,                                                       // 387
                requiresName = prompt.search('{name}') !== -1,                                                         // 387
                $label,                                                                                                // 387
                $field,                                                                                                // 387
                name;                                                                                                  // 387
                                                                                                                       //
            if (requiresName || requiresValue) {                                                                       // 397
              $field = module.get.field(field.identifier);                                                             // 398
            }                                                                                                          // 399
                                                                                                                       //
            if (requiresValue) {                                                                                       // 400
              prompt = prompt.replace('{value}', $field.val());                                                        // 401
            }                                                                                                          // 402
                                                                                                                       //
            if (requiresName) {                                                                                        // 403
              $label = $field.closest(selector.group).find('label').eq(0);                                             // 404
              name = $label.length == 1 ? $label.text() : $field.prop('placeholder') || settings.text.unspecifiedField;
              prompt = prompt.replace('{name}', name);                                                                 // 409
            }                                                                                                          // 410
                                                                                                                       //
            prompt = prompt.replace('{identifier}', field.identifier);                                                 // 411
            prompt = prompt.replace('{ruleValue}', ancillary);                                                         // 412
                                                                                                                       //
            if (!rule.prompt) {                                                                                        // 413
              module.verbose('Using default validation prompt for type', prompt, ruleName);                            // 414
            }                                                                                                          // 415
                                                                                                                       //
            return prompt;                                                                                             // 416
          },                                                                                                           // 417
          settings: function () {                                                                                      // 418
            if ($.isPlainObject(parameters)) {                                                                         // 419
              var keys = Object.keys(parameters),                                                                      // 420
                  isLegacySettings = keys.length > 0 ? parameters[keys[0]].identifier !== undefined && parameters[keys[0]].rules !== undefined : false,
                  ruleKeys;                                                                                            // 420
                                                                                                                       //
              if (isLegacySettings) {                                                                                  // 427
                // 1.x (ducktyped)                                                                                     // 428
                settings = $.extend(true, {}, $.fn.form.settings, legacyParameters);                                   // 429
                validation = $.extend({}, $.fn.form.settings.defaults, parameters);                                    // 430
                module.error(settings.error.oldSyntax, element);                                                       // 431
                module.verbose('Extending settings from legacy parameters', validation, settings);                     // 432
              } else {                                                                                                 // 433
                // 2.x                                                                                                 // 435
                if (parameters.fields) {                                                                               // 436
                  ruleKeys = Object.keys(parameters.fields);                                                           // 437
                                                                                                                       //
                  if (typeof parameters.fields[ruleKeys[0]] == 'string' || $.isArray(parameters.fields[ruleKeys[0]])) {
                    $.each(parameters.fields, function (name, rules) {                                                 // 439
                      if (typeof rules == 'string') {                                                                  // 440
                        rules = [rules];                                                                               // 441
                      }                                                                                                // 442
                                                                                                                       //
                      parameters.fields[name] = {                                                                      // 443
                        rules: []                                                                                      // 444
                      };                                                                                               // 443
                      $.each(rules, function (index, rule) {                                                           // 446
                        parameters.fields[name].rules.push({                                                           // 447
                          type: rule                                                                                   // 447
                        });                                                                                            // 447
                      });                                                                                              // 448
                    });                                                                                                // 449
                  }                                                                                                    // 450
                }                                                                                                      // 451
                                                                                                                       //
                settings = $.extend(true, {}, $.fn.form.settings, parameters);                                         // 453
                validation = $.extend({}, $.fn.form.settings.defaults, settings.fields);                               // 454
                module.verbose('Extending settings', validation, settings);                                            // 455
              }                                                                                                        // 456
            } else {                                                                                                   // 457
              settings = $.fn.form.settings;                                                                           // 459
              validation = $.fn.form.settings.defaults;                                                                // 460
              module.verbose('Using default form validation', validation, settings);                                   // 461
            } // shorthand                                                                                             // 462
                                                                                                                       //
                                                                                                                       //
            namespace = settings.namespace;                                                                            // 465
            metadata = settings.metadata;                                                                              // 466
            selector = settings.selector;                                                                              // 467
            className = settings.className;                                                                            // 468
            error = settings.error;                                                                                    // 469
            moduleNamespace = 'module-' + namespace;                                                                   // 470
            eventNamespace = '.' + namespace; // grab instance                                                         // 471
                                                                                                                       //
            instance = $module.data(moduleNamespace); // refresh selector cache                                        // 474
                                                                                                                       //
            module.refresh();                                                                                          // 477
          },                                                                                                           // 478
          field: function (identifier) {                                                                               // 479
            module.verbose('Finding field with identifier', identifier);                                               // 480
                                                                                                                       //
            if ($field.filter('#' + identifier).length > 0) {                                                          // 481
              return $field.filter('#' + identifier);                                                                  // 482
            } else if ($field.filter('[name="' + identifier + '"]').length > 0) {                                      // 483
              return $field.filter('[name="' + identifier + '"]');                                                     // 485
            } else if ($field.filter('[name="' + identifier + '[]"]').length > 0) {                                    // 486
              return $field.filter('[name="' + identifier + '[]"]');                                                   // 488
            } else if ($field.filter('[data-' + metadata.validate + '="' + identifier + '"]').length > 0) {            // 489
              return $field.filter('[data-' + metadata.validate + '="' + identifier + '"]');                           // 491
            }                                                                                                          // 492
                                                                                                                       //
            return $('<input/>');                                                                                      // 493
          },                                                                                                           // 494
          fields: function (fields) {                                                                                  // 495
            var $fields = $();                                                                                         // 496
            $.each(fields, function (index, name) {                                                                    // 499
              $fields = $fields.add(module.get.field(name));                                                           // 500
            });                                                                                                        // 501
            return $fields;                                                                                            // 502
          },                                                                                                           // 503
          validation: function ($field) {                                                                              // 504
            var fieldValidation, identifier;                                                                           // 505
                                                                                                                       //
            if (!validation) {                                                                                         // 509
              return false;                                                                                            // 510
            }                                                                                                          // 511
                                                                                                                       //
            $.each(validation, function (fieldName, field) {                                                           // 512
              identifier = field.identifier || fieldName;                                                              // 513
                                                                                                                       //
              if (module.get.field(identifier)[0] == $field[0]) {                                                      // 514
                field.identifier = identifier;                                                                         // 515
                fieldValidation = field;                                                                               // 516
              }                                                                                                        // 517
            });                                                                                                        // 518
            return fieldValidation || false;                                                                           // 519
          },                                                                                                           // 520
          value: function (field) {                                                                                    // 521
            var fields = [],                                                                                           // 522
                results;                                                                                               // 522
            fields.push(field);                                                                                        // 526
            results = module.get.values.call(element, fields);                                                         // 527
            return results[field];                                                                                     // 528
          },                                                                                                           // 529
          values: function (fields) {                                                                                  // 530
            var $fields = $.isArray(fields) ? module.get.fields(fields) : $field,                                      // 531
                values = {};                                                                                           // 531
            $fields.each(function (index, field) {                                                                     // 537
              var $field = $(field),                                                                                   // 538
                  type = $field.prop('type'),                                                                          // 538
                  name = $field.prop('name'),                                                                          // 538
                  value = $field.val(),                                                                                // 538
                  isCheckbox = $field.is(selector.checkbox),                                                           // 538
                  isRadio = $field.is(selector.radio),                                                                 // 538
                  isMultiple = name.indexOf('[]') !== -1,                                                              // 538
                  isChecked = isCheckbox ? $field.is(':checked') : false;                                              // 538
                                                                                                                       //
              if (name) {                                                                                              // 550
                if (isMultiple) {                                                                                      // 551
                  name = name.replace('[]', '');                                                                       // 552
                                                                                                                       //
                  if (!values[name]) {                                                                                 // 553
                    values[name] = [];                                                                                 // 554
                  }                                                                                                    // 555
                                                                                                                       //
                  if (isCheckbox) {                                                                                    // 556
                    if (isChecked) {                                                                                   // 557
                      values[name].push(value || true);                                                                // 558
                    } else {                                                                                           // 559
                      values[name].push(false);                                                                        // 561
                    }                                                                                                  // 562
                  } else {                                                                                             // 563
                    values[name].push(value);                                                                          // 565
                  }                                                                                                    // 566
                } else {                                                                                               // 567
                  if (isRadio) {                                                                                       // 569
                    if (isChecked) {                                                                                   // 570
                      values[name] = value;                                                                            // 571
                    }                                                                                                  // 572
                  } else if (isCheckbox) {                                                                             // 573
                    if (isChecked) {                                                                                   // 575
                      values[name] = value || true;                                                                    // 576
                    } else {                                                                                           // 577
                      values[name] = false;                                                                            // 579
                    }                                                                                                  // 580
                  } else {                                                                                             // 581
                    values[name] = value;                                                                              // 583
                  }                                                                                                    // 584
                }                                                                                                      // 585
              }                                                                                                        // 586
            });                                                                                                        // 587
            return values;                                                                                             // 588
          }                                                                                                            // 589
        },                                                                                                             // 357
        has: {                                                                                                         // 592
          field: function (identifier) {                                                                               // 594
            module.verbose('Checking for existence of a field with identifier', identifier);                           // 595
                                                                                                                       //
            if (typeof identifier !== 'string') {                                                                      // 596
              module.error(error.identifier, identifier);                                                              // 597
            }                                                                                                          // 598
                                                                                                                       //
            if ($field.filter('#' + identifier).length > 0) {                                                          // 599
              return true;                                                                                             // 600
            } else if ($field.filter('[name="' + identifier + '"]').length > 0) {                                      // 601
              return true;                                                                                             // 603
            } else if ($field.filter('[data-' + metadata.validate + '="' + identifier + '"]').length > 0) {            // 604
              return true;                                                                                             // 606
            }                                                                                                          // 607
                                                                                                                       //
            return false;                                                                                              // 608
          }                                                                                                            // 609
        },                                                                                                             // 592
        add: {                                                                                                         // 613
          prompt: function (identifier, errors) {                                                                      // 614
            var $field = module.get.field(identifier),                                                                 // 615
                $fieldGroup = $field.closest($group),                                                                  // 615
                $prompt = $fieldGroup.children(selector.prompt),                                                       // 615
                promptExists = $prompt.length !== 0;                                                                   // 615
            errors = typeof errors == 'string' ? [errors] : errors;                                                    // 621
            module.verbose('Adding field error state', identifier);                                                    // 625
            $fieldGroup.addClass(className.error);                                                                     // 626
                                                                                                                       //
            if (settings.inline) {                                                                                     // 629
              if (!promptExists) {                                                                                     // 630
                $prompt = settings.templates.prompt(errors);                                                           // 631
                $prompt.appendTo($fieldGroup);                                                                         // 632
              }                                                                                                        // 635
                                                                                                                       //
              $prompt.html(errors[0]);                                                                                 // 636
                                                                                                                       //
              if (!promptExists) {                                                                                     // 639
                if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {      // 640
                  module.verbose('Displaying error with css transition', settings.transition);                         // 641
                  $prompt.transition(settings.transition + ' in', settings.duration);                                  // 642
                } else {                                                                                               // 643
                  module.verbose('Displaying error with fallback javascript animation');                               // 645
                  $prompt.fadeIn(settings.duration);                                                                   // 646
                }                                                                                                      // 649
              } else {                                                                                                 // 650
                module.verbose('Inline errors are disabled, no inline error added', identifier);                       // 652
              }                                                                                                        // 653
            }                                                                                                          // 654
          },                                                                                                           // 655
          errors: function (errors) {                                                                                  // 656
            module.debug('Adding form error messages', errors);                                                        // 657
            module.set.error();                                                                                        // 658
            $message.html(settings.templates.error(errors));                                                           // 659
          }                                                                                                            // 662
        },                                                                                                             // 613
        remove: {                                                                                                      // 665
          prompt: function (identifier) {                                                                              // 666
            var $field = module.get.field(identifier),                                                                 // 667
                $fieldGroup = $field.closest($group),                                                                  // 667
                $prompt = $fieldGroup.children(selector.prompt);                                                       // 667
            $fieldGroup.removeClass(className.error);                                                                  // 672
                                                                                                                       //
            if (settings.inline && $prompt.is(':visible')) {                                                           // 675
              module.verbose('Removing prompt for field', identifier);                                                 // 676
                                                                                                                       //
              if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {        // 677
                $prompt.transition(settings.transition + ' out', settings.duration, function () {                      // 678
                  $prompt.remove();                                                                                    // 679
                });                                                                                                    // 680
              } else {                                                                                                 // 681
                $prompt.fadeOut(settings.duration, function () {                                                       // 683
                  $prompt.remove();                                                                                    // 685
                });                                                                                                    // 686
              }                                                                                                        // 688
            }                                                                                                          // 689
          }                                                                                                            // 690
        },                                                                                                             // 665
        set: {                                                                                                         // 693
          success: function () {                                                                                       // 694
            $module.removeClass(className.error).addClass(className.success);                                          // 695
          },                                                                                                           // 699
          defaults: function () {                                                                                      // 700
            $field.each(function () {                                                                                  // 701
              var $field = $(this),                                                                                    // 703
                  isCheckbox = $field.filter(selector.checkbox).length > 0,                                            // 703
                  value = isCheckbox ? $field.is(':checked') : $field.val();                                           // 703
              $field.data(metadata.defaultValue, value);                                                               // 710
            });                                                                                                        // 711
          },                                                                                                           // 713
          error: function () {                                                                                         // 714
            $module.removeClass(className.success).addClass(className.error);                                          // 715
          },                                                                                                           // 719
          value: function (field, value) {                                                                             // 720
            var fields = {};                                                                                           // 721
            fields[field] = value;                                                                                     // 724
            return module.set.values.call(element, fields);                                                            // 725
          },                                                                                                           // 726
          values: function (fields) {                                                                                  // 727
            if ($.isEmptyObject(fields)) {                                                                             // 728
              return;                                                                                                  // 729
            }                                                                                                          // 730
                                                                                                                       //
            $.each(fields, function (key, value) {                                                                     // 731
              var $field = module.get.field(key),                                                                      // 732
                  $element = $field.parent(),                                                                          // 732
                  isMultiple = $.isArray(value),                                                                       // 732
                  isCheckbox = $element.is(selector.uiCheckbox),                                                       // 732
                  isDropdown = $element.is(selector.uiDropdown),                                                       // 732
                  isRadio = $field.is(selector.radio) && isCheckbox,                                                   // 732
                  fieldExists = $field.length > 0,                                                                     // 732
                  $multipleField;                                                                                      // 732
                                                                                                                       //
              if (fieldExists) {                                                                                       // 742
                if (isMultiple && isCheckbox) {                                                                        // 743
                  module.verbose('Selecting multiple', value, $field);                                                 // 744
                  $element.checkbox('uncheck');                                                                        // 745
                  $.each(value, function (index, value) {                                                              // 746
                    $multipleField = $field.filter('[value="' + value + '"]');                                         // 747
                    $element = $multipleField.parent();                                                                // 748
                                                                                                                       //
                    if ($multipleField.length > 0) {                                                                   // 749
                      $element.checkbox('check');                                                                      // 750
                    }                                                                                                  // 751
                  });                                                                                                  // 752
                } else if (isRadio) {                                                                                  // 753
                  module.verbose('Selecting radio value', value, $field);                                              // 755
                  $field.filter('[value="' + value + '"]').parent(selector.uiCheckbox).checkbox('check');              // 756
                } else if (isCheckbox) {                                                                               // 760
                  module.verbose('Setting checkbox value', value, $element);                                           // 762
                                                                                                                       //
                  if (value === true) {                                                                                // 763
                    $element.checkbox('check');                                                                        // 764
                  } else {                                                                                             // 765
                    $element.checkbox('uncheck');                                                                      // 767
                  }                                                                                                    // 768
                } else if (isDropdown) {                                                                               // 769
                  module.verbose('Setting dropdown value', value, $element);                                           // 771
                  $element.dropdown('set selected', value);                                                            // 772
                } else {                                                                                               // 773
                  module.verbose('Setting field value', value, $field);                                                // 775
                  $field.val(value);                                                                                   // 776
                }                                                                                                      // 777
              }                                                                                                        // 778
            });                                                                                                        // 779
          }                                                                                                            // 780
        },                                                                                                             // 693
        validate: {                                                                                                    // 783
          form: function (event, ignoreCallbacks) {                                                                    // 785
            var values = module.get.values(),                                                                          // 786
                apiRequest; // input keydown event will fire submit repeatedly by browser default                      // 786
                                                                                                                       //
            if (keyHeldDown) {                                                                                         // 792
              return false;                                                                                            // 793
            } // reset errors                                                                                          // 794
                                                                                                                       //
                                                                                                                       //
            formErrors = [];                                                                                           // 797
                                                                                                                       //
            if (module.is.valid()) {                                                                                   // 798
              module.debug('Form has no validation errors, submitting');                                               // 799
              module.set.success();                                                                                    // 800
                                                                                                                       //
              if (ignoreCallbacks !== true) {                                                                          // 801
                return settings.onSuccess.call(element, event, values);                                                // 802
              }                                                                                                        // 803
            } else {                                                                                                   // 804
              module.debug('Form has errors');                                                                         // 806
              module.set.error();                                                                                      // 807
                                                                                                                       //
              if (!settings.inline) {                                                                                  // 808
                module.add.errors(formErrors);                                                                         // 809
              } // prevent ajax submit                                                                                 // 810
                                                                                                                       //
                                                                                                                       //
              if ($module.data('moduleApi') !== undefined) {                                                           // 812
                event.stopImmediatePropagation();                                                                      // 813
              }                                                                                                        // 814
                                                                                                                       //
              if (ignoreCallbacks !== true) {                                                                          // 815
                return settings.onFailure.call(element, formErrors, values);                                           // 816
              }                                                                                                        // 817
            }                                                                                                          // 818
          },                                                                                                           // 819
          // takes a validation object and returns whether field passes validation                                     // 821
          field: function (field, fieldName) {                                                                         // 822
            var identifier = field.identifier || fieldName,                                                            // 823
                $field = module.get.field(identifier),                                                                 // 823
                $dependsField = field.depends ? module.get.field(field.depends) : false,                               // 823
                fieldValid = true,                                                                                     // 823
                fieldErrors = [];                                                                                      // 823
                                                                                                                       //
            if (!field.identifier) {                                                                                   // 832
              module.debug('Using field name as identifier', identifier);                                              // 833
              field.identifier = identifier;                                                                           // 834
            }                                                                                                          // 835
                                                                                                                       //
            if ($field.prop('disabled')) {                                                                             // 836
              module.debug('Field is disabled. Skipping', identifier);                                                 // 837
              fieldValid = true;                                                                                       // 838
            } else if (field.optional && module.is.blank($field)) {                                                    // 839
              module.debug('Field is optional and blank. Skipping', identifier);                                       // 841
              fieldValid = true;                                                                                       // 842
            } else if (field.depends && module.is.empty($dependsField)) {                                              // 843
              module.debug('Field depends on another value that is not present or empty. Skipping', $dependsField);    // 845
              fieldValid = true;                                                                                       // 846
            } else if (field.rules !== undefined) {                                                                    // 847
              $.each(field.rules, function (index, rule) {                                                             // 849
                if (module.has.field(identifier) && !module.validate.rule(field, rule)) {                              // 850
                  module.debug('Field is invalid', identifier, rule.type);                                             // 851
                  fieldErrors.push(module.get.prompt(rule, field));                                                    // 852
                  fieldValid = false;                                                                                  // 853
                }                                                                                                      // 854
              });                                                                                                      // 855
            }                                                                                                          // 856
                                                                                                                       //
            if (fieldValid) {                                                                                          // 857
              module.remove.prompt(identifier, fieldErrors);                                                           // 858
              settings.onValid.call($field);                                                                           // 859
            } else {                                                                                                   // 860
              formErrors = formErrors.concat(fieldErrors);                                                             // 862
              module.add.prompt(identifier, fieldErrors);                                                              // 863
              settings.onInvalid.call($field, fieldErrors);                                                            // 864
              return false;                                                                                            // 865
            }                                                                                                          // 866
                                                                                                                       //
            return true;                                                                                               // 867
          },                                                                                                           // 868
          // takes validation rule and returns whether field passes rule                                               // 870
          rule: function (field, rule) {                                                                               // 871
            var $field = module.get.field(field.identifier),                                                           // 872
                type = rule.type,                                                                                      // 872
                value = $field.val(),                                                                                  // 872
                isValid = true,                                                                                        // 872
                ancillary = module.get.ancillaryValue(rule),                                                           // 872
                ruleName = module.get.ruleName(rule),                                                                  // 872
                ruleFunction = settings.rules[ruleName];                                                               // 872
                                                                                                                       //
            if (!$.isFunction(ruleFunction)) {                                                                         // 881
              module.error(error.noRule, ruleName);                                                                    // 882
              return;                                                                                                  // 883
            } // cast to string avoiding encoding special values                                                       // 884
                                                                                                                       //
                                                                                                                       //
            value = value === undefined || value === '' || value === null ? '' : $.trim(value + '');                   // 886
            return ruleFunction.call($field, value, ancillary);                                                        // 890
          }                                                                                                            // 891
        },                                                                                                             // 783
        setting: function (name, value) {                                                                              // 894
          if ($.isPlainObject(name)) {                                                                                 // 895
            $.extend(true, settings, name);                                                                            // 896
          } else if (value !== undefined) {                                                                            // 897
            settings[name] = value;                                                                                    // 899
          } else {                                                                                                     // 900
            return settings[name];                                                                                     // 902
          }                                                                                                            // 903
        },                                                                                                             // 904
        internal: function (name, value) {                                                                             // 905
          if ($.isPlainObject(name)) {                                                                                 // 906
            $.extend(true, module, name);                                                                              // 907
          } else if (value !== undefined) {                                                                            // 908
            module[name] = value;                                                                                      // 910
          } else {                                                                                                     // 911
            return module[name];                                                                                       // 913
          }                                                                                                            // 914
        },                                                                                                             // 915
        debug: function () {                                                                                           // 916
          if (!settings.silent && settings.debug) {                                                                    // 917
            if (settings.performance) {                                                                                // 918
              module.performance.log(arguments);                                                                       // 919
            } else {                                                                                                   // 920
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 922
              module.debug.apply(console, arguments);                                                                  // 923
            }                                                                                                          // 924
          }                                                                                                            // 925
        },                                                                                                             // 926
        verbose: function () {                                                                                         // 927
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 928
            if (settings.performance) {                                                                                // 929
              module.performance.log(arguments);                                                                       // 930
            } else {                                                                                                   // 931
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 933
              module.verbose.apply(console, arguments);                                                                // 934
            }                                                                                                          // 935
          }                                                                                                            // 936
        },                                                                                                             // 937
        error: function () {                                                                                           // 938
          if (!settings.silent) {                                                                                      // 939
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 940
            module.error.apply(console, arguments);                                                                    // 941
          }                                                                                                            // 942
        },                                                                                                             // 943
        performance: {                                                                                                 // 944
          log: function (message) {                                                                                    // 945
            var currentTime, executionTime, previousTime;                                                              // 946
                                                                                                                       //
            if (settings.performance) {                                                                                // 951
              currentTime = new Date().getTime();                                                                      // 952
              previousTime = time || currentTime;                                                                      // 953
              executionTime = currentTime - previousTime;                                                              // 954
              time = currentTime;                                                                                      // 955
              performance.push({                                                                                       // 956
                'Name': message[0],                                                                                    // 957
                'Arguments': [].slice.call(message, 1) || '',                                                          // 958
                'Element': element,                                                                                    // 959
                'Execution Time': executionTime                                                                        // 960
              });                                                                                                      // 956
            }                                                                                                          // 962
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 963
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 964
          },                                                                                                           // 965
          display: function () {                                                                                       // 966
            var title = settings.name + ':',                                                                           // 967
                totalTime = 0;                                                                                         // 967
            time = false;                                                                                              // 971
            clearTimeout(module.performance.timer);                                                                    // 972
            $.each(performance, function (index, data) {                                                               // 973
              totalTime += data['Execution Time'];                                                                     // 974
            });                                                                                                        // 975
            title += ' ' + totalTime + 'ms';                                                                           // 976
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 977
              title += ' \'' + moduleSelector + '\'';                                                                  // 978
            }                                                                                                          // 979
                                                                                                                       //
            if ($allModules.length > 1) {                                                                              // 980
              title += ' ' + '(' + $allModules.length + ')';                                                           // 981
            }                                                                                                          // 982
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 983
              console.groupCollapsed(title);                                                                           // 984
                                                                                                                       //
              if (console.table) {                                                                                     // 985
                console.table(performance);                                                                            // 986
              } else {                                                                                                 // 987
                $.each(performance, function (index, data) {                                                           // 989
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 990
                });                                                                                                    // 991
              }                                                                                                        // 992
                                                                                                                       //
              console.groupEnd();                                                                                      // 993
            }                                                                                                          // 994
                                                                                                                       //
            performance = [];                                                                                          // 995
          }                                                                                                            // 996
        },                                                                                                             // 944
        invoke: function (query, passedArguments, context) {                                                           // 998
          var object = instance,                                                                                       // 999
              maxDepth,                                                                                                // 999
              found,                                                                                                   // 999
              response;                                                                                                // 999
          passedArguments = passedArguments || queryArguments;                                                         // 1005
          context = element || context;                                                                                // 1006
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 1007
            query = query.split(/[\. ]/);                                                                              // 1008
            maxDepth = query.length - 1;                                                                               // 1009
            $.each(query, function (depth, value) {                                                                    // 1010
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 1015
                object = object[camelCaseValue];                                                                       // 1016
              } else if (object[camelCaseValue] !== undefined) {                                                       // 1017
                found = object[camelCaseValue];                                                                        // 1019
                return false;                                                                                          // 1020
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 1021
                object = object[value];                                                                                // 1023
              } else if (object[value] !== undefined) {                                                                // 1024
                found = object[value];                                                                                 // 1026
                return false;                                                                                          // 1027
              } else {                                                                                                 // 1028
                return false;                                                                                          // 1030
              }                                                                                                        // 1031
            });                                                                                                        // 1032
          }                                                                                                            // 1033
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 1034
            response = found.apply(context, passedArguments);                                                          // 1035
          } else if (found !== undefined) {                                                                            // 1036
            response = found;                                                                                          // 1038
          }                                                                                                            // 1039
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 1040
            returnedValue.push(response);                                                                              // 1041
          } else if (returnedValue !== undefined) {                                                                    // 1042
            returnedValue = [returnedValue, response];                                                                 // 1044
          } else if (response !== undefined) {                                                                         // 1045
            returnedValue = response;                                                                                  // 1047
          }                                                                                                            // 1048
                                                                                                                       //
          return found;                                                                                                // 1049
        }                                                                                                              // 1050
      };                                                                                                               // 74
      module.initialize();                                                                                             // 1052
    });                                                                                                                // 1053
    return returnedValue !== undefined ? returnedValue : this;                                                         // 1056
  };                                                                                                                   // 1060
                                                                                                                       //
  $.fn.form.settings = {                                                                                               // 1062
    name: 'Form',                                                                                                      // 1064
    namespace: 'form',                                                                                                 // 1065
    debug: false,                                                                                                      // 1067
    verbose: false,                                                                                                    // 1068
    performance: true,                                                                                                 // 1069
    fields: false,                                                                                                     // 1071
    keyboardShortcuts: true,                                                                                           // 1073
    on: 'submit',                                                                                                      // 1074
    inline: false,                                                                                                     // 1075
    delay: 200,                                                                                                        // 1077
    revalidate: true,                                                                                                  // 1078
    transition: 'scale',                                                                                               // 1080
    duration: 200,                                                                                                     // 1081
    onValid: function () {},                                                                                           // 1083
    onInvalid: function () {},                                                                                         // 1084
    onSuccess: function () {                                                                                           // 1085
      return true;                                                                                                     // 1085
    },                                                                                                                 // 1085
    onFailure: function () {                                                                                           // 1086
      return false;                                                                                                    // 1086
    },                                                                                                                 // 1086
    metadata: {                                                                                                        // 1088
      defaultValue: 'default',                                                                                         // 1089
      validate: 'validate'                                                                                             // 1090
    },                                                                                                                 // 1088
    regExp: {                                                                                                          // 1093
      bracket: /\[(.*)\]/i,                                                                                            // 1094
      decimal: /^\d*(\.)\d+/,                                                                                          // 1095
      email: /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,      // 1096
      escape: /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,                                                                   // 1097
      flags: /^\/(.*)\/(.*)?/,                                                                                         // 1098
      integer: /^\-?\d+$/,                                                                                             // 1099
      number: /^\-?\d*(\.\d+)?$/,                                                                                      // 1100
      url: /(https?:\/\/(?:www\.|(?!www))[^\s\.]+\.[^\s]{2,}|www\.[^\s]+\.[^\s]{2,})/i                                 // 1101
    },                                                                                                                 // 1093
    text: {                                                                                                            // 1104
      unspecifiedRule: 'Please enter a valid value',                                                                   // 1105
      unspecifiedField: 'This field'                                                                                   // 1106
    },                                                                                                                 // 1104
    prompt: {                                                                                                          // 1109
      empty: '{name} must have a value',                                                                               // 1110
      checked: '{name} must be checked',                                                                               // 1111
      email: '{name} must be a valid e-mail',                                                                          // 1112
      url: '{name} must be a valid url',                                                                               // 1113
      regExp: '{name} is not formatted correctly',                                                                     // 1114
      integer: '{name} must be an integer',                                                                            // 1115
      decimal: '{name} must be a decimal number',                                                                      // 1116
      number: '{name} must be set to a number',                                                                        // 1117
      is: '{name} must be "{ruleValue}"',                                                                              // 1118
      isExactly: '{name} must be exactly "{ruleValue}"',                                                               // 1119
      not: '{name} cannot be set to "{ruleValue}"',                                                                    // 1120
      notExactly: '{name} cannot be set to exactly "{ruleValue}"',                                                     // 1121
      contain: '{name} cannot contain "{ruleValue}"',                                                                  // 1122
      containExactly: '{name} cannot contain exactly "{ruleValue}"',                                                   // 1123
      doesntContain: '{name} must contain  "{ruleValue}"',                                                             // 1124
      doesntContainExactly: '{name} must contain exactly "{ruleValue}"',                                               // 1125
      minLength: '{name} must be at least {ruleValue} characters',                                                     // 1126
      length: '{name} must be at least {ruleValue} characters',                                                        // 1127
      exactLength: '{name} must be exactly {ruleValue} characters',                                                    // 1128
      maxLength: '{name} cannot be longer than {ruleValue} characters',                                                // 1129
      match: '{name} must match {ruleValue} field',                                                                    // 1130
      different: '{name} must have a different value than {ruleValue} field',                                          // 1131
      creditCard: '{name} must be a valid credit card number',                                                         // 1132
      minCount: '{name} must have at least {ruleValue} choices',                                                       // 1133
      exactCount: '{name} must have exactly {ruleValue} choices',                                                      // 1134
      maxCount: '{name} must have {ruleValue} or less choices'                                                         // 1135
    },                                                                                                                 // 1109
    selector: {                                                                                                        // 1138
      checkbox: 'input[type="checkbox"], input[type="radio"]',                                                         // 1139
      clear: '.clear',                                                                                                 // 1140
      field: 'input, textarea, select',                                                                                // 1141
      group: '.field',                                                                                                 // 1142
      input: 'input',                                                                                                  // 1143
      message: '.error.message',                                                                                       // 1144
      prompt: '.prompt.label',                                                                                         // 1145
      radio: 'input[type="radio"]',                                                                                    // 1146
      reset: '.reset:not([type="reset"])',                                                                             // 1147
      submit: '.submit:not([type="submit"])',                                                                          // 1148
      uiCheckbox: '.ui.checkbox',                                                                                      // 1149
      uiDropdown: '.ui.dropdown'                                                                                       // 1150
    },                                                                                                                 // 1138
    className: {                                                                                                       // 1153
      error: 'error',                                                                                                  // 1154
      label: 'ui prompt label',                                                                                        // 1155
      pressed: 'down',                                                                                                 // 1156
      success: 'success'                                                                                               // 1157
    },                                                                                                                 // 1153
    error: {                                                                                                           // 1160
      identifier: 'You must specify a string identifier for each field',                                               // 1161
      method: 'The method you called is not defined.',                                                                 // 1162
      noRule: 'There is no rule matching the one you specified',                                                       // 1163
      oldSyntax: 'Starting in 2.0 forms now only take a single settings object. Validation settings converted to new syntax automatically.'
    },                                                                                                                 // 1160
    templates: {                                                                                                       // 1167
      // template that produces error message                                                                          // 1169
      error: function (errors) {                                                                                       // 1170
        var html = '<ul class="list">';                                                                                // 1171
        $.each(errors, function (index, value) {                                                                       // 1174
          html += '<li>' + value + '</li>';                                                                            // 1175
        });                                                                                                            // 1176
        html += '</ul>';                                                                                               // 1177
        return $(html);                                                                                                // 1178
      },                                                                                                               // 1179
      // template that produces label                                                                                  // 1181
      prompt: function (errors) {                                                                                      // 1182
        return $('<div/>').addClass('ui basic red pointing prompt label').html(errors[0]);                             // 1183
      }                                                                                                                // 1187
    },                                                                                                                 // 1167
    rules: {                                                                                                           // 1190
      // is not empty or blank string                                                                                  // 1192
      empty: function (value) {                                                                                        // 1193
        return !(value === undefined || '' === value || $.isArray(value) && value.length === 0);                       // 1194
      },                                                                                                               // 1195
      // checkbox checked                                                                                              // 1197
      checked: function () {                                                                                           // 1198
        return $(this).filter(':checked').length > 0;                                                                  // 1199
      },                                                                                                               // 1200
      // is most likely an email                                                                                       // 1202
      email: function (value) {                                                                                        // 1203
        return $.fn.form.settings.regExp.email.test(value);                                                            // 1204
      },                                                                                                               // 1205
      // value is most likely url                                                                                      // 1207
      url: function (value) {                                                                                          // 1208
        return $.fn.form.settings.regExp.url.test(value);                                                              // 1209
      },                                                                                                               // 1210
      // matches specified regExp                                                                                      // 1212
      regExp: function (value, regExp) {                                                                               // 1213
        var regExpParts = regExp.match($.fn.form.settings.regExp.flags),                                               // 1214
            flags; // regular expression specified as /baz/gi (flags)                                                  // 1214
                                                                                                                       //
        if (regExpParts) {                                                                                             // 1219
          regExp = regExpParts.length >= 2 ? regExpParts[1] : regExp;                                                  // 1220
          flags = regExpParts.length >= 3 ? regExpParts[2] : '';                                                       // 1224
        }                                                                                                              // 1228
                                                                                                                       //
        return value.match(new RegExp(regExp, flags));                                                                 // 1229
      },                                                                                                               // 1230
      // is valid integer or matches range                                                                             // 1232
      integer: function (value, range) {                                                                               // 1233
        var intRegExp = $.fn.form.settings.regExp.integer,                                                             // 1234
            min,                                                                                                       // 1234
            max,                                                                                                       // 1234
            parts;                                                                                                     // 1234
                                                                                                                       //
        if (!range || ['', '..'].indexOf(range) !== -1) {// do nothing                                                 // 1240
        } else if (range.indexOf('..') == -1) {                                                                        // 1242
          if (intRegExp.test(range)) {                                                                                 // 1244
            min = max = range - 0;                                                                                     // 1245
          }                                                                                                            // 1246
        } else {                                                                                                       // 1247
          parts = range.split('..', 2);                                                                                // 1249
                                                                                                                       //
          if (intRegExp.test(parts[0])) {                                                                              // 1250
            min = parts[0] - 0;                                                                                        // 1251
          }                                                                                                            // 1252
                                                                                                                       //
          if (intRegExp.test(parts[1])) {                                                                              // 1253
            max = parts[1] - 0;                                                                                        // 1254
          }                                                                                                            // 1255
        }                                                                                                              // 1256
                                                                                                                       //
        return intRegExp.test(value) && (min === undefined || value >= min) && (max === undefined || value <= max);    // 1257
      },                                                                                                               // 1262
      // is valid number (with decimal)                                                                                // 1264
      decimal: function (value) {                                                                                      // 1265
        return $.fn.form.settings.regExp.decimal.test(value);                                                          // 1266
      },                                                                                                               // 1267
      // is valid number                                                                                               // 1269
      number: function (value) {                                                                                       // 1270
        return $.fn.form.settings.regExp.number.test(value);                                                           // 1271
      },                                                                                                               // 1272
      // is value (case insensitive)                                                                                   // 1274
      is: function (value, text) {                                                                                     // 1275
        text = typeof text == 'string' ? text.toLowerCase() : text;                                                    // 1276
        value = typeof value == 'string' ? value.toLowerCase() : value;                                                // 1280
        return value == text;                                                                                          // 1284
      },                                                                                                               // 1285
      // is value                                                                                                      // 1287
      isExactly: function (value, text) {                                                                              // 1288
        return value == text;                                                                                          // 1289
      },                                                                                                               // 1290
      // value is not another value (case insensitive)                                                                 // 1292
      not: function (value, notValue) {                                                                                // 1293
        value = typeof value == 'string' ? value.toLowerCase() : value;                                                // 1294
        notValue = typeof notValue == 'string' ? notValue.toLowerCase() : notValue;                                    // 1298
        return value != notValue;                                                                                      // 1302
      },                                                                                                               // 1303
      // value is not another value (case sensitive)                                                                   // 1305
      notExactly: function (value, notValue) {                                                                         // 1306
        return value != notValue;                                                                                      // 1307
      },                                                                                                               // 1308
      // value contains text (insensitive)                                                                             // 1310
      contains: function (value, text) {                                                                               // 1311
        // escape regex characters                                                                                     // 1312
        text = text.replace($.fn.form.settings.regExp.escape, "\\$&");                                                 // 1313
        return value.search(new RegExp(text, 'i')) !== -1;                                                             // 1314
      },                                                                                                               // 1315
      // value contains text (case sensitive)                                                                          // 1317
      containsExactly: function (value, text) {                                                                        // 1318
        // escape regex characters                                                                                     // 1319
        text = text.replace($.fn.form.settings.regExp.escape, "\\$&");                                                 // 1320
        return value.search(new RegExp(text)) !== -1;                                                                  // 1321
      },                                                                                                               // 1322
      // value contains text (insensitive)                                                                             // 1324
      doesntContain: function (value, text) {                                                                          // 1325
        // escape regex characters                                                                                     // 1326
        text = text.replace($.fn.form.settings.regExp.escape, "\\$&");                                                 // 1327
        return value.search(new RegExp(text, 'i')) === -1;                                                             // 1328
      },                                                                                                               // 1329
      // value contains text (case sensitive)                                                                          // 1331
      doesntContainExactly: function (value, text) {                                                                   // 1332
        // escape regex characters                                                                                     // 1333
        text = text.replace($.fn.form.settings.regExp.escape, "\\$&");                                                 // 1334
        return value.search(new RegExp(text)) === -1;                                                                  // 1335
      },                                                                                                               // 1336
      // is at least string length                                                                                     // 1338
      minLength: function (value, requiredLength) {                                                                    // 1339
        return value !== undefined ? value.length >= requiredLength : false;                                           // 1340
      },                                                                                                               // 1344
      // see rls notes for 2.0.6 (this is a duplicate of minLength)                                                    // 1346
      length: function (value, requiredLength) {                                                                       // 1347
        return value !== undefined ? value.length >= requiredLength : false;                                           // 1348
      },                                                                                                               // 1352
      // is exactly length                                                                                             // 1354
      exactLength: function (value, requiredLength) {                                                                  // 1355
        return value !== undefined ? value.length == requiredLength : false;                                           // 1356
      },                                                                                                               // 1360
      // is less than length                                                                                           // 1362
      maxLength: function (value, maxLength) {                                                                         // 1363
        return value !== undefined ? value.length <= maxLength : false;                                                // 1364
      },                                                                                                               // 1368
      // matches another field                                                                                         // 1370
      match: function (value, identifier) {                                                                            // 1371
        var $form = $(this),                                                                                           // 1372
            matchingValue;                                                                                             // 1372
                                                                                                                       //
        if ($('[data-validate="' + identifier + '"]').length > 0) {                                                    // 1376
          matchingValue = $('[data-validate="' + identifier + '"]').val();                                             // 1377
        } else if ($('#' + identifier).length > 0) {                                                                   // 1378
          matchingValue = $('#' + identifier).val();                                                                   // 1380
        } else if ($('[name="' + identifier + '"]').length > 0) {                                                      // 1381
          matchingValue = $('[name="' + identifier + '"]').val();                                                      // 1383
        } else if ($('[name="' + identifier + '[]"]').length > 0) {                                                    // 1384
          matchingValue = $('[name="' + identifier + '[]"]');                                                          // 1386
        }                                                                                                              // 1387
                                                                                                                       //
        return matchingValue !== undefined ? value.toString() == matchingValue.toString() : false;                     // 1388
      },                                                                                                               // 1392
      // different than another field                                                                                  // 1394
      different: function (value, identifier) {                                                                        // 1395
        // use either id or name of field                                                                              // 1396
        var $form = $(this),                                                                                           // 1397
            matchingValue;                                                                                             // 1397
                                                                                                                       //
        if ($('[data-validate="' + identifier + '"]').length > 0) {                                                    // 1401
          matchingValue = $('[data-validate="' + identifier + '"]').val();                                             // 1402
        } else if ($('#' + identifier).length > 0) {                                                                   // 1403
          matchingValue = $('#' + identifier).val();                                                                   // 1405
        } else if ($('[name="' + identifier + '"]').length > 0) {                                                      // 1406
          matchingValue = $('[name="' + identifier + '"]').val();                                                      // 1408
        } else if ($('[name="' + identifier + '[]"]').length > 0) {                                                    // 1409
          matchingValue = $('[name="' + identifier + '[]"]');                                                          // 1411
        }                                                                                                              // 1412
                                                                                                                       //
        return matchingValue !== undefined ? value.toString() !== matchingValue.toString() : false;                    // 1413
      },                                                                                                               // 1417
      creditCard: function (cardNumber, cardTypes) {                                                                   // 1419
        var cards = {                                                                                                  // 1420
          visa: {                                                                                                      // 1422
            pattern: /^4/,                                                                                             // 1423
            length: [16]                                                                                               // 1424
          },                                                                                                           // 1422
          amex: {                                                                                                      // 1426
            pattern: /^3[47]/,                                                                                         // 1427
            length: [15]                                                                                               // 1428
          },                                                                                                           // 1426
          mastercard: {                                                                                                // 1430
            pattern: /^5[1-5]/,                                                                                        // 1431
            length: [16]                                                                                               // 1432
          },                                                                                                           // 1430
          discover: {                                                                                                  // 1434
            pattern: /^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)/,                  // 1435
            length: [16]                                                                                               // 1436
          },                                                                                                           // 1434
          unionPay: {                                                                                                  // 1438
            pattern: /^(62|88)/,                                                                                       // 1439
            length: [16, 17, 18, 19]                                                                                   // 1440
          },                                                                                                           // 1438
          jcb: {                                                                                                       // 1442
            pattern: /^35(2[89]|[3-8][0-9])/,                                                                          // 1443
            length: [16]                                                                                               // 1444
          },                                                                                                           // 1442
          maestro: {                                                                                                   // 1446
            pattern: /^(5018|5020|5038|6304|6759|676[1-3])/,                                                           // 1447
            length: [12, 13, 14, 15, 16, 17, 18, 19]                                                                   // 1448
          },                                                                                                           // 1446
          dinersClub: {                                                                                                // 1450
            pattern: /^(30[0-5]|^36)/,                                                                                 // 1451
            length: [14]                                                                                               // 1452
          },                                                                                                           // 1450
          laser: {                                                                                                     // 1454
            pattern: /^(6304|670[69]|6771)/,                                                                           // 1455
            length: [16, 17, 18, 19]                                                                                   // 1456
          },                                                                                                           // 1454
          visaElectron: {                                                                                              // 1458
            pattern: /^(4026|417500|4508|4844|491(3|7))/,                                                              // 1459
            length: [16]                                                                                               // 1460
          }                                                                                                            // 1458
        },                                                                                                             // 1421
            valid = {},                                                                                                // 1420
            validCard = false,                                                                                         // 1420
            requiredTypes = typeof cardTypes == 'string' ? cardTypes.split(',') : false,                               // 1420
            unionPay,                                                                                                  // 1420
            validation;                                                                                                // 1420
                                                                                                                       //
        if (typeof cardNumber !== 'string' || cardNumber.length === 0) {                                               // 1472
          return;                                                                                                      // 1473
        } // verify card types                                                                                         // 1474
                                                                                                                       //
                                                                                                                       //
        if (requiredTypes) {                                                                                           // 1477
          $.each(requiredTypes, function (index, type) {                                                               // 1478
            // verify each card type                                                                                   // 1479
            validation = cards[type];                                                                                  // 1480
                                                                                                                       //
            if (validation) {                                                                                          // 1481
              valid = {                                                                                                // 1482
                length: $.inArray(cardNumber.length, validation.length) !== -1,                                        // 1483
                pattern: cardNumber.search(validation.pattern) !== -1                                                  // 1484
              };                                                                                                       // 1482
                                                                                                                       //
              if (valid.length && valid.pattern) {                                                                     // 1486
                validCard = true;                                                                                      // 1487
              }                                                                                                        // 1488
            }                                                                                                          // 1489
          });                                                                                                          // 1490
                                                                                                                       //
          if (!validCard) {                                                                                            // 1492
            return false;                                                                                              // 1493
          }                                                                                                            // 1494
        } // skip luhn for UnionPay                                                                                    // 1495
                                                                                                                       //
                                                                                                                       //
        unionPay = {                                                                                                   // 1498
          number: $.inArray(cardNumber.length, cards.unionPay.length) !== -1,                                          // 1499
          pattern: cardNumber.search(cards.unionPay.pattern) !== -1                                                    // 1500
        };                                                                                                             // 1498
                                                                                                                       //
        if (unionPay.number && unionPay.pattern) {                                                                     // 1502
          return true;                                                                                                 // 1503
        } // verify luhn, adapted from  <https://gist.github.com/2134376>                                              // 1504
                                                                                                                       //
                                                                                                                       //
        var length = cardNumber.length,                                                                                // 1507
            multiple = 0,                                                                                              // 1507
            producedValue = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]],                          // 1507
            sum = 0;                                                                                                   // 1507
                                                                                                                       //
        while (length--) {                                                                                             // 1516
          sum += producedValue[multiple][parseInt(cardNumber.charAt(length), 10)];                                     // 1517
          multiple ^= 1;                                                                                               // 1518
        }                                                                                                              // 1519
                                                                                                                       //
        return sum % 10 === 0 && sum > 0;                                                                              // 1520
      },                                                                                                               // 1521
      minCount: function (value, minCount) {                                                                           // 1523
        if (minCount == 0) {                                                                                           // 1524
          return true;                                                                                                 // 1525
        }                                                                                                              // 1526
                                                                                                                       //
        if (minCount == 1) {                                                                                           // 1527
          return value !== '';                                                                                         // 1528
        }                                                                                                              // 1529
                                                                                                                       //
        return value.split(',').length >= minCount;                                                                    // 1530
      },                                                                                                               // 1531
      exactCount: function (value, exactCount) {                                                                       // 1533
        if (exactCount == 0) {                                                                                         // 1534
          return value === '';                                                                                         // 1535
        }                                                                                                              // 1536
                                                                                                                       //
        if (exactCount == 1) {                                                                                         // 1537
          return value !== '' && value.search(',') === -1;                                                             // 1538
        }                                                                                                              // 1539
                                                                                                                       //
        return value.split(',').length == exactCount;                                                                  // 1540
      },                                                                                                               // 1541
      maxCount: function (value, maxCount) {                                                                           // 1543
        if (maxCount == 0) {                                                                                           // 1544
          return false;                                                                                                // 1545
        }                                                                                                              // 1546
                                                                                                                       //
        if (maxCount == 1) {                                                                                           // 1547
          return value.search(',') === -1;                                                                             // 1548
        }                                                                                                              // 1549
                                                                                                                       //
        return value.split(',').length <= maxCount;                                                                    // 1550
      }                                                                                                                // 1551
    }                                                                                                                  // 1190
  };                                                                                                                   // 1062
})(jQuery, window, document);                                                                                          // 1556
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"state.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/behaviors/state.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - State                                                                                            //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.state = function (parameters) {                                                                                 // 26
    var $allModules = $(this),                                                                                         // 27
        moduleSelector = $allModules.selector || '',                                                                   // 27
        hasTouch = 'ontouchstart' in document.documentElement,                                                         // 27
        time = new Date().getTime(),                                                                                   // 27
        performance = [],                                                                                              // 27
        query = arguments[0],                                                                                          // 27
        methodInvoked = typeof query == 'string',                                                                      // 27
        queryArguments = [].slice.call(arguments, 1),                                                                  // 27
        returnedValue;                                                                                                 // 27
    $allModules.each(function () {                                                                                     // 42
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.state.settings, parameters) : $.extend({}, $.fn.state.settings),
          error = settings.error,                                                                                      // 44
          metadata = settings.metadata,                                                                                // 44
          className = settings.className,                                                                              // 44
          namespace = settings.namespace,                                                                              // 44
          states = settings.states,                                                                                    // 44
          text = settings.text,                                                                                        // 44
          eventNamespace = '.' + namespace,                                                                            // 44
          moduleNamespace = namespace + '-module',                                                                     // 44
          $module = $(this),                                                                                           // 44
          element = this,                                                                                              // 44
          instance = $module.data(moduleNamespace),                                                                    // 44
          module;                                                                                                      // 44
      module = {                                                                                                       // 66
        initialize: function () {                                                                                      // 68
          module.verbose('Initializing module'); // allow module to guess desired state based on element               // 69
                                                                                                                       //
          if (settings.automatic) {                                                                                    // 72
            module.add.defaults();                                                                                     // 73
          } // bind events with delegated events                                                                       // 74
                                                                                                                       //
                                                                                                                       //
          if (settings.context && moduleSelector !== '') {                                                             // 77
            $(settings.context).on(moduleSelector, 'mouseenter' + eventNamespace, module.change.text).on(moduleSelector, 'mouseleave' + eventNamespace, module.reset.text).on(moduleSelector, 'click' + eventNamespace, module.toggle.state);
          } else {                                                                                                     // 83
            $module.on('mouseenter' + eventNamespace, module.change.text).on('mouseleave' + eventNamespace, module.reset.text).on('click' + eventNamespace, module.toggle.state);
          }                                                                                                            // 90
                                                                                                                       //
          module.instantiate();                                                                                        // 91
        },                                                                                                             // 92
        instantiate: function () {                                                                                     // 94
          module.verbose('Storing instance of module', module);                                                        // 95
          instance = module;                                                                                           // 96
          $module.data(moduleNamespace, module);                                                                       // 97
        },                                                                                                             // 100
        destroy: function () {                                                                                         // 102
          module.verbose('Destroying previous module', instance);                                                      // 103
          $module.off(eventNamespace).removeData(moduleNamespace);                                                     // 104
        },                                                                                                             // 108
        refresh: function () {                                                                                         // 110
          module.verbose('Refreshing selector cache');                                                                 // 111
          $module = $(element);                                                                                        // 112
        },                                                                                                             // 113
        add: {                                                                                                         // 115
          defaults: function () {                                                                                      // 116
            var userStates = parameters && $.isPlainObject(parameters.states) ? parameters.states : {};                // 117
            $.each(settings.defaults, function (type, typeStates) {                                                    // 122
              if (module.is[type] !== undefined && module.is[type]()) {                                                // 123
                module.verbose('Adding default states', type, element);                                                // 124
                $.extend(settings.states, typeStates, userStates);                                                     // 125
              }                                                                                                        // 126
            });                                                                                                        // 127
          }                                                                                                            // 128
        },                                                                                                             // 115
        is: {                                                                                                          // 131
          active: function () {                                                                                        // 133
            return $module.hasClass(className.active);                                                                 // 134
          },                                                                                                           // 135
          loading: function () {                                                                                       // 136
            return $module.hasClass(className.loading);                                                                // 137
          },                                                                                                           // 138
          inactive: function () {                                                                                      // 139
            return !$module.hasClass(className.active);                                                                // 140
          },                                                                                                           // 141
          state: function (state) {                                                                                    // 142
            if (className[state] === undefined) {                                                                      // 143
              return false;                                                                                            // 144
            }                                                                                                          // 145
                                                                                                                       //
            return $module.hasClass(className[state]);                                                                 // 146
          },                                                                                                           // 147
          enabled: function () {                                                                                       // 149
            return !$module.is(settings.filter.active);                                                                // 150
          },                                                                                                           // 151
          disabled: function () {                                                                                      // 152
            return $module.is(settings.filter.active);                                                                 // 153
          },                                                                                                           // 154
          textEnabled: function () {                                                                                   // 155
            return !$module.is(settings.filter.text);                                                                  // 156
          },                                                                                                           // 157
          // definitions for automatic type detection                                                                  // 159
          button: function () {                                                                                        // 160
            return $module.is('.button:not(a, .submit)');                                                              // 161
          },                                                                                                           // 162
          input: function () {                                                                                         // 163
            return $module.is('input');                                                                                // 164
          },                                                                                                           // 165
          progress: function () {                                                                                      // 166
            return $module.is('.ui.progress');                                                                         // 167
          }                                                                                                            // 168
        },                                                                                                             // 131
        allow: function (state) {                                                                                      // 171
          module.debug('Now allowing state', state);                                                                   // 172
          states[state] = true;                                                                                        // 173
        },                                                                                                             // 174
        disallow: function (state) {                                                                                   // 175
          module.debug('No longer allowing', state);                                                                   // 176
          states[state] = false;                                                                                       // 177
        },                                                                                                             // 178
        allows: function (state) {                                                                                     // 180
          return states[state] || false;                                                                               // 181
        },                                                                                                             // 182
        enable: function () {                                                                                          // 184
          $module.removeClass(className.disabled);                                                                     // 185
        },                                                                                                             // 186
        disable: function () {                                                                                         // 188
          $module.addClass(className.disabled);                                                                        // 189
        },                                                                                                             // 190
        setState: function (state) {                                                                                   // 192
          if (module.allows(state)) {                                                                                  // 193
            $module.addClass(className[state]);                                                                        // 194
          }                                                                                                            // 195
        },                                                                                                             // 196
        removeState: function (state) {                                                                                // 198
          if (module.allows(state)) {                                                                                  // 199
            $module.removeClass(className[state]);                                                                     // 200
          }                                                                                                            // 201
        },                                                                                                             // 202
        toggle: {                                                                                                      // 204
          state: function () {                                                                                         // 205
            var apiRequest, requestCancelled;                                                                          // 206
                                                                                                                       //
            if (module.allows('active') && module.is.enabled()) {                                                      // 210
              module.refresh();                                                                                        // 211
                                                                                                                       //
              if ($.fn.api !== undefined) {                                                                            // 212
                apiRequest = $module.api('get request');                                                               // 213
                requestCancelled = $module.api('was cancelled');                                                       // 214
                                                                                                                       //
                if (requestCancelled) {                                                                                // 215
                  module.debug('API Request cancelled by beforesend');                                                 // 216
                                                                                                                       //
                  settings.activateTest = function () {                                                                // 217
                    return false;                                                                                      // 217
                  };                                                                                                   // 217
                                                                                                                       //
                  settings.deactivateTest = function () {                                                              // 218
                    return false;                                                                                      // 218
                  };                                                                                                   // 218
                } else if (apiRequest) {                                                                               // 219
                  module.listenTo(apiRequest);                                                                         // 221
                  return;                                                                                              // 222
                }                                                                                                      // 223
              }                                                                                                        // 224
                                                                                                                       //
              module.change.state();                                                                                   // 225
            }                                                                                                          // 226
          }                                                                                                            // 227
        },                                                                                                             // 204
        listenTo: function (apiRequest) {                                                                              // 230
          module.debug('API request detected, waiting for state signal', apiRequest);                                  // 231
                                                                                                                       //
          if (apiRequest) {                                                                                            // 232
            if (text.loading) {                                                                                        // 233
              module.update.text(text.loading);                                                                        // 234
            }                                                                                                          // 235
                                                                                                                       //
            $.when(apiRequest).then(function () {                                                                      // 236
              if (apiRequest.state() == 'resolved') {                                                                  // 238
                module.debug('API request succeeded');                                                                 // 239
                                                                                                                       //
                settings.activateTest = function () {                                                                  // 240
                  return true;                                                                                         // 240
                };                                                                                                     // 240
                                                                                                                       //
                settings.deactivateTest = function () {                                                                // 241
                  return true;                                                                                         // 241
                };                                                                                                     // 241
              } else {                                                                                                 // 242
                module.debug('API request failed');                                                                    // 244
                                                                                                                       //
                settings.activateTest = function () {                                                                  // 245
                  return false;                                                                                        // 245
                };                                                                                                     // 245
                                                                                                                       //
                settings.deactivateTest = function () {                                                                // 246
                  return false;                                                                                        // 246
                };                                                                                                     // 246
              }                                                                                                        // 247
                                                                                                                       //
              module.change.state();                                                                                   // 248
            });                                                                                                        // 249
          }                                                                                                            // 251
        },                                                                                                             // 252
        // checks whether active/inactive state can be given                                                           // 254
        change: {                                                                                                      // 255
          state: function () {                                                                                         // 257
            module.debug('Determining state change direction'); // inactive to active change                           // 258
                                                                                                                       //
            if (module.is.inactive()) {                                                                                // 260
              module.activate();                                                                                       // 261
            } else {                                                                                                   // 262
              module.deactivate();                                                                                     // 264
            }                                                                                                          // 265
                                                                                                                       //
            if (settings.sync) {                                                                                       // 266
              module.sync();                                                                                           // 267
            }                                                                                                          // 268
                                                                                                                       //
            settings.onChange.call(element);                                                                           // 269
          },                                                                                                           // 270
          text: function () {                                                                                          // 272
            if (module.is.textEnabled()) {                                                                             // 273
              if (module.is.disabled()) {                                                                              // 274
                module.verbose('Changing text to disabled text', text.hover);                                          // 275
                module.update.text(text.disabled);                                                                     // 276
              } else if (module.is.active()) {                                                                         // 277
                if (text.hover) {                                                                                      // 279
                  module.verbose('Changing text to hover text', text.hover);                                           // 280
                  module.update.text(text.hover);                                                                      // 281
                } else if (text.deactivate) {                                                                          // 282
                  module.verbose('Changing text to deactivating text', text.deactivate);                               // 284
                  module.update.text(text.deactivate);                                                                 // 285
                }                                                                                                      // 286
              } else {                                                                                                 // 287
                if (text.hover) {                                                                                      // 289
                  module.verbose('Changing text to hover text', text.hover);                                           // 290
                  module.update.text(text.hover);                                                                      // 291
                } else if (text.activate) {                                                                            // 292
                  module.verbose('Changing text to activating text', text.activate);                                   // 294
                  module.update.text(text.activate);                                                                   // 295
                }                                                                                                      // 296
              }                                                                                                        // 297
            }                                                                                                          // 298
          }                                                                                                            // 299
        },                                                                                                             // 255
        activate: function () {                                                                                        // 303
          if (settings.activateTest.call(element)) {                                                                   // 304
            module.debug('Setting state to active');                                                                   // 305
            $module.addClass(className.active);                                                                        // 306
            module.update.text(text.active);                                                                           // 309
            settings.onActivate.call(element);                                                                         // 310
          }                                                                                                            // 311
        },                                                                                                             // 312
        deactivate: function () {                                                                                      // 314
          if (settings.deactivateTest.call(element)) {                                                                 // 315
            module.debug('Setting state to inactive');                                                                 // 316
            $module.removeClass(className.active);                                                                     // 317
            module.update.text(text.inactive);                                                                         // 320
            settings.onDeactivate.call(element);                                                                       // 321
          }                                                                                                            // 322
        },                                                                                                             // 323
        sync: function () {                                                                                            // 325
          module.verbose('Syncing other buttons to current state');                                                    // 326
                                                                                                                       //
          if (module.is.active()) {                                                                                    // 327
            $allModules.not($module).state('activate');                                                                // 328
          } else {                                                                                                     // 331
            $allModules.not($module).state('deactivate');                                                              // 333
          }                                                                                                            // 337
        },                                                                                                             // 338
        get: {                                                                                                         // 340
          text: function () {                                                                                          // 341
            return settings.selector.text ? $module.find(settings.selector.text).text() : $module.html();              // 342
          },                                                                                                           // 346
          textFor: function (state) {                                                                                  // 347
            return text[state] || false;                                                                               // 348
          }                                                                                                            // 349
        },                                                                                                             // 340
        flash: {                                                                                                       // 352
          text: function (text, duration, callback) {                                                                  // 353
            var previousText = module.get.text();                                                                      // 354
            module.debug('Flashing text message', text, duration);                                                     // 357
            text = text || settings.text.flash;                                                                        // 358
            duration = duration || settings.flashDuration;                                                             // 359
                                                                                                                       //
            callback = callback || function () {};                                                                     // 360
                                                                                                                       //
            module.update.text(text);                                                                                  // 361
            setTimeout(function () {                                                                                   // 362
              module.update.text(previousText);                                                                        // 363
              callback.call(element);                                                                                  // 364
            }, duration);                                                                                              // 365
          }                                                                                                            // 366
        },                                                                                                             // 352
        reset: {                                                                                                       // 369
          // on mouseout sets text to previous value                                                                   // 370
          text: function () {                                                                                          // 371
            var activeText = text.active || $module.data(metadata.storedText),                                         // 372
                inactiveText = text.inactive || $module.data(metadata.storedText);                                     // 372
                                                                                                                       //
            if (module.is.textEnabled()) {                                                                             // 376
              if (module.is.active() && activeText) {                                                                  // 377
                module.verbose('Resetting active text', activeText);                                                   // 378
                module.update.text(activeText);                                                                        // 379
              } else if (inactiveText) {                                                                               // 380
                module.verbose('Resetting inactive text', activeText);                                                 // 382
                module.update.text(inactiveText);                                                                      // 383
              }                                                                                                        // 384
            }                                                                                                          // 385
          }                                                                                                            // 386
        },                                                                                                             // 369
        update: {                                                                                                      // 389
          text: function (text) {                                                                                      // 390
            var currentText = module.get.text();                                                                       // 391
                                                                                                                       //
            if (text && text !== currentText) {                                                                        // 394
              module.debug('Updating text', text);                                                                     // 395
                                                                                                                       //
              if (settings.selector.text) {                                                                            // 396
                $module.data(metadata.storedText, text).find(settings.selector.text).text(text);                       // 397
              } else {                                                                                                 // 402
                $module.data(metadata.storedText, text).html(text);                                                    // 404
              }                                                                                                        // 408
            } else {                                                                                                   // 409
              module.debug('Text is already set, ignoring update', text);                                              // 411
            }                                                                                                          // 412
          }                                                                                                            // 413
        },                                                                                                             // 389
        setting: function (name, value) {                                                                              // 416
          module.debug('Changing setting', name, value);                                                               // 417
                                                                                                                       //
          if ($.isPlainObject(name)) {                                                                                 // 418
            $.extend(true, settings, name);                                                                            // 419
          } else if (value !== undefined) {                                                                            // 420
            if ($.isPlainObject(settings[name])) {                                                                     // 422
              $.extend(true, settings[name], value);                                                                   // 423
            } else {                                                                                                   // 424
              settings[name] = value;                                                                                  // 426
            }                                                                                                          // 427
          } else {                                                                                                     // 428
            return settings[name];                                                                                     // 430
          }                                                                                                            // 431
        },                                                                                                             // 432
        internal: function (name, value) {                                                                             // 433
          if ($.isPlainObject(name)) {                                                                                 // 434
            $.extend(true, module, name);                                                                              // 435
          } else if (value !== undefined) {                                                                            // 436
            module[name] = value;                                                                                      // 438
          } else {                                                                                                     // 439
            return module[name];                                                                                       // 441
          }                                                                                                            // 442
        },                                                                                                             // 443
        debug: function () {                                                                                           // 444
          if (!settings.silent && settings.debug) {                                                                    // 445
            if (settings.performance) {                                                                                // 446
              module.performance.log(arguments);                                                                       // 447
            } else {                                                                                                   // 448
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 450
              module.debug.apply(console, arguments);                                                                  // 451
            }                                                                                                          // 452
          }                                                                                                            // 453
        },                                                                                                             // 454
        verbose: function () {                                                                                         // 455
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 456
            if (settings.performance) {                                                                                // 457
              module.performance.log(arguments);                                                                       // 458
            } else {                                                                                                   // 459
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 461
              module.verbose.apply(console, arguments);                                                                // 462
            }                                                                                                          // 463
          }                                                                                                            // 464
        },                                                                                                             // 465
        error: function () {                                                                                           // 466
          if (!settings.silent) {                                                                                      // 467
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 468
            module.error.apply(console, arguments);                                                                    // 469
          }                                                                                                            // 470
        },                                                                                                             // 471
        performance: {                                                                                                 // 472
          log: function (message) {                                                                                    // 473
            var currentTime, executionTime, previousTime;                                                              // 474
                                                                                                                       //
            if (settings.performance) {                                                                                // 479
              currentTime = new Date().getTime();                                                                      // 480
              previousTime = time || currentTime;                                                                      // 481
              executionTime = currentTime - previousTime;                                                              // 482
              time = currentTime;                                                                                      // 483
              performance.push({                                                                                       // 484
                'Name': message[0],                                                                                    // 485
                'Arguments': [].slice.call(message, 1) || '',                                                          // 486
                'Element': element,                                                                                    // 487
                'Execution Time': executionTime                                                                        // 488
              });                                                                                                      // 484
            }                                                                                                          // 490
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 491
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 492
          },                                                                                                           // 493
          display: function () {                                                                                       // 494
            var title = settings.name + ':',                                                                           // 495
                totalTime = 0;                                                                                         // 495
            time = false;                                                                                              // 499
            clearTimeout(module.performance.timer);                                                                    // 500
            $.each(performance, function (index, data) {                                                               // 501
              totalTime += data['Execution Time'];                                                                     // 502
            });                                                                                                        // 503
            title += ' ' + totalTime + 'ms';                                                                           // 504
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 505
              title += ' \'' + moduleSelector + '\'';                                                                  // 506
            }                                                                                                          // 507
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 508
              console.groupCollapsed(title);                                                                           // 509
                                                                                                                       //
              if (console.table) {                                                                                     // 510
                console.table(performance);                                                                            // 511
              } else {                                                                                                 // 512
                $.each(performance, function (index, data) {                                                           // 514
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 515
                });                                                                                                    // 516
              }                                                                                                        // 517
                                                                                                                       //
              console.groupEnd();                                                                                      // 518
            }                                                                                                          // 519
                                                                                                                       //
            performance = [];                                                                                          // 520
          }                                                                                                            // 521
        },                                                                                                             // 472
        invoke: function (query, passedArguments, context) {                                                           // 523
          var object = instance,                                                                                       // 524
              maxDepth,                                                                                                // 524
              found,                                                                                                   // 524
              response;                                                                                                // 524
          passedArguments = passedArguments || queryArguments;                                                         // 530
          context = element || context;                                                                                // 531
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 532
            query = query.split(/[\. ]/);                                                                              // 533
            maxDepth = query.length - 1;                                                                               // 534
            $.each(query, function (depth, value) {                                                                    // 535
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 540
                object = object[camelCaseValue];                                                                       // 541
              } else if (object[camelCaseValue] !== undefined) {                                                       // 542
                found = object[camelCaseValue];                                                                        // 544
                return false;                                                                                          // 545
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 546
                object = object[value];                                                                                // 548
              } else if (object[value] !== undefined) {                                                                // 549
                found = object[value];                                                                                 // 551
                return false;                                                                                          // 552
              } else {                                                                                                 // 553
                module.error(error.method, query);                                                                     // 555
                return false;                                                                                          // 556
              }                                                                                                        // 557
            });                                                                                                        // 558
          }                                                                                                            // 559
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 560
            response = found.apply(context, passedArguments);                                                          // 561
          } else if (found !== undefined) {                                                                            // 562
            response = found;                                                                                          // 564
          }                                                                                                            // 565
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 566
            returnedValue.push(response);                                                                              // 567
          } else if (returnedValue !== undefined) {                                                                    // 568
            returnedValue = [returnedValue, response];                                                                 // 570
          } else if (response !== undefined) {                                                                         // 571
            returnedValue = response;                                                                                  // 573
          }                                                                                                            // 574
                                                                                                                       //
          return found;                                                                                                // 575
        }                                                                                                              // 576
      };                                                                                                               // 66
                                                                                                                       //
      if (methodInvoked) {                                                                                             // 579
        if (instance === undefined) {                                                                                  // 580
          module.initialize();                                                                                         // 581
        }                                                                                                              // 582
                                                                                                                       //
        module.invoke(query);                                                                                          // 583
      } else {                                                                                                         // 584
        if (instance !== undefined) {                                                                                  // 586
          instance.invoke('destroy');                                                                                  // 587
        }                                                                                                              // 588
                                                                                                                       //
        module.initialize();                                                                                           // 589
      }                                                                                                                // 590
    });                                                                                                                // 591
    return returnedValue !== undefined ? returnedValue : this;                                                         // 594
  };                                                                                                                   // 598
                                                                                                                       //
  $.fn.state.settings = {                                                                                              // 600
    // module info                                                                                                     // 602
    name: 'State',                                                                                                     // 603
    // debug output                                                                                                    // 605
    debug: false,                                                                                                      // 606
    // verbose debug output                                                                                            // 608
    verbose: false,                                                                                                    // 609
    // namespace for events                                                                                            // 611
    namespace: 'state',                                                                                                // 612
    // debug data includes performance                                                                                 // 614
    performance: true,                                                                                                 // 615
    // callback occurs on state change                                                                                 // 617
    onActivate: function () {},                                                                                        // 618
    onDeactivate: function () {},                                                                                      // 619
    onChange: function () {},                                                                                          // 620
    // state test functions                                                                                            // 622
    activateTest: function () {                                                                                        // 623
      return true;                                                                                                     // 623
    },                                                                                                                 // 623
    deactivateTest: function () {                                                                                      // 624
      return true;                                                                                                     // 624
    },                                                                                                                 // 624
    // whether to automatically map default states                                                                     // 626
    automatic: true,                                                                                                   // 627
    // activate / deactivate changes all elements instantiated at same time                                            // 629
    sync: false,                                                                                                       // 630
    // default flash text duration, used for temporarily changing text of an element                                   // 632
    flashDuration: 1000,                                                                                               // 633
    // selector filter                                                                                                 // 635
    filter: {                                                                                                          // 636
      text: '.loading, .disabled',                                                                                     // 637
      active: '.disabled'                                                                                              // 638
    },                                                                                                                 // 636
    context: false,                                                                                                    // 641
    // error                                                                                                           // 643
    error: {                                                                                                           // 644
      beforeSend: 'The before send function has cancelled state change',                                               // 645
      method: 'The method you called is not defined.'                                                                  // 646
    },                                                                                                                 // 644
    // metadata                                                                                                        // 649
    metadata: {                                                                                                        // 650
      promise: 'promise',                                                                                              // 651
      storedText: 'stored-text'                                                                                        // 652
    },                                                                                                                 // 650
    // change class on state                                                                                           // 655
    className: {                                                                                                       // 656
      active: 'active',                                                                                                // 657
      disabled: 'disabled',                                                                                            // 658
      error: 'error',                                                                                                  // 659
      loading: 'loading',                                                                                              // 660
      success: 'success',                                                                                              // 661
      warning: 'warning'                                                                                               // 662
    },                                                                                                                 // 656
    selector: {                                                                                                        // 665
      // selector for text node                                                                                        // 666
      text: false                                                                                                      // 667
    },                                                                                                                 // 665
    defaults: {                                                                                                        // 670
      input: {                                                                                                         // 671
        disabled: true,                                                                                                // 672
        loading: true,                                                                                                 // 673
        active: true                                                                                                   // 674
      },                                                                                                               // 671
      button: {                                                                                                        // 676
        disabled: true,                                                                                                // 677
        loading: true,                                                                                                 // 678
        active: true                                                                                                   // 679
      },                                                                                                               // 676
      progress: {                                                                                                      // 681
        active: true,                                                                                                  // 682
        success: true,                                                                                                 // 683
        warning: true,                                                                                                 // 684
        error: true                                                                                                    // 685
      }                                                                                                                // 681
    },                                                                                                                 // 670
    states: {                                                                                                          // 689
      active: true,                                                                                                    // 690
      disabled: true,                                                                                                  // 691
      error: true,                                                                                                     // 692
      loading: true,                                                                                                   // 693
      success: true,                                                                                                   // 694
      warning: true                                                                                                    // 695
    },                                                                                                                 // 689
    text: {                                                                                                            // 698
      disabled: false,                                                                                                 // 699
      flash: false,                                                                                                    // 700
      hover: false,                                                                                                    // 701
      active: false,                                                                                                   // 702
      inactive: false,                                                                                                 // 703
      activate: false,                                                                                                 // 704
      deactivate: false                                                                                                // 705
    }                                                                                                                  // 698
  };                                                                                                                   // 600
})(jQuery, window, document);                                                                                          // 712
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"visibility.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/behaviors/visibility.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Visibility                                                                                       //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.visibility = function (parameters) {                                                                            // 26
    var $allModules = $(this),                                                                                         // 27
        moduleSelector = $allModules.selector || '',                                                                   // 27
        time = new Date().getTime(),                                                                                   // 27
        performance = [],                                                                                              // 27
        query = arguments[0],                                                                                          // 27
        methodInvoked = typeof query == 'string',                                                                      // 27
        queryArguments = [].slice.call(arguments, 1),                                                                  // 27
        returnedValue,                                                                                                 // 27
        moduleCount = $allModules.length,                                                                              // 27
        loadedCount = 0;                                                                                               // 27
    $allModules.each(function () {                                                                                     // 43
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.visibility.settings, parameters) : $.extend({}, $.fn.visibility.settings),
          className = settings.className,                                                                              // 45
          namespace = settings.namespace,                                                                              // 45
          error = settings.error,                                                                                      // 45
          metadata = settings.metadata,                                                                                // 45
          eventNamespace = '.' + namespace,                                                                            // 45
          moduleNamespace = 'module-' + namespace,                                                                     // 45
          $window = $(window),                                                                                         // 45
          $module = $(this),                                                                                           // 45
          $context = $(settings.context),                                                                              // 45
          $placeholder,                                                                                                // 45
          selector = $module.selector || '',                                                                           // 45
          instance = $module.data(moduleNamespace),                                                                    // 45
          requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
        setTimeout(callback, 0);                                                                                       // 72
      },                                                                                                               // 72
          element = this,                                                                                              // 45
          disabled = false,                                                                                            // 45
          contextObserver,                                                                                             // 45
          observer,                                                                                                    // 45
          module;                                                                                                      // 45
                                                                                                                       //
      module = {                                                                                                       // 82
        initialize: function () {                                                                                      // 84
          module.debug('Initializing', settings);                                                                      // 85
          module.setup.cache();                                                                                        // 87
                                                                                                                       //
          if (module.should.trackChanges()) {                                                                          // 89
            if (settings.type == 'image') {                                                                            // 91
              module.setup.image();                                                                                    // 92
            }                                                                                                          // 93
                                                                                                                       //
            if (settings.type == 'fixed') {                                                                            // 94
              module.setup.fixed();                                                                                    // 95
            }                                                                                                          // 96
                                                                                                                       //
            if (settings.observeChanges) {                                                                             // 98
              module.observeChanges();                                                                                 // 99
            }                                                                                                          // 100
                                                                                                                       //
            module.bind.events();                                                                                      // 101
          }                                                                                                            // 102
                                                                                                                       //
          module.save.position();                                                                                      // 104
                                                                                                                       //
          if (!module.is.visible()) {                                                                                  // 105
            module.error(error.visible, $module);                                                                      // 106
          }                                                                                                            // 107
                                                                                                                       //
          if (settings.initialCheck) {                                                                                 // 109
            module.checkVisibility();                                                                                  // 110
          }                                                                                                            // 111
                                                                                                                       //
          module.instantiate();                                                                                        // 112
        },                                                                                                             // 113
        instantiate: function () {                                                                                     // 115
          module.debug('Storing instance', module);                                                                    // 116
          $module.data(moduleNamespace, module);                                                                       // 117
          instance = module;                                                                                           // 120
        },                                                                                                             // 121
        destroy: function () {                                                                                         // 123
          module.verbose('Destroying previous module');                                                                // 124
                                                                                                                       //
          if (observer) {                                                                                              // 125
            observer.disconnect();                                                                                     // 126
          }                                                                                                            // 127
                                                                                                                       //
          if (contextObserver) {                                                                                       // 128
            contextObserver.disconnect();                                                                              // 129
          }                                                                                                            // 130
                                                                                                                       //
          $window.off('load' + eventNamespace, module.event.load).off('resize' + eventNamespace, module.event.resize);
          $context.off('scroll' + eventNamespace, module.event.scroll).off('scrollchange' + eventNamespace, module.event.scrollchange);
                                                                                                                       //
          if (settings.type == 'fixed') {                                                                              // 139
            module.resetFixed();                                                                                       // 140
            module.remove.placeholder();                                                                               // 141
          }                                                                                                            // 142
                                                                                                                       //
          $module.off(eventNamespace).removeData(moduleNamespace);                                                     // 143
        },                                                                                                             // 147
        observeChanges: function () {                                                                                  // 149
          if ('MutationObserver' in window) {                                                                          // 150
            contextObserver = new MutationObserver(module.event.contextChanged);                                       // 151
            observer = new MutationObserver(module.event.changed);                                                     // 152
            contextObserver.observe(document, {                                                                        // 153
              childList: true,                                                                                         // 154
              subtree: true                                                                                            // 155
            });                                                                                                        // 153
            observer.observe(element, {                                                                                // 157
              childList: true,                                                                                         // 158
              subtree: true                                                                                            // 159
            });                                                                                                        // 157
            module.debug('Setting up mutation observer', observer);                                                    // 161
          }                                                                                                            // 162
        },                                                                                                             // 163
        bind: {                                                                                                        // 165
          events: function () {                                                                                        // 166
            module.verbose('Binding visibility events to scroll and resize');                                          // 167
                                                                                                                       //
            if (settings.refreshOnLoad) {                                                                              // 168
              $window.on('load' + eventNamespace, module.event.load);                                                  // 169
            }                                                                                                          // 172
                                                                                                                       //
            $window.on('resize' + eventNamespace, module.event.resize); // pub/sub pattern                             // 173
                                                                                                                       //
            $context.off('scroll' + eventNamespace).on('scroll' + eventNamespace, module.event.scroll).on('scrollchange' + eventNamespace, module.event.scrollchange);
          }                                                                                                            // 182
        },                                                                                                             // 165
        event: {                                                                                                       // 185
          changed: function (mutations) {                                                                              // 186
            module.verbose('DOM tree modified, updating visibility calculations');                                     // 187
            module.timer = setTimeout(function () {                                                                    // 188
              module.verbose('DOM tree modified, updating sticky menu');                                               // 189
              module.refresh();                                                                                        // 190
            }, 100);                                                                                                   // 191
          },                                                                                                           // 192
          contextChanged: function (mutations) {                                                                       // 193
            [].forEach.call(mutations, function (mutation) {                                                           // 194
              if (mutation.removedNodes) {                                                                             // 195
                [].forEach.call(mutation.removedNodes, function (node) {                                               // 196
                  if (node == element || $(node).find(element).length > 0) {                                           // 197
                    module.debug('Element removed from DOM, tearing down events');                                     // 198
                    module.destroy();                                                                                  // 199
                  }                                                                                                    // 200
                });                                                                                                    // 201
              }                                                                                                        // 202
            });                                                                                                        // 203
          },                                                                                                           // 204
          resize: function () {                                                                                        // 205
            module.debug('Window resized');                                                                            // 206
                                                                                                                       //
            if (settings.refreshOnResize) {                                                                            // 207
              requestAnimationFrame(module.refresh);                                                                   // 208
            }                                                                                                          // 209
          },                                                                                                           // 210
          load: function () {                                                                                          // 211
            module.debug('Page finished loading');                                                                     // 212
            requestAnimationFrame(module.refresh);                                                                     // 213
          },                                                                                                           // 214
          // publishes scrollchange event on one scroll                                                                // 215
          scroll: function () {                                                                                        // 216
            if (settings.throttle) {                                                                                   // 217
              clearTimeout(module.timer);                                                                              // 218
              module.timer = setTimeout(function () {                                                                  // 219
                $context.triggerHandler('scrollchange' + eventNamespace, [$context.scrollTop()]);                      // 220
              }, settings.throttle);                                                                                   // 221
            } else {                                                                                                   // 222
              requestAnimationFrame(function () {                                                                      // 224
                $context.triggerHandler('scrollchange' + eventNamespace, [$context.scrollTop()]);                      // 225
              });                                                                                                      // 226
            }                                                                                                          // 227
          },                                                                                                           // 228
          // subscribes to scrollchange                                                                                // 229
          scrollchange: function (event, scrollPosition) {                                                             // 230
            module.checkVisibility(scrollPosition);                                                                    // 231
          }                                                                                                            // 232
        },                                                                                                             // 185
        precache: function (images, callback) {                                                                        // 235
          if (!(images instanceof Array)) {                                                                            // 236
            images = [images];                                                                                         // 237
          }                                                                                                            // 238
                                                                                                                       //
          var imagesLength = images.length,                                                                            // 239
              loadedCounter = 0,                                                                                       // 239
              cache = [],                                                                                              // 239
              cacheImage = document.createElement('img'),                                                              // 239
              handleLoad = function () {                                                                               // 239
            loadedCounter++;                                                                                           // 245
                                                                                                                       //
            if (loadedCounter >= images.length) {                                                                      // 246
              if ($.isFunction(callback)) {                                                                            // 247
                callback();                                                                                            // 248
              }                                                                                                        // 249
            }                                                                                                          // 250
          };                                                                                                           // 251
                                                                                                                       //
          while (imagesLength--) {                                                                                     // 253
            cacheImage = document.createElement('img');                                                                // 254
            cacheImage.onload = handleLoad;                                                                            // 255
            cacheImage.onerror = handleLoad;                                                                           // 256
            cacheImage.src = images[imagesLength];                                                                     // 257
            cache.push(cacheImage);                                                                                    // 258
          }                                                                                                            // 259
        },                                                                                                             // 260
        enableCallbacks: function () {                                                                                 // 262
          module.debug('Allowing callbacks to occur');                                                                 // 263
          disabled = false;                                                                                            // 264
        },                                                                                                             // 265
        disableCallbacks: function () {                                                                                // 267
          module.debug('Disabling all callbacks temporarily');                                                         // 268
          disabled = true;                                                                                             // 269
        },                                                                                                             // 270
        should: {                                                                                                      // 272
          trackChanges: function () {                                                                                  // 273
            if (methodInvoked) {                                                                                       // 274
              module.debug('One time query, no need to bind events');                                                  // 275
              return false;                                                                                            // 276
            }                                                                                                          // 277
                                                                                                                       //
            module.debug('Callbacks being attached');                                                                  // 278
            return true;                                                                                               // 279
          }                                                                                                            // 280
        },                                                                                                             // 272
        setup: {                                                                                                       // 283
          cache: function () {                                                                                         // 284
            module.cache = {                                                                                           // 285
              occurred: {},                                                                                            // 286
              screen: {},                                                                                              // 287
              element: {}                                                                                              // 288
            };                                                                                                         // 285
          },                                                                                                           // 290
          image: function () {                                                                                         // 291
            var src = $module.data(metadata.src);                                                                      // 292
                                                                                                                       //
            if (src) {                                                                                                 // 295
              module.verbose('Lazy loading image', src);                                                               // 296
              settings.once = true;                                                                                    // 297
              settings.observeChanges = false; // show when top visible                                                // 298
                                                                                                                       //
              settings.onOnScreen = function () {                                                                      // 301
                module.debug('Image on screen', element);                                                              // 302
                module.precache(src, function () {                                                                     // 303
                  module.set.image(src, function () {                                                                  // 304
                    loadedCount++;                                                                                     // 305
                                                                                                                       //
                    if (loadedCount == moduleCount) {                                                                  // 306
                      settings.onAllLoaded.call(this);                                                                 // 307
                    }                                                                                                  // 308
                                                                                                                       //
                    settings.onLoad.call(this);                                                                        // 309
                  });                                                                                                  // 310
                });                                                                                                    // 311
              };                                                                                                       // 312
            }                                                                                                          // 313
          },                                                                                                           // 314
          fixed: function () {                                                                                         // 315
            module.debug('Setting up fixed');                                                                          // 316
            settings.once = false;                                                                                     // 317
            settings.observeChanges = false;                                                                           // 318
            settings.initialCheck = true;                                                                              // 319
            settings.refreshOnLoad = true;                                                                             // 320
                                                                                                                       //
            if (!parameters.transition) {                                                                              // 321
              settings.transition = false;                                                                             // 322
            }                                                                                                          // 323
                                                                                                                       //
            module.create.placeholder();                                                                               // 324
            module.debug('Added placeholder', $placeholder);                                                           // 325
                                                                                                                       //
            settings.onTopPassed = function () {                                                                       // 326
              module.debug('Element passed, adding fixed position', $module);                                          // 327
              module.show.placeholder();                                                                               // 328
              module.set.fixed();                                                                                      // 329
                                                                                                                       //
              if (settings.transition) {                                                                               // 330
                if ($.fn.transition !== undefined) {                                                                   // 331
                  $module.transition(settings.transition, settings.duration);                                          // 332
                }                                                                                                      // 333
              }                                                                                                        // 334
            };                                                                                                         // 335
                                                                                                                       //
            settings.onTopPassedReverse = function () {                                                                // 336
              module.debug('Element returned to position, removing fixed', $module);                                   // 337
              module.hide.placeholder();                                                                               // 338
              module.remove.fixed();                                                                                   // 339
            };                                                                                                         // 340
          }                                                                                                            // 341
        },                                                                                                             // 283
        create: {                                                                                                      // 344
          placeholder: function () {                                                                                   // 345
            module.verbose('Creating fixed position placeholder');                                                     // 346
            $placeholder = $module.clone(false).css('display', 'none').addClass(className.placeholder).insertAfter($module);
          }                                                                                                            // 353
        },                                                                                                             // 344
        show: {                                                                                                        // 356
          placeholder: function () {                                                                                   // 357
            module.verbose('Showing placeholder');                                                                     // 358
            $placeholder.css('display', 'block').css('visibility', 'hidden');                                          // 359
          }                                                                                                            // 363
        },                                                                                                             // 356
        hide: {                                                                                                        // 365
          placeholder: function () {                                                                                   // 366
            module.verbose('Hiding placeholder');                                                                      // 367
            $placeholder.css('display', 'none').css('visibility', '');                                                 // 368
          }                                                                                                            // 372
        },                                                                                                             // 365
        set: {                                                                                                         // 375
          fixed: function () {                                                                                         // 376
            module.verbose('Setting element to fixed position');                                                       // 377
            $module.addClass(className.fixed).css({                                                                    // 378
              position: 'fixed',                                                                                       // 381
              top: settings.offset + 'px',                                                                             // 382
              left: 'auto',                                                                                            // 383
              zIndex: settings.zIndex                                                                                  // 384
            });                                                                                                        // 380
            settings.onFixed.call(element);                                                                            // 387
          },                                                                                                           // 388
          image: function (src, callback) {                                                                            // 389
            $module.attr('src', src);                                                                                  // 390
                                                                                                                       //
            if (settings.transition) {                                                                                 // 393
              if ($.fn.transition !== undefined) {                                                                     // 394
                $module.transition(settings.transition, settings.duration, callback);                                  // 395
              } else {                                                                                                 // 396
                $module.fadeIn(settings.duration, callback);                                                           // 398
              }                                                                                                        // 399
            } else {                                                                                                   // 400
              $module.show();                                                                                          // 402
            }                                                                                                          // 403
          }                                                                                                            // 404
        },                                                                                                             // 375
        is: {                                                                                                          // 407
          onScreen: function () {                                                                                      // 408
            var calculations = module.get.elementCalculations();                                                       // 409
            return calculations.onScreen;                                                                              // 412
          },                                                                                                           // 413
          offScreen: function () {                                                                                     // 414
            var calculations = module.get.elementCalculations();                                                       // 415
            return calculations.offScreen;                                                                             // 418
          },                                                                                                           // 419
          visible: function () {                                                                                       // 420
            if (module.cache && module.cache.element) {                                                                // 421
              return !(module.cache.element.width === 0 && module.cache.element.offset.top === 0);                     // 422
            }                                                                                                          // 423
                                                                                                                       //
            return false;                                                                                              // 424
          }                                                                                                            // 425
        },                                                                                                             // 407
        refresh: function () {                                                                                         // 428
          module.debug('Refreshing constants (width/height)');                                                         // 429
                                                                                                                       //
          if (settings.type == 'fixed') {                                                                              // 430
            module.resetFixed();                                                                                       // 431
          }                                                                                                            // 432
                                                                                                                       //
          module.reset();                                                                                              // 433
          module.save.position();                                                                                      // 434
                                                                                                                       //
          if (settings.checkOnRefresh) {                                                                               // 435
            module.checkVisibility();                                                                                  // 436
          }                                                                                                            // 437
                                                                                                                       //
          settings.onRefresh.call(element);                                                                            // 438
        },                                                                                                             // 439
        resetFixed: function () {                                                                                      // 441
          module.remove.fixed();                                                                                       // 442
          module.remove.occurred();                                                                                    // 443
        },                                                                                                             // 444
        reset: function () {                                                                                           // 446
          module.verbose('Resetting all cached values');                                                               // 447
                                                                                                                       //
          if ($.isPlainObject(module.cache)) {                                                                         // 448
            module.cache.screen = {};                                                                                  // 449
            module.cache.element = {};                                                                                 // 450
          }                                                                                                            // 451
        },                                                                                                             // 452
        checkVisibility: function (scroll) {                                                                           // 454
          module.verbose('Checking visibility of element', module.cache.element);                                      // 455
                                                                                                                       //
          if (!disabled && module.is.visible()) {                                                                      // 457
            // save scroll position                                                                                    // 459
            module.save.scroll(scroll); // update calculations derived from scroll                                     // 460
                                                                                                                       //
            module.save.calculations(); // percentage                                                                  // 463
                                                                                                                       //
            module.passed(); // reverse (must be first)                                                                // 466
                                                                                                                       //
            module.passingReverse();                                                                                   // 469
            module.topVisibleReverse();                                                                                // 470
            module.bottomVisibleReverse();                                                                             // 471
            module.topPassedReverse();                                                                                 // 472
            module.bottomPassedReverse(); // one time                                                                  // 473
                                                                                                                       //
            module.onScreen();                                                                                         // 476
            module.offScreen();                                                                                        // 477
            module.passing();                                                                                          // 478
            module.topVisible();                                                                                       // 479
            module.bottomVisible();                                                                                    // 480
            module.topPassed();                                                                                        // 481
            module.bottomPassed(); // on update callback                                                               // 482
                                                                                                                       //
            if (settings.onUpdate) {                                                                                   // 485
              settings.onUpdate.call(element, module.get.elementCalculations());                                       // 486
            }                                                                                                          // 487
          }                                                                                                            // 488
        },                                                                                                             // 489
        passed: function (amount, newCallback) {                                                                       // 491
          var calculations = module.get.elementCalculations(),                                                         // 492
              amountInPixels; // assign callback                                                                       // 492
                                                                                                                       //
          if (amount && newCallback) {                                                                                 // 497
            settings.onPassed[amount] = newCallback;                                                                   // 498
          } else if (amount !== undefined) {                                                                           // 499
            return module.get.pixelsPassed(amount) > calculations.pixelsPassed;                                        // 501
          } else if (calculations.passing) {                                                                           // 502
            $.each(settings.onPassed, function (amount, callback) {                                                    // 504
              if (calculations.bottomVisible || calculations.pixelsPassed > module.get.pixelsPassed(amount)) {         // 505
                module.execute(callback, amount);                                                                      // 506
              } else if (!settings.once) {                                                                             // 507
                module.remove.occurred(callback);                                                                      // 509
              }                                                                                                        // 510
            });                                                                                                        // 511
          }                                                                                                            // 512
        },                                                                                                             // 513
        onScreen: function (newCallback) {                                                                             // 515
          var calculations = module.get.elementCalculations(),                                                         // 516
              callback = newCallback || settings.onOnScreen,                                                           // 516
              callbackName = 'onScreen';                                                                               // 516
                                                                                                                       //
          if (newCallback) {                                                                                           // 521
            module.debug('Adding callback for onScreen', newCallback);                                                 // 522
            settings.onOnScreen = newCallback;                                                                         // 523
          }                                                                                                            // 524
                                                                                                                       //
          if (calculations.onScreen) {                                                                                 // 525
            module.execute(callback, callbackName);                                                                    // 526
          } else if (!settings.once) {                                                                                 // 527
            module.remove.occurred(callbackName);                                                                      // 529
          }                                                                                                            // 530
                                                                                                                       //
          if (newCallback !== undefined) {                                                                             // 531
            return calculations.onOnScreen;                                                                            // 532
          }                                                                                                            // 533
        },                                                                                                             // 534
        offScreen: function (newCallback) {                                                                            // 536
          var calculations = module.get.elementCalculations(),                                                         // 537
              callback = newCallback || settings.onOffScreen,                                                          // 537
              callbackName = 'offScreen';                                                                              // 537
                                                                                                                       //
          if (newCallback) {                                                                                           // 542
            module.debug('Adding callback for offScreen', newCallback);                                                // 543
            settings.onOffScreen = newCallback;                                                                        // 544
          }                                                                                                            // 545
                                                                                                                       //
          if (calculations.offScreen) {                                                                                // 546
            module.execute(callback, callbackName);                                                                    // 547
          } else if (!settings.once) {                                                                                 // 548
            module.remove.occurred(callbackName);                                                                      // 550
          }                                                                                                            // 551
                                                                                                                       //
          if (newCallback !== undefined) {                                                                             // 552
            return calculations.onOffScreen;                                                                           // 553
          }                                                                                                            // 554
        },                                                                                                             // 555
        passing: function (newCallback) {                                                                              // 557
          var calculations = module.get.elementCalculations(),                                                         // 558
              callback = newCallback || settings.onPassing,                                                            // 558
              callbackName = 'passing';                                                                                // 558
                                                                                                                       //
          if (newCallback) {                                                                                           // 563
            module.debug('Adding callback for passing', newCallback);                                                  // 564
            settings.onPassing = newCallback;                                                                          // 565
          }                                                                                                            // 566
                                                                                                                       //
          if (calculations.passing) {                                                                                  // 567
            module.execute(callback, callbackName);                                                                    // 568
          } else if (!settings.once) {                                                                                 // 569
            module.remove.occurred(callbackName);                                                                      // 571
          }                                                                                                            // 572
                                                                                                                       //
          if (newCallback !== undefined) {                                                                             // 573
            return calculations.passing;                                                                               // 574
          }                                                                                                            // 575
        },                                                                                                             // 576
        topVisible: function (newCallback) {                                                                           // 579
          var calculations = module.get.elementCalculations(),                                                         // 580
              callback = newCallback || settings.onTopVisible,                                                         // 580
              callbackName = 'topVisible';                                                                             // 580
                                                                                                                       //
          if (newCallback) {                                                                                           // 585
            module.debug('Adding callback for top visible', newCallback);                                              // 586
            settings.onTopVisible = newCallback;                                                                       // 587
          }                                                                                                            // 588
                                                                                                                       //
          if (calculations.topVisible) {                                                                               // 589
            module.execute(callback, callbackName);                                                                    // 590
          } else if (!settings.once) {                                                                                 // 591
            module.remove.occurred(callbackName);                                                                      // 593
          }                                                                                                            // 594
                                                                                                                       //
          if (newCallback === undefined) {                                                                             // 595
            return calculations.topVisible;                                                                            // 596
          }                                                                                                            // 597
        },                                                                                                             // 598
        bottomVisible: function (newCallback) {                                                                        // 600
          var calculations = module.get.elementCalculations(),                                                         // 601
              callback = newCallback || settings.onBottomVisible,                                                      // 601
              callbackName = 'bottomVisible';                                                                          // 601
                                                                                                                       //
          if (newCallback) {                                                                                           // 606
            module.debug('Adding callback for bottom visible', newCallback);                                           // 607
            settings.onBottomVisible = newCallback;                                                                    // 608
          }                                                                                                            // 609
                                                                                                                       //
          if (calculations.bottomVisible) {                                                                            // 610
            module.execute(callback, callbackName);                                                                    // 611
          } else if (!settings.once) {                                                                                 // 612
            module.remove.occurred(callbackName);                                                                      // 614
          }                                                                                                            // 615
                                                                                                                       //
          if (newCallback === undefined) {                                                                             // 616
            return calculations.bottomVisible;                                                                         // 617
          }                                                                                                            // 618
        },                                                                                                             // 619
        topPassed: function (newCallback) {                                                                            // 621
          var calculations = module.get.elementCalculations(),                                                         // 622
              callback = newCallback || settings.onTopPassed,                                                          // 622
              callbackName = 'topPassed';                                                                              // 622
                                                                                                                       //
          if (newCallback) {                                                                                           // 627
            module.debug('Adding callback for top passed', newCallback);                                               // 628
            settings.onTopPassed = newCallback;                                                                        // 629
          }                                                                                                            // 630
                                                                                                                       //
          if (calculations.topPassed) {                                                                                // 631
            module.execute(callback, callbackName);                                                                    // 632
          } else if (!settings.once) {                                                                                 // 633
            module.remove.occurred(callbackName);                                                                      // 635
          }                                                                                                            // 636
                                                                                                                       //
          if (newCallback === undefined) {                                                                             // 637
            return calculations.topPassed;                                                                             // 638
          }                                                                                                            // 639
        },                                                                                                             // 640
        bottomPassed: function (newCallback) {                                                                         // 642
          var calculations = module.get.elementCalculations(),                                                         // 643
              callback = newCallback || settings.onBottomPassed,                                                       // 643
              callbackName = 'bottomPassed';                                                                           // 643
                                                                                                                       //
          if (newCallback) {                                                                                           // 648
            module.debug('Adding callback for bottom passed', newCallback);                                            // 649
            settings.onBottomPassed = newCallback;                                                                     // 650
          }                                                                                                            // 651
                                                                                                                       //
          if (calculations.bottomPassed) {                                                                             // 652
            module.execute(callback, callbackName);                                                                    // 653
          } else if (!settings.once) {                                                                                 // 654
            module.remove.occurred(callbackName);                                                                      // 656
          }                                                                                                            // 657
                                                                                                                       //
          if (newCallback === undefined) {                                                                             // 658
            return calculations.bottomPassed;                                                                          // 659
          }                                                                                                            // 660
        },                                                                                                             // 661
        passingReverse: function (newCallback) {                                                                       // 663
          var calculations = module.get.elementCalculations(),                                                         // 664
              callback = newCallback || settings.onPassingReverse,                                                     // 664
              callbackName = 'passingReverse';                                                                         // 664
                                                                                                                       //
          if (newCallback) {                                                                                           // 669
            module.debug('Adding callback for passing reverse', newCallback);                                          // 670
            settings.onPassingReverse = newCallback;                                                                   // 671
          }                                                                                                            // 672
                                                                                                                       //
          if (!calculations.passing) {                                                                                 // 673
            if (module.get.occurred('passing')) {                                                                      // 674
              module.execute(callback, callbackName);                                                                  // 675
            }                                                                                                          // 676
          } else if (!settings.once) {                                                                                 // 677
            module.remove.occurred(callbackName);                                                                      // 679
          }                                                                                                            // 680
                                                                                                                       //
          if (newCallback !== undefined) {                                                                             // 681
            return !calculations.passing;                                                                              // 682
          }                                                                                                            // 683
        },                                                                                                             // 684
        topVisibleReverse: function (newCallback) {                                                                    // 687
          var calculations = module.get.elementCalculations(),                                                         // 688
              callback = newCallback || settings.onTopVisibleReverse,                                                  // 688
              callbackName = 'topVisibleReverse';                                                                      // 688
                                                                                                                       //
          if (newCallback) {                                                                                           // 693
            module.debug('Adding callback for top visible reverse', newCallback);                                      // 694
            settings.onTopVisibleReverse = newCallback;                                                                // 695
          }                                                                                                            // 696
                                                                                                                       //
          if (!calculations.topVisible) {                                                                              // 697
            if (module.get.occurred('topVisible')) {                                                                   // 698
              module.execute(callback, callbackName);                                                                  // 699
            }                                                                                                          // 700
          } else if (!settings.once) {                                                                                 // 701
            module.remove.occurred(callbackName);                                                                      // 703
          }                                                                                                            // 704
                                                                                                                       //
          if (newCallback === undefined) {                                                                             // 705
            return !calculations.topVisible;                                                                           // 706
          }                                                                                                            // 707
        },                                                                                                             // 708
        bottomVisibleReverse: function (newCallback) {                                                                 // 710
          var calculations = module.get.elementCalculations(),                                                         // 711
              callback = newCallback || settings.onBottomVisibleReverse,                                               // 711
              callbackName = 'bottomVisibleReverse';                                                                   // 711
                                                                                                                       //
          if (newCallback) {                                                                                           // 716
            module.debug('Adding callback for bottom visible reverse', newCallback);                                   // 717
            settings.onBottomVisibleReverse = newCallback;                                                             // 718
          }                                                                                                            // 719
                                                                                                                       //
          if (!calculations.bottomVisible) {                                                                           // 720
            if (module.get.occurred('bottomVisible')) {                                                                // 721
              module.execute(callback, callbackName);                                                                  // 722
            }                                                                                                          // 723
          } else if (!settings.once) {                                                                                 // 724
            module.remove.occurred(callbackName);                                                                      // 726
          }                                                                                                            // 727
                                                                                                                       //
          if (newCallback === undefined) {                                                                             // 728
            return !calculations.bottomVisible;                                                                        // 729
          }                                                                                                            // 730
        },                                                                                                             // 731
        topPassedReverse: function (newCallback) {                                                                     // 733
          var calculations = module.get.elementCalculations(),                                                         // 734
              callback = newCallback || settings.onTopPassedReverse,                                                   // 734
              callbackName = 'topPassedReverse';                                                                       // 734
                                                                                                                       //
          if (newCallback) {                                                                                           // 739
            module.debug('Adding callback for top passed reverse', newCallback);                                       // 740
            settings.onTopPassedReverse = newCallback;                                                                 // 741
          }                                                                                                            // 742
                                                                                                                       //
          if (!calculations.topPassed) {                                                                               // 743
            if (module.get.occurred('topPassed')) {                                                                    // 744
              module.execute(callback, callbackName);                                                                  // 745
            }                                                                                                          // 746
          } else if (!settings.once) {                                                                                 // 747
            module.remove.occurred(callbackName);                                                                      // 749
          }                                                                                                            // 750
                                                                                                                       //
          if (newCallback === undefined) {                                                                             // 751
            return !calculations.onTopPassed;                                                                          // 752
          }                                                                                                            // 753
        },                                                                                                             // 754
        bottomPassedReverse: function (newCallback) {                                                                  // 756
          var calculations = module.get.elementCalculations(),                                                         // 757
              callback = newCallback || settings.onBottomPassedReverse,                                                // 757
              callbackName = 'bottomPassedReverse';                                                                    // 757
                                                                                                                       //
          if (newCallback) {                                                                                           // 762
            module.debug('Adding callback for bottom passed reverse', newCallback);                                    // 763
            settings.onBottomPassedReverse = newCallback;                                                              // 764
          }                                                                                                            // 765
                                                                                                                       //
          if (!calculations.bottomPassed) {                                                                            // 766
            if (module.get.occurred('bottomPassed')) {                                                                 // 767
              module.execute(callback, callbackName);                                                                  // 768
            }                                                                                                          // 769
          } else if (!settings.once) {                                                                                 // 770
            module.remove.occurred(callbackName);                                                                      // 772
          }                                                                                                            // 773
                                                                                                                       //
          if (newCallback === undefined) {                                                                             // 774
            return !calculations.bottomPassed;                                                                         // 775
          }                                                                                                            // 776
        },                                                                                                             // 777
        execute: function (callback, callbackName) {                                                                   // 779
          var calculations = module.get.elementCalculations(),                                                         // 780
              screen = module.get.screenCalculations();                                                                // 780
          callback = callback || false;                                                                                // 784
                                                                                                                       //
          if (callback) {                                                                                              // 785
            if (settings.continuous) {                                                                                 // 786
              module.debug('Callback being called continuously', callbackName, calculations);                          // 787
              callback.call(element, calculations, screen);                                                            // 788
            } else if (!module.get.occurred(callbackName)) {                                                           // 789
              module.debug('Conditions met', callbackName, calculations);                                              // 791
              callback.call(element, calculations, screen);                                                            // 792
            }                                                                                                          // 793
          }                                                                                                            // 794
                                                                                                                       //
          module.save.occurred(callbackName);                                                                          // 795
        },                                                                                                             // 796
        remove: {                                                                                                      // 798
          fixed: function () {                                                                                         // 799
            module.debug('Removing fixed position');                                                                   // 800
            $module.removeClass(className.fixed).css({                                                                 // 801
              position: '',                                                                                            // 804
              top: '',                                                                                                 // 805
              left: '',                                                                                                // 806
              zIndex: ''                                                                                               // 807
            });                                                                                                        // 803
            settings.onUnfixed.call(element);                                                                          // 810
          },                                                                                                           // 811
          placeholder: function () {                                                                                   // 812
            module.debug('Removing placeholder content');                                                              // 813
                                                                                                                       //
            if ($placeholder) {                                                                                        // 814
              $placeholder.remove();                                                                                   // 815
            }                                                                                                          // 816
          },                                                                                                           // 817
          occurred: function (callback) {                                                                              // 818
            if (callback) {                                                                                            // 819
              var occurred = module.cache.occurred;                                                                    // 820
                                                                                                                       //
              if (occurred[callback] !== undefined && occurred[callback] === true) {                                   // 823
                module.debug('Callback can now be called again', callback);                                            // 824
                module.cache.occurred[callback] = false;                                                               // 825
              }                                                                                                        // 826
            } else {                                                                                                   // 827
              module.cache.occurred = {};                                                                              // 829
            }                                                                                                          // 830
          }                                                                                                            // 831
        },                                                                                                             // 798
        save: {                                                                                                        // 834
          calculations: function () {                                                                                  // 835
            module.verbose('Saving all calculations necessary to determine positioning');                              // 836
            module.save.direction();                                                                                   // 837
            module.save.screenCalculations();                                                                          // 838
            module.save.elementCalculations();                                                                         // 839
          },                                                                                                           // 840
          occurred: function (callback) {                                                                              // 841
            if (callback) {                                                                                            // 842
              if (module.cache.occurred[callback] === undefined || module.cache.occurred[callback] !== true) {         // 843
                module.verbose('Saving callback occurred', callback);                                                  // 844
                module.cache.occurred[callback] = true;                                                                // 845
              }                                                                                                        // 846
            }                                                                                                          // 847
          },                                                                                                           // 848
          scroll: function (scrollPosition) {                                                                          // 849
            scrollPosition = scrollPosition + settings.offset || $context.scrollTop() + settings.offset;               // 850
            module.cache.scroll = scrollPosition;                                                                      // 851
          },                                                                                                           // 852
          direction: function () {                                                                                     // 853
            var scroll = module.get.scroll(),                                                                          // 854
                lastScroll = module.get.lastScroll(),                                                                  // 854
                direction;                                                                                             // 854
                                                                                                                       //
            if (scroll > lastScroll && lastScroll) {                                                                   // 859
              direction = 'down';                                                                                      // 860
            } else if (scroll < lastScroll && lastScroll) {                                                            // 861
              direction = 'up';                                                                                        // 863
            } else {                                                                                                   // 864
              direction = 'static';                                                                                    // 866
            }                                                                                                          // 867
                                                                                                                       //
            module.cache.direction = direction;                                                                        // 868
            return module.cache.direction;                                                                             // 869
          },                                                                                                           // 870
          elementPosition: function () {                                                                               // 871
            var element = module.cache.element,                                                                        // 872
                screen = module.get.screenSize();                                                                      // 872
            module.verbose('Saving element position'); // (quicker than $.extend)                                      // 876
                                                                                                                       //
            element.fits = element.height < screen.height;                                                             // 878
            element.offset = $module.offset();                                                                         // 879
            element.width = $module.outerWidth();                                                                      // 880
            element.height = $module.outerHeight(); // store                                                           // 881
                                                                                                                       //
            module.cache.element = element;                                                                            // 883
            return element;                                                                                            // 884
          },                                                                                                           // 885
          elementCalculations: function () {                                                                           // 886
            var screen = module.get.screenCalculations(),                                                              // 887
                element = module.get.elementPosition(); // offset                                                      // 887
                                                                                                                       //
            if (settings.includeMargin) {                                                                              // 892
              element.margin = {};                                                                                     // 893
              element.margin.top = parseInt($module.css('margin-top'), 10);                                            // 894
              element.margin.bottom = parseInt($module.css('margin-bottom'), 10);                                      // 895
              element.top = element.offset.top - element.margin.top;                                                   // 896
              element.bottom = element.offset.top + element.height + element.margin.bottom;                            // 897
            } else {                                                                                                   // 898
              element.top = element.offset.top;                                                                        // 900
              element.bottom = element.offset.top + element.height;                                                    // 901
            } // visibility                                                                                            // 902
                                                                                                                       //
                                                                                                                       //
            element.topVisible = screen.bottom >= element.top;                                                         // 905
            element.topPassed = screen.top >= element.top;                                                             // 906
            element.bottomVisible = screen.bottom >= element.bottom;                                                   // 907
            element.bottomPassed = screen.top >= element.bottom;                                                       // 908
            element.pixelsPassed = 0;                                                                                  // 909
            element.percentagePassed = 0; // meta calculations                                                         // 910
                                                                                                                       //
            element.onScreen = element.topVisible && !element.bottomPassed;                                            // 913
            element.passing = element.topPassed && !element.bottomPassed;                                              // 914
            element.offScreen = !element.onScreen; // passing calculations                                             // 915
                                                                                                                       //
            if (element.passing) {                                                                                     // 918
              element.pixelsPassed = screen.top - element.top;                                                         // 919
              element.percentagePassed = (screen.top - element.top) / element.height;                                  // 920
            }                                                                                                          // 921
                                                                                                                       //
            module.cache.element = element;                                                                            // 922
            module.verbose('Updated element calculations', element);                                                   // 923
            return element;                                                                                            // 924
          },                                                                                                           // 925
          screenCalculations: function () {                                                                            // 926
            var scroll = module.get.scroll();                                                                          // 927
            module.save.direction();                                                                                   // 930
            module.cache.screen.top = scroll;                                                                          // 931
            module.cache.screen.bottom = scroll + module.cache.screen.height;                                          // 932
            return module.cache.screen;                                                                                // 933
          },                                                                                                           // 934
          screenSize: function () {                                                                                    // 935
            module.verbose('Saving window position');                                                                  // 936
            module.cache.screen = {                                                                                    // 937
              height: $context.height()                                                                                // 938
            };                                                                                                         // 937
          },                                                                                                           // 940
          position: function () {                                                                                      // 941
            module.save.screenSize();                                                                                  // 942
            module.save.elementPosition();                                                                             // 943
          }                                                                                                            // 944
        },                                                                                                             // 834
        get: {                                                                                                         // 947
          pixelsPassed: function (amount) {                                                                            // 948
            var element = module.get.elementCalculations();                                                            // 949
                                                                                                                       //
            if (amount.search('%') > -1) {                                                                             // 952
              return element.height * (parseInt(amount, 10) / 100);                                                    // 953
            }                                                                                                          // 954
                                                                                                                       //
            return parseInt(amount, 10);                                                                               // 955
          },                                                                                                           // 956
          occurred: function (callback) {                                                                              // 957
            return module.cache.occurred !== undefined ? module.cache.occurred[callback] || false : false;             // 958
          },                                                                                                           // 962
          direction: function () {                                                                                     // 963
            if (module.cache.direction === undefined) {                                                                // 964
              module.save.direction();                                                                                 // 965
            }                                                                                                          // 966
                                                                                                                       //
            return module.cache.direction;                                                                             // 967
          },                                                                                                           // 968
          elementPosition: function () {                                                                               // 969
            if (module.cache.element === undefined) {                                                                  // 970
              module.save.elementPosition();                                                                           // 971
            }                                                                                                          // 972
                                                                                                                       //
            return module.cache.element;                                                                               // 973
          },                                                                                                           // 974
          elementCalculations: function () {                                                                           // 975
            if (module.cache.element === undefined) {                                                                  // 976
              module.save.elementCalculations();                                                                       // 977
            }                                                                                                          // 978
                                                                                                                       //
            return module.cache.element;                                                                               // 979
          },                                                                                                           // 980
          screenCalculations: function () {                                                                            // 981
            if (module.cache.screen === undefined) {                                                                   // 982
              module.save.screenCalculations();                                                                        // 983
            }                                                                                                          // 984
                                                                                                                       //
            return module.cache.screen;                                                                                // 985
          },                                                                                                           // 986
          screenSize: function () {                                                                                    // 987
            if (module.cache.screen === undefined) {                                                                   // 988
              module.save.screenSize();                                                                                // 989
            }                                                                                                          // 990
                                                                                                                       //
            return module.cache.screen;                                                                                // 991
          },                                                                                                           // 992
          scroll: function () {                                                                                        // 993
            if (module.cache.scroll === undefined) {                                                                   // 994
              module.save.scroll();                                                                                    // 995
            }                                                                                                          // 996
                                                                                                                       //
            return module.cache.scroll;                                                                                // 997
          },                                                                                                           // 998
          lastScroll: function () {                                                                                    // 999
            if (module.cache.screen === undefined) {                                                                   // 1000
              module.debug('First scroll event, no last scroll could be found');                                       // 1001
              return false;                                                                                            // 1002
            }                                                                                                          // 1003
                                                                                                                       //
            return module.cache.screen.top;                                                                            // 1004
          }                                                                                                            // 1005
        },                                                                                                             // 947
        setting: function (name, value) {                                                                              // 1008
          if ($.isPlainObject(name)) {                                                                                 // 1009
            $.extend(true, settings, name);                                                                            // 1010
          } else if (value !== undefined) {                                                                            // 1011
            settings[name] = value;                                                                                    // 1013
          } else {                                                                                                     // 1014
            return settings[name];                                                                                     // 1016
          }                                                                                                            // 1017
        },                                                                                                             // 1018
        internal: function (name, value) {                                                                             // 1019
          if ($.isPlainObject(name)) {                                                                                 // 1020
            $.extend(true, module, name);                                                                              // 1021
          } else if (value !== undefined) {                                                                            // 1022
            module[name] = value;                                                                                      // 1024
          } else {                                                                                                     // 1025
            return module[name];                                                                                       // 1027
          }                                                                                                            // 1028
        },                                                                                                             // 1029
        debug: function () {                                                                                           // 1030
          if (!settings.silent && settings.debug) {                                                                    // 1031
            if (settings.performance) {                                                                                // 1032
              module.performance.log(arguments);                                                                       // 1033
            } else {                                                                                                   // 1034
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 1036
              module.debug.apply(console, arguments);                                                                  // 1037
            }                                                                                                          // 1038
          }                                                                                                            // 1039
        },                                                                                                             // 1040
        verbose: function () {                                                                                         // 1041
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 1042
            if (settings.performance) {                                                                                // 1043
              module.performance.log(arguments);                                                                       // 1044
            } else {                                                                                                   // 1045
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 1047
              module.verbose.apply(console, arguments);                                                                // 1048
            }                                                                                                          // 1049
          }                                                                                                            // 1050
        },                                                                                                             // 1051
        error: function () {                                                                                           // 1052
          if (!settings.silent) {                                                                                      // 1053
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 1054
            module.error.apply(console, arguments);                                                                    // 1055
          }                                                                                                            // 1056
        },                                                                                                             // 1057
        performance: {                                                                                                 // 1058
          log: function (message) {                                                                                    // 1059
            var currentTime, executionTime, previousTime;                                                              // 1060
                                                                                                                       //
            if (settings.performance) {                                                                                // 1065
              currentTime = new Date().getTime();                                                                      // 1066
              previousTime = time || currentTime;                                                                      // 1067
              executionTime = currentTime - previousTime;                                                              // 1068
              time = currentTime;                                                                                      // 1069
              performance.push({                                                                                       // 1070
                'Name': message[0],                                                                                    // 1071
                'Arguments': [].slice.call(message, 1) || '',                                                          // 1072
                'Element': element,                                                                                    // 1073
                'Execution Time': executionTime                                                                        // 1074
              });                                                                                                      // 1070
            }                                                                                                          // 1076
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 1077
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 1078
          },                                                                                                           // 1079
          display: function () {                                                                                       // 1080
            var title = settings.name + ':',                                                                           // 1081
                totalTime = 0;                                                                                         // 1081
            time = false;                                                                                              // 1085
            clearTimeout(module.performance.timer);                                                                    // 1086
            $.each(performance, function (index, data) {                                                               // 1087
              totalTime += data['Execution Time'];                                                                     // 1088
            });                                                                                                        // 1089
            title += ' ' + totalTime + 'ms';                                                                           // 1090
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 1091
              title += ' \'' + moduleSelector + '\'';                                                                  // 1092
            }                                                                                                          // 1093
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 1094
              console.groupCollapsed(title);                                                                           // 1095
                                                                                                                       //
              if (console.table) {                                                                                     // 1096
                console.table(performance);                                                                            // 1097
              } else {                                                                                                 // 1098
                $.each(performance, function (index, data) {                                                           // 1100
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 1101
                });                                                                                                    // 1102
              }                                                                                                        // 1103
                                                                                                                       //
              console.groupEnd();                                                                                      // 1104
            }                                                                                                          // 1105
                                                                                                                       //
            performance = [];                                                                                          // 1106
          }                                                                                                            // 1107
        },                                                                                                             // 1058
        invoke: function (query, passedArguments, context) {                                                           // 1109
          var object = instance,                                                                                       // 1110
              maxDepth,                                                                                                // 1110
              found,                                                                                                   // 1110
              response;                                                                                                // 1110
          passedArguments = passedArguments || queryArguments;                                                         // 1116
          context = element || context;                                                                                // 1117
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 1118
            query = query.split(/[\. ]/);                                                                              // 1119
            maxDepth = query.length - 1;                                                                               // 1120
            $.each(query, function (depth, value) {                                                                    // 1121
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 1126
                object = object[camelCaseValue];                                                                       // 1127
              } else if (object[camelCaseValue] !== undefined) {                                                       // 1128
                found = object[camelCaseValue];                                                                        // 1130
                return false;                                                                                          // 1131
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 1132
                object = object[value];                                                                                // 1134
              } else if (object[value] !== undefined) {                                                                // 1135
                found = object[value];                                                                                 // 1137
                return false;                                                                                          // 1138
              } else {                                                                                                 // 1139
                module.error(error.method, query);                                                                     // 1141
                return false;                                                                                          // 1142
              }                                                                                                        // 1143
            });                                                                                                        // 1144
          }                                                                                                            // 1145
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 1146
            response = found.apply(context, passedArguments);                                                          // 1147
          } else if (found !== undefined) {                                                                            // 1148
            response = found;                                                                                          // 1150
          }                                                                                                            // 1151
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 1152
            returnedValue.push(response);                                                                              // 1153
          } else if (returnedValue !== undefined) {                                                                    // 1154
            returnedValue = [returnedValue, response];                                                                 // 1156
          } else if (response !== undefined) {                                                                         // 1157
            returnedValue = response;                                                                                  // 1159
          }                                                                                                            // 1160
                                                                                                                       //
          return found;                                                                                                // 1161
        }                                                                                                              // 1162
      };                                                                                                               // 82
                                                                                                                       //
      if (methodInvoked) {                                                                                             // 1165
        if (instance === undefined) {                                                                                  // 1166
          module.initialize();                                                                                         // 1167
        }                                                                                                              // 1168
                                                                                                                       //
        instance.save.scroll();                                                                                        // 1169
        instance.save.calculations();                                                                                  // 1170
        module.invoke(query);                                                                                          // 1171
      } else {                                                                                                         // 1172
        if (instance !== undefined) {                                                                                  // 1174
          instance.invoke('destroy');                                                                                  // 1175
        }                                                                                                              // 1176
                                                                                                                       //
        module.initialize();                                                                                           // 1177
      }                                                                                                                // 1178
    });                                                                                                                // 1179
    return returnedValue !== undefined ? returnedValue : this;                                                         // 1182
  };                                                                                                                   // 1186
                                                                                                                       //
  $.fn.visibility.settings = {                                                                                         // 1188
    name: 'Visibility',                                                                                                // 1190
    namespace: 'visibility',                                                                                           // 1191
    debug: false,                                                                                                      // 1193
    verbose: false,                                                                                                    // 1194
    performance: true,                                                                                                 // 1195
    // whether to use mutation observers to follow changes                                                             // 1197
    observeChanges: true,                                                                                              // 1198
    // check position immediately on init                                                                              // 1200
    initialCheck: true,                                                                                                // 1201
    // whether to refresh calculations after all page images load                                                      // 1203
    refreshOnLoad: true,                                                                                               // 1204
    // whether to refresh calculations after page resize event                                                         // 1206
    refreshOnResize: true,                                                                                             // 1207
    // should call callbacks on refresh event (resize, etc)                                                            // 1209
    checkOnRefresh: true,                                                                                              // 1210
    // callback should only occur one time                                                                             // 1212
    once: true,                                                                                                        // 1213
    // callback should fire continuously whe evaluates to true                                                         // 1215
    continuous: false,                                                                                                 // 1216
    // offset to use with scroll top                                                                                   // 1218
    offset: 0,                                                                                                         // 1219
    // whether to include margin in elements position                                                                  // 1221
    includeMargin: false,                                                                                              // 1222
    // scroll context for visibility checks                                                                            // 1224
    context: window,                                                                                                   // 1225
    // visibility check delay in ms (defaults to animationFrame)                                                       // 1227
    throttle: false,                                                                                                   // 1228
    // special visibility type (image, fixed)                                                                          // 1230
    type: false,                                                                                                       // 1231
    // z-index to use with visibility 'fixed'                                                                          // 1233
    zIndex: '10',                                                                                                      // 1234
    // image only animation settings                                                                                   // 1236
    transition: 'fade in',                                                                                             // 1237
    duration: 1000,                                                                                                    // 1238
    // array of callbacks for percentage                                                                               // 1240
    onPassed: {},                                                                                                      // 1241
    // standard callbacks                                                                                              // 1243
    onOnScreen: false,                                                                                                 // 1244
    onOffScreen: false,                                                                                                // 1245
    onPassing: false,                                                                                                  // 1246
    onTopVisible: false,                                                                                               // 1247
    onBottomVisible: false,                                                                                            // 1248
    onTopPassed: false,                                                                                                // 1249
    onBottomPassed: false,                                                                                             // 1250
    // reverse callbacks                                                                                               // 1252
    onPassingReverse: false,                                                                                           // 1253
    onTopVisibleReverse: false,                                                                                        // 1254
    onBottomVisibleReverse: false,                                                                                     // 1255
    onTopPassedReverse: false,                                                                                         // 1256
    onBottomPassedReverse: false,                                                                                      // 1257
    // special callbacks for image                                                                                     // 1259
    onLoad: function () {},                                                                                            // 1260
    onAllLoaded: function () {},                                                                                       // 1261
    // special callbacks for fixed position                                                                            // 1263
    onFixed: function () {},                                                                                           // 1264
    onUnfixed: function () {},                                                                                         // 1265
    // utility callbacks                                                                                               // 1267
    onUpdate: false,                                                                                                   // 1268
    // disabled by default for performance                                                                             // 1268
    onRefresh: function () {},                                                                                         // 1269
    metadata: {                                                                                                        // 1271
      src: 'src'                                                                                                       // 1272
    },                                                                                                                 // 1271
    className: {                                                                                                       // 1275
      fixed: 'fixed',                                                                                                  // 1276
      placeholder: 'placeholder'                                                                                       // 1277
    },                                                                                                                 // 1275
    error: {                                                                                                           // 1280
      method: 'The method you called is not defined.',                                                                 // 1281
      visible: 'Element is hidden, you must call refresh after element becomes visible'                                // 1282
    }                                                                                                                  // 1280
  };                                                                                                                   // 1188
})(jQuery, window, document);                                                                                          // 1287
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"visit.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/behaviors/visit.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Visit                                                                                            //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.visit = $.fn.visit = function (parameters) {                                                                       // 26
    var $allModules = $.isFunction(this) ? $(window) : $(this),                                                        // 27
        moduleSelector = $allModules.selector || '',                                                                   // 27
        time = new Date().getTime(),                                                                                   // 27
        performance = [],                                                                                              // 27
        query = arguments[0],                                                                                          // 27
        methodInvoked = typeof query == 'string',                                                                      // 27
        queryArguments = [].slice.call(arguments, 1),                                                                  // 27
        returnedValue;                                                                                                 // 27
    $allModules.each(function () {                                                                                     // 41
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.visit.settings, parameters) : $.extend({}, $.fn.visit.settings),
          error = settings.error,                                                                                      // 43
          namespace = settings.namespace,                                                                              // 43
          eventNamespace = '.' + namespace,                                                                            // 43
          moduleNamespace = namespace + '-module',                                                                     // 43
          $module = $(this),                                                                                           // 43
          $displays = $(),                                                                                             // 43
          element = this,                                                                                              // 43
          instance = $module.data(moduleNamespace),                                                                    // 43
          module;                                                                                                      // 43
      module = {                                                                                                       // 61
        initialize: function () {                                                                                      // 63
          if (settings.count) {                                                                                        // 64
            module.store(settings.key.count, settings.count);                                                          // 65
          } else if (settings.id) {                                                                                    // 66
            module.add.id(settings.id);                                                                                // 68
          } else if (settings.increment && methodInvoked !== 'increment') {                                            // 69
            module.increment();                                                                                        // 71
          }                                                                                                            // 72
                                                                                                                       //
          module.add.display($module);                                                                                 // 73
          module.instantiate();                                                                                        // 74
        },                                                                                                             // 75
        instantiate: function () {                                                                                     // 77
          module.verbose('Storing instance of visit module', module);                                                  // 78
          instance = module;                                                                                           // 79
          $module.data(moduleNamespace, module);                                                                       // 80
        },                                                                                                             // 83
        destroy: function () {                                                                                         // 85
          module.verbose('Destroying instance');                                                                       // 86
          $module.removeData(moduleNamespace);                                                                         // 87
        },                                                                                                             // 90
        increment: function (id) {                                                                                     // 92
          var currentValue = module.get.count(),                                                                       // 93
              newValue = +currentValue + 1;                                                                            // 93
                                                                                                                       //
          if (id) {                                                                                                    // 97
            module.add.id(id);                                                                                         // 98
          } else {                                                                                                     // 99
            if (newValue > settings.limit && !settings.surpass) {                                                      // 101
              newValue = settings.limit;                                                                               // 102
            }                                                                                                          // 103
                                                                                                                       //
            module.debug('Incrementing visits', newValue);                                                             // 104
            module.store(settings.key.count, newValue);                                                                // 105
          }                                                                                                            // 106
        },                                                                                                             // 107
        decrement: function (id) {                                                                                     // 109
          var currentValue = module.get.count(),                                                                       // 110
              newValue = +currentValue - 1;                                                                            // 110
                                                                                                                       //
          if (id) {                                                                                                    // 114
            module.remove.id(id);                                                                                      // 115
          } else {                                                                                                     // 116
            module.debug('Removing visit');                                                                            // 118
            module.store(settings.key.count, newValue);                                                                // 119
          }                                                                                                            // 120
        },                                                                                                             // 121
        get: {                                                                                                         // 123
          count: function () {                                                                                         // 124
            return +module.retrieve(settings.key.count) || 0;                                                          // 125
          },                                                                                                           // 126
          idCount: function (ids) {                                                                                    // 127
            ids = ids || module.get.ids();                                                                             // 128
            return ids.length;                                                                                         // 129
          },                                                                                                           // 130
          ids: function (delimitedIDs) {                                                                               // 131
            var idArray = [];                                                                                          // 132
            delimitedIDs = delimitedIDs || module.retrieve(settings.key.ids);                                          // 135
                                                                                                                       //
            if (typeof delimitedIDs === 'string') {                                                                    // 136
              idArray = delimitedIDs.split(settings.delimiter);                                                        // 137
            }                                                                                                          // 138
                                                                                                                       //
            module.verbose('Found visited ID list', idArray);                                                          // 139
            return idArray;                                                                                            // 140
          },                                                                                                           // 141
          storageOptions: function (data) {                                                                            // 142
            var options = {};                                                                                          // 143
                                                                                                                       //
            if (settings.expires) {                                                                                    // 146
              options.expires = settings.expires;                                                                      // 147
            }                                                                                                          // 148
                                                                                                                       //
            if (settings.domain) {                                                                                     // 149
              options.domain = settings.domain;                                                                        // 150
            }                                                                                                          // 151
                                                                                                                       //
            if (settings.path) {                                                                                       // 152
              options.path = settings.path;                                                                            // 153
            }                                                                                                          // 154
                                                                                                                       //
            return options;                                                                                            // 155
          }                                                                                                            // 156
        },                                                                                                             // 123
        has: {                                                                                                         // 159
          visited: function (id, ids) {                                                                                // 160
            var visited = false;                                                                                       // 161
            ids = ids || module.get.ids();                                                                             // 164
                                                                                                                       //
            if (id !== undefined && ids) {                                                                             // 165
              $.each(ids, function (index, value) {                                                                    // 166
                if (value == id) {                                                                                     // 167
                  visited = true;                                                                                      // 168
                }                                                                                                      // 169
              });                                                                                                      // 170
            }                                                                                                          // 171
                                                                                                                       //
            return visited;                                                                                            // 172
          }                                                                                                            // 173
        },                                                                                                             // 159
        set: {                                                                                                         // 176
          count: function (value) {                                                                                    // 177
            module.store(settings.key.count, value);                                                                   // 178
          },                                                                                                           // 179
          ids: function (value) {                                                                                      // 180
            module.store(settings.key.ids, value);                                                                     // 181
          }                                                                                                            // 182
        },                                                                                                             // 176
        reset: function () {                                                                                           // 185
          module.store(settings.key.count, 0);                                                                         // 186
          module.store(settings.key.ids, null);                                                                        // 187
        },                                                                                                             // 188
        add: {                                                                                                         // 190
          id: function (id) {                                                                                          // 191
            var currentIDs = module.retrieve(settings.key.ids),                                                        // 192
                newIDs = currentIDs === undefined || currentIDs === '' ? id : currentIDs + settings.delimiter + id;    // 192
                                                                                                                       //
            if (module.has.visited(id)) {                                                                              // 198
              module.debug('Unique content already visited, not adding visit', id, currentIDs);                        // 199
            } else if (id === undefined) {                                                                             // 200
              module.debug('ID is not defined');                                                                       // 202
            } else {                                                                                                   // 203
              module.debug('Adding visit to unique content', id);                                                      // 205
              module.store(settings.key.ids, newIDs);                                                                  // 206
            }                                                                                                          // 207
                                                                                                                       //
            module.set.count(module.get.idCount());                                                                    // 208
          },                                                                                                           // 209
          display: function (selector) {                                                                               // 210
            var $element = $(selector);                                                                                // 211
                                                                                                                       //
            if ($element.length > 0 && !$.isWindow($element[0])) {                                                     // 214
              module.debug('Updating visit count for element', $element);                                              // 215
              $displays = $displays.length > 0 ? $displays.add($element) : $element;                                   // 216
            }                                                                                                          // 220
          }                                                                                                            // 221
        },                                                                                                             // 190
        remove: {                                                                                                      // 224
          id: function (id) {                                                                                          // 225
            var currentIDs = module.get.ids(),                                                                         // 226
                newIDs = [];                                                                                           // 226
                                                                                                                       //
            if (id !== undefined && currentIDs !== undefined) {                                                        // 230
              module.debug('Removing visit to unique content', id, currentIDs);                                        // 231
              $.each(currentIDs, function (index, value) {                                                             // 232
                if (value !== id) {                                                                                    // 233
                  newIDs.push(value);                                                                                  // 234
                }                                                                                                      // 235
              });                                                                                                      // 236
              newIDs = newIDs.join(settings.delimiter);                                                                // 237
              module.store(settings.key.ids, newIDs);                                                                  // 238
            }                                                                                                          // 239
                                                                                                                       //
            module.set.count(module.get.idCount());                                                                    // 240
          }                                                                                                            // 241
        },                                                                                                             // 224
        check: {                                                                                                       // 244
          limit: function (value) {                                                                                    // 245
            value = value || module.get.count();                                                                       // 246
                                                                                                                       //
            if (settings.limit) {                                                                                      // 247
              if (value >= settings.limit) {                                                                           // 248
                module.debug('Pages viewed exceeded limit, firing callback', value, settings.limit);                   // 249
                settings.onLimit.call(element, value);                                                                 // 250
              }                                                                                                        // 251
                                                                                                                       //
              module.debug('Limit not reached', value, settings.limit);                                                // 252
              settings.onChange.call(element, value);                                                                  // 253
            }                                                                                                          // 254
                                                                                                                       //
            module.update.display(value);                                                                              // 255
          }                                                                                                            // 256
        },                                                                                                             // 244
        update: {                                                                                                      // 259
          display: function (value) {                                                                                  // 260
            value = value || module.get.count();                                                                       // 261
                                                                                                                       //
            if ($displays.length > 0) {                                                                                // 262
              module.debug('Updating displayed view count', $displays);                                                // 263
              $displays.html(value);                                                                                   // 264
            }                                                                                                          // 265
          }                                                                                                            // 266
        },                                                                                                             // 259
        store: function (key, value) {                                                                                 // 269
          var options = module.get.storageOptions(value);                                                              // 270
                                                                                                                       //
          if (settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {                         // 273
            window.localStorage.setItem(key, value);                                                                   // 274
            module.debug('Value stored using local storage', key, value);                                              // 275
          } else if ($.cookie !== undefined) {                                                                         // 276
            $.cookie(key, value, options);                                                                             // 278
            module.debug('Value stored using cookie', key, value, options);                                            // 279
          } else {                                                                                                     // 280
            module.error(error.noCookieStorage);                                                                       // 282
            return;                                                                                                    // 283
          }                                                                                                            // 284
                                                                                                                       //
          if (key == settings.key.count) {                                                                             // 285
            module.check.limit(value);                                                                                 // 286
          }                                                                                                            // 287
        },                                                                                                             // 288
        retrieve: function (key, value) {                                                                              // 289
          var storedValue;                                                                                             // 290
                                                                                                                       //
          if (settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {                         // 293
            storedValue = window.localStorage.getItem(key);                                                            // 294
          } // get by cookie                                                                                           // 295
          else if ($.cookie !== undefined) {                                                                           // 293
              storedValue = $.cookie(key);                                                                             // 298
            } else {                                                                                                   // 299
              module.error(error.noCookieStorage);                                                                     // 301
            }                                                                                                          // 302
                                                                                                                       //
          if (storedValue == 'undefined' || storedValue == 'null' || storedValue === undefined || storedValue === null) {
            storedValue = undefined;                                                                                   // 304
          }                                                                                                            // 305
                                                                                                                       //
          return storedValue;                                                                                          // 306
        },                                                                                                             // 307
        setting: function (name, value) {                                                                              // 309
          if ($.isPlainObject(name)) {                                                                                 // 310
            $.extend(true, settings, name);                                                                            // 311
          } else if (value !== undefined) {                                                                            // 312
            settings[name] = value;                                                                                    // 314
          } else {                                                                                                     // 315
            return settings[name];                                                                                     // 317
          }                                                                                                            // 318
        },                                                                                                             // 319
        internal: function (name, value) {                                                                             // 320
          module.debug('Changing internal', name, value);                                                              // 321
                                                                                                                       //
          if (value !== undefined) {                                                                                   // 322
            if ($.isPlainObject(name)) {                                                                               // 323
              $.extend(true, module, name);                                                                            // 324
            } else {                                                                                                   // 325
              module[name] = value;                                                                                    // 327
            }                                                                                                          // 328
          } else {                                                                                                     // 329
            return module[name];                                                                                       // 331
          }                                                                                                            // 332
        },                                                                                                             // 333
        debug: function () {                                                                                           // 334
          if (!settings.silent && settings.debug) {                                                                    // 335
            if (settings.performance) {                                                                                // 336
              module.performance.log(arguments);                                                                       // 337
            } else {                                                                                                   // 338
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 340
              module.debug.apply(console, arguments);                                                                  // 341
            }                                                                                                          // 342
          }                                                                                                            // 343
        },                                                                                                             // 344
        verbose: function () {                                                                                         // 345
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 346
            if (settings.performance) {                                                                                // 347
              module.performance.log(arguments);                                                                       // 348
            } else {                                                                                                   // 349
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 351
              module.verbose.apply(console, arguments);                                                                // 352
            }                                                                                                          // 353
          }                                                                                                            // 354
        },                                                                                                             // 355
        error: function () {                                                                                           // 356
          if (!settings.silent) {                                                                                      // 357
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 358
            module.error.apply(console, arguments);                                                                    // 359
          }                                                                                                            // 360
        },                                                                                                             // 361
        performance: {                                                                                                 // 362
          log: function (message) {                                                                                    // 363
            var currentTime, executionTime, previousTime;                                                              // 364
                                                                                                                       //
            if (settings.performance) {                                                                                // 369
              currentTime = new Date().getTime();                                                                      // 370
              previousTime = time || currentTime;                                                                      // 371
              executionTime = currentTime - previousTime;                                                              // 372
              time = currentTime;                                                                                      // 373
              performance.push({                                                                                       // 374
                'Name': message[0],                                                                                    // 375
                'Arguments': [].slice.call(message, 1) || '',                                                          // 376
                'Element': element,                                                                                    // 377
                'Execution Time': executionTime                                                                        // 378
              });                                                                                                      // 374
            }                                                                                                          // 380
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 381
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 382
          },                                                                                                           // 383
          display: function () {                                                                                       // 384
            var title = settings.name + ':',                                                                           // 385
                totalTime = 0;                                                                                         // 385
            time = false;                                                                                              // 389
            clearTimeout(module.performance.timer);                                                                    // 390
            $.each(performance, function (index, data) {                                                               // 391
              totalTime += data['Execution Time'];                                                                     // 392
            });                                                                                                        // 393
            title += ' ' + totalTime + 'ms';                                                                           // 394
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 395
              title += ' \'' + moduleSelector + '\'';                                                                  // 396
            }                                                                                                          // 397
                                                                                                                       //
            if ($allModules.length > 1) {                                                                              // 398
              title += ' ' + '(' + $allModules.length + ')';                                                           // 399
            }                                                                                                          // 400
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 401
              console.groupCollapsed(title);                                                                           // 402
                                                                                                                       //
              if (console.table) {                                                                                     // 403
                console.table(performance);                                                                            // 404
              } else {                                                                                                 // 405
                $.each(performance, function (index, data) {                                                           // 407
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 408
                });                                                                                                    // 409
              }                                                                                                        // 410
                                                                                                                       //
              console.groupEnd();                                                                                      // 411
            }                                                                                                          // 412
                                                                                                                       //
            performance = [];                                                                                          // 413
          }                                                                                                            // 414
        },                                                                                                             // 362
        invoke: function (query, passedArguments, context) {                                                           // 416
          var object = instance,                                                                                       // 417
              maxDepth,                                                                                                // 417
              found,                                                                                                   // 417
              response;                                                                                                // 417
          passedArguments = passedArguments || queryArguments;                                                         // 423
          context = element || context;                                                                                // 424
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 425
            query = query.split(/[\. ]/);                                                                              // 426
            maxDepth = query.length - 1;                                                                               // 427
            $.each(query, function (depth, value) {                                                                    // 428
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 433
                object = object[camelCaseValue];                                                                       // 434
              } else if (object[camelCaseValue] !== undefined) {                                                       // 435
                found = object[camelCaseValue];                                                                        // 437
                return false;                                                                                          // 438
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 439
                object = object[value];                                                                                // 441
              } else if (object[value] !== undefined) {                                                                // 442
                found = object[value];                                                                                 // 444
                return false;                                                                                          // 445
              } else {                                                                                                 // 446
                return false;                                                                                          // 448
              }                                                                                                        // 449
            });                                                                                                        // 450
          }                                                                                                            // 451
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 452
            response = found.apply(context, passedArguments);                                                          // 453
          } else if (found !== undefined) {                                                                            // 454
            response = found;                                                                                          // 456
          }                                                                                                            // 457
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 458
            returnedValue.push(response);                                                                              // 459
          } else if (returnedValue !== undefined) {                                                                    // 460
            returnedValue = [returnedValue, response];                                                                 // 462
          } else if (response !== undefined) {                                                                         // 463
            returnedValue = response;                                                                                  // 465
          }                                                                                                            // 466
                                                                                                                       //
          return found;                                                                                                // 467
        }                                                                                                              // 468
      };                                                                                                               // 61
                                                                                                                       //
      if (methodInvoked) {                                                                                             // 470
        if (instance === undefined) {                                                                                  // 471
          module.initialize();                                                                                         // 472
        }                                                                                                              // 473
                                                                                                                       //
        module.invoke(query);                                                                                          // 474
      } else {                                                                                                         // 475
        if (instance !== undefined) {                                                                                  // 477
          instance.invoke('destroy');                                                                                  // 478
        }                                                                                                              // 479
                                                                                                                       //
        module.initialize();                                                                                           // 480
      }                                                                                                                // 481
    });                                                                                                                // 483
    return returnedValue !== undefined ? returnedValue : this;                                                         // 485
  };                                                                                                                   // 489
                                                                                                                       //
  $.fn.visit.settings = {                                                                                              // 491
    name: 'Visit',                                                                                                     // 493
    debug: false,                                                                                                      // 495
    verbose: false,                                                                                                    // 496
    performance: true,                                                                                                 // 497
    namespace: 'visit',                                                                                                // 499
    increment: false,                                                                                                  // 501
    surpass: false,                                                                                                    // 502
    count: false,                                                                                                      // 503
    limit: false,                                                                                                      // 504
    delimiter: '&',                                                                                                    // 506
    storageMethod: 'localstorage',                                                                                     // 507
    key: {                                                                                                             // 509
      count: 'visit-count',                                                                                            // 510
      ids: 'visit-ids'                                                                                                 // 511
    },                                                                                                                 // 509
    expires: 30,                                                                                                       // 514
    domain: false,                                                                                                     // 515
    path: '/',                                                                                                         // 516
    onLimit: function () {},                                                                                           // 518
    onChange: function () {},                                                                                          // 519
    error: {                                                                                                           // 521
      method: 'The method you called is not defined',                                                                  // 522
      missingPersist: 'Using the persist setting requires the inclusion of PersistJS',                                 // 523
      noCookieStorage: 'The default storage cookie requires $.cookie to be included.'                                  // 524
    }                                                                                                                  // 521
  };                                                                                                                   // 491
})(jQuery, window, document);                                                                                          // 529
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"globals":{"site.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/globals/site.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Site                                                                                             //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  $.site = $.fn.site = function (parameters) {                                                                         // 17
    var time = new Date().getTime(),                                                                                   // 18
        performance = [],                                                                                              // 18
        query = arguments[0],                                                                                          // 18
        methodInvoked = typeof query == 'string',                                                                      // 18
        queryArguments = [].slice.call(arguments, 1),                                                                  // 18
        settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.site.settings, parameters) : $.extend({}, $.site.settings),
        namespace = settings.namespace,                                                                                // 18
        error = settings.error,                                                                                        // 18
        eventNamespace = '.' + namespace,                                                                              // 18
        moduleNamespace = 'module-' + namespace,                                                                       // 18
        $document = $(document),                                                                                       // 18
        $module = $document,                                                                                           // 18
        element = this,                                                                                                // 18
        instance = $module.data(moduleNamespace),                                                                      // 18
        module,                                                                                                        // 18
        returnedValue;                                                                                                 // 18
    module = {                                                                                                         // 44
      initialize: function () {                                                                                        // 46
        module.instantiate();                                                                                          // 47
      },                                                                                                               // 48
      instantiate: function () {                                                                                       // 50
        module.verbose('Storing instance of site', module);                                                            // 51
        instance = module;                                                                                             // 52
        $module.data(moduleNamespace, module);                                                                         // 53
      },                                                                                                               // 56
      normalize: function () {                                                                                         // 58
        module.fix.console();                                                                                          // 59
        module.fix.requestAnimationFrame();                                                                            // 60
      },                                                                                                               // 61
      fix: {                                                                                                           // 63
        console: function () {                                                                                         // 64
          module.debug('Normalizing window.console');                                                                  // 65
                                                                                                                       //
          if (console === undefined || console.log === undefined) {                                                    // 66
            module.verbose('Console not available, normalizing events');                                               // 67
            module.disable.console();                                                                                  // 68
          }                                                                                                            // 69
                                                                                                                       //
          if (typeof console.group == 'undefined' || typeof console.groupEnd == 'undefined' || typeof console.groupCollapsed == 'undefined') {
            module.verbose('Console group not available, normalizing events');                                         // 71
                                                                                                                       //
            window.console.group = function () {};                                                                     // 72
                                                                                                                       //
            window.console.groupEnd = function () {};                                                                  // 73
                                                                                                                       //
            window.console.groupCollapsed = function () {};                                                            // 74
          }                                                                                                            // 75
                                                                                                                       //
          if (typeof console.markTimeline == 'undefined') {                                                            // 76
            module.verbose('Mark timeline not available, normalizing events');                                         // 77
                                                                                                                       //
            window.console.markTimeline = function () {};                                                              // 78
          }                                                                                                            // 79
        },                                                                                                             // 80
        consoleClear: function () {                                                                                    // 81
          module.debug('Disabling programmatic console clearing');                                                     // 82
                                                                                                                       //
          window.console.clear = function () {};                                                                       // 83
        },                                                                                                             // 84
        requestAnimationFrame: function () {                                                                           // 85
          module.debug('Normalizing requestAnimationFrame');                                                           // 86
                                                                                                                       //
          if (window.requestAnimationFrame === undefined) {                                                            // 87
            module.debug('RequestAnimationFrame not available, normalizing event');                                    // 88
                                                                                                                       //
            window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
              setTimeout(callback, 0);                                                                                 // 93
            };                                                                                                         // 93
          }                                                                                                            // 95
        }                                                                                                              // 96
      },                                                                                                               // 63
      moduleExists: function (name) {                                                                                  // 99
        return $.fn[name] !== undefined && $.fn[name].settings !== undefined;                                          // 100
      },                                                                                                               // 101
      enabled: {                                                                                                       // 103
        modules: function (modules) {                                                                                  // 104
          var enabledModules = [];                                                                                     // 105
          modules = modules || settings.modules;                                                                       // 108
          $.each(modules, function (index, name) {                                                                     // 109
            if (module.moduleExists(name)) {                                                                           // 110
              enabledModules.push(name);                                                                               // 111
            }                                                                                                          // 112
          });                                                                                                          // 113
          return enabledModules;                                                                                       // 114
        }                                                                                                              // 115
      },                                                                                                               // 103
      disabled: {                                                                                                      // 118
        modules: function (modules) {                                                                                  // 119
          var disabledModules = [];                                                                                    // 120
          modules = modules || settings.modules;                                                                       // 123
          $.each(modules, function (index, name) {                                                                     // 124
            if (!module.moduleExists(name)) {                                                                          // 125
              disabledModules.push(name);                                                                              // 126
            }                                                                                                          // 127
          });                                                                                                          // 128
          return disabledModules;                                                                                      // 129
        }                                                                                                              // 130
      },                                                                                                               // 118
      change: {                                                                                                        // 133
        setting: function (setting, value, modules, modifyExisting) {                                                  // 134
          modules = typeof modules === 'string' ? modules === 'all' ? settings.modules : [modules] : modules || settings.modules;
          modifyExisting = modifyExisting !== undefined ? modifyExisting : true;                                       // 141
          $.each(modules, function (index, name) {                                                                     // 145
            var namespace = module.moduleExists(name) ? $.fn[name].settings.namespace || false : true,                 // 146
                $existingModules;                                                                                      // 146
                                                                                                                       //
            if (module.moduleExists(name)) {                                                                           // 152
              module.verbose('Changing default setting', setting, value, name);                                        // 153
              $.fn[name].settings[setting] = value;                                                                    // 154
                                                                                                                       //
              if (modifyExisting && namespace) {                                                                       // 155
                $existingModules = $(':data(module-' + namespace + ')');                                               // 156
                                                                                                                       //
                if ($existingModules.length > 0) {                                                                     // 157
                  module.verbose('Modifying existing settings', $existingModules);                                     // 158
                  $existingModules[name]('setting', setting, value);                                                   // 159
                }                                                                                                      // 160
              }                                                                                                        // 161
            }                                                                                                          // 162
          });                                                                                                          // 163
        },                                                                                                             // 164
        settings: function (newSettings, modules, modifyExisting) {                                                    // 165
          modules = typeof modules === 'string' ? [modules] : modules || settings.modules;                             // 166
          modifyExisting = modifyExisting !== undefined ? modifyExisting : true;                                       // 170
          $.each(modules, function (index, name) {                                                                     // 174
            var $existingModules;                                                                                      // 175
                                                                                                                       //
            if (module.moduleExists(name)) {                                                                           // 178
              module.verbose('Changing default setting', newSettings, name);                                           // 179
              $.extend(true, $.fn[name].settings, newSettings);                                                        // 180
                                                                                                                       //
              if (modifyExisting && namespace) {                                                                       // 181
                $existingModules = $(':data(module-' + namespace + ')');                                               // 182
                                                                                                                       //
                if ($existingModules.length > 0) {                                                                     // 183
                  module.verbose('Modifying existing settings', $existingModules);                                     // 184
                  $existingModules[name]('setting', newSettings);                                                      // 185
                }                                                                                                      // 186
              }                                                                                                        // 187
            }                                                                                                          // 188
          });                                                                                                          // 189
        }                                                                                                              // 190
      },                                                                                                               // 133
      enable: {                                                                                                        // 193
        console: function () {                                                                                         // 194
          module.console(true);                                                                                        // 195
        },                                                                                                             // 196
        debug: function (modules, modifyExisting) {                                                                    // 197
          modules = modules || settings.modules;                                                                       // 198
          module.debug('Enabling debug for modules', modules);                                                         // 199
          module.change.setting('debug', true, modules, modifyExisting);                                               // 200
        },                                                                                                             // 201
        verbose: function (modules, modifyExisting) {                                                                  // 202
          modules = modules || settings.modules;                                                                       // 203
          module.debug('Enabling verbose debug for modules', modules);                                                 // 204
          module.change.setting('verbose', true, modules, modifyExisting);                                             // 205
        }                                                                                                              // 206
      },                                                                                                               // 193
      disable: {                                                                                                       // 208
        console: function () {                                                                                         // 209
          module.console(false);                                                                                       // 210
        },                                                                                                             // 211
        debug: function (modules, modifyExisting) {                                                                    // 212
          modules = modules || settings.modules;                                                                       // 213
          module.debug('Disabling debug for modules', modules);                                                        // 214
          module.change.setting('debug', false, modules, modifyExisting);                                              // 215
        },                                                                                                             // 216
        verbose: function (modules, modifyExisting) {                                                                  // 217
          modules = modules || settings.modules;                                                                       // 218
          module.debug('Disabling verbose debug for modules', modules);                                                // 219
          module.change.setting('verbose', false, modules, modifyExisting);                                            // 220
        }                                                                                                              // 221
      },                                                                                                               // 208
      console: function (enable) {                                                                                     // 224
        if (enable) {                                                                                                  // 225
          if (instance.cache.console === undefined) {                                                                  // 226
            module.error(error.console);                                                                               // 227
            return;                                                                                                    // 228
          }                                                                                                            // 229
                                                                                                                       //
          module.debug('Restoring console function');                                                                  // 230
          window.console = instance.cache.console;                                                                     // 231
        } else {                                                                                                       // 232
          module.debug('Disabling console function');                                                                  // 234
          instance.cache.console = window.console;                                                                     // 235
          window.console = {                                                                                           // 236
            clear: function () {},                                                                                     // 237
            error: function () {},                                                                                     // 238
            group: function () {},                                                                                     // 239
            groupCollapsed: function () {},                                                                            // 240
            groupEnd: function () {},                                                                                  // 241
            info: function () {},                                                                                      // 242
            log: function () {},                                                                                       // 243
            markTimeline: function () {},                                                                              // 244
            warn: function () {}                                                                                       // 245
          };                                                                                                           // 236
        }                                                                                                              // 247
      },                                                                                                               // 248
      destroy: function () {                                                                                           // 250
        module.verbose('Destroying previous site for', $module);                                                       // 251
        $module.removeData(moduleNamespace);                                                                           // 252
      },                                                                                                               // 255
      cache: {},                                                                                                       // 257
      setting: function (name, value) {                                                                                // 259
        if ($.isPlainObject(name)) {                                                                                   // 260
          $.extend(true, settings, name);                                                                              // 261
        } else if (value !== undefined) {                                                                              // 262
          settings[name] = value;                                                                                      // 264
        } else {                                                                                                       // 265
          return settings[name];                                                                                       // 267
        }                                                                                                              // 268
      },                                                                                                               // 269
      internal: function (name, value) {                                                                               // 270
        if ($.isPlainObject(name)) {                                                                                   // 271
          $.extend(true, module, name);                                                                                // 272
        } else if (value !== undefined) {                                                                              // 273
          module[name] = value;                                                                                        // 275
        } else {                                                                                                       // 276
          return module[name];                                                                                         // 278
        }                                                                                                              // 279
      },                                                                                                               // 280
      debug: function () {                                                                                             // 281
        if (settings.debug) {                                                                                          // 282
          if (settings.performance) {                                                                                  // 283
            module.performance.log(arguments);                                                                         // 284
          } else {                                                                                                     // 285
            module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                   // 287
            module.debug.apply(console, arguments);                                                                    // 288
          }                                                                                                            // 289
        }                                                                                                              // 290
      },                                                                                                               // 291
      verbose: function () {                                                                                           // 292
        if (settings.verbose && settings.debug) {                                                                      // 293
          if (settings.performance) {                                                                                  // 294
            module.performance.log(arguments);                                                                         // 295
          } else {                                                                                                     // 296
            module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 298
            module.verbose.apply(console, arguments);                                                                  // 299
          }                                                                                                            // 300
        }                                                                                                              // 301
      },                                                                                                               // 302
      error: function () {                                                                                             // 303
        module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                      // 304
        module.error.apply(console, arguments);                                                                        // 305
      },                                                                                                               // 306
      performance: {                                                                                                   // 307
        log: function (message) {                                                                                      // 308
          var currentTime, executionTime, previousTime;                                                                // 309
                                                                                                                       //
          if (settings.performance) {                                                                                  // 314
            currentTime = new Date().getTime();                                                                        // 315
            previousTime = time || currentTime;                                                                        // 316
            executionTime = currentTime - previousTime;                                                                // 317
            time = currentTime;                                                                                        // 318
            performance.push({                                                                                         // 319
              'Element': element,                                                                                      // 320
              'Name': message[0],                                                                                      // 321
              'Arguments': [].slice.call(message, 1) || '',                                                            // 322
              'Execution Time': executionTime                                                                          // 323
            });                                                                                                        // 319
          }                                                                                                            // 325
                                                                                                                       //
          clearTimeout(module.performance.timer);                                                                      // 326
          module.performance.timer = setTimeout(module.performance.display, 500);                                      // 327
        },                                                                                                             // 328
        display: function () {                                                                                         // 329
          var title = settings.name + ':',                                                                             // 330
              totalTime = 0;                                                                                           // 330
          time = false;                                                                                                // 334
          clearTimeout(module.performance.timer);                                                                      // 335
          $.each(performance, function (index, data) {                                                                 // 336
            totalTime += data['Execution Time'];                                                                       // 337
          });                                                                                                          // 338
          title += ' ' + totalTime + 'ms';                                                                             // 339
                                                                                                                       //
          if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {                // 340
            console.groupCollapsed(title);                                                                             // 341
                                                                                                                       //
            if (console.table) {                                                                                       // 342
              console.table(performance);                                                                              // 343
            } else {                                                                                                   // 344
              $.each(performance, function (index, data) {                                                             // 346
                console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                      // 347
              });                                                                                                      // 348
            }                                                                                                          // 349
                                                                                                                       //
            console.groupEnd();                                                                                        // 350
          }                                                                                                            // 351
                                                                                                                       //
          performance = [];                                                                                            // 352
        }                                                                                                              // 353
      },                                                                                                               // 307
      invoke: function (query, passedArguments, context) {                                                             // 355
        var object = instance,                                                                                         // 356
            maxDepth,                                                                                                  // 356
            found,                                                                                                     // 356
            response;                                                                                                  // 356
        passedArguments = passedArguments || queryArguments;                                                           // 362
        context = element || context;                                                                                  // 363
                                                                                                                       //
        if (typeof query == 'string' && object !== undefined) {                                                        // 364
          query = query.split(/[\. ]/);                                                                                // 365
          maxDepth = query.length - 1;                                                                                 // 366
          $.each(query, function (depth, value) {                                                                      // 367
            var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
            if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                        // 372
              object = object[camelCaseValue];                                                                         // 373
            } else if (object[camelCaseValue] !== undefined) {                                                         // 374
              found = object[camelCaseValue];                                                                          // 376
              return false;                                                                                            // 377
            } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                          // 378
              object = object[value];                                                                                  // 380
            } else if (object[value] !== undefined) {                                                                  // 381
              found = object[value];                                                                                   // 383
              return false;                                                                                            // 384
            } else {                                                                                                   // 385
              module.error(error.method, query);                                                                       // 387
              return false;                                                                                            // 388
            }                                                                                                          // 389
          });                                                                                                          // 390
        }                                                                                                              // 391
                                                                                                                       //
        if ($.isFunction(found)) {                                                                                     // 392
          response = found.apply(context, passedArguments);                                                            // 393
        } else if (found !== undefined) {                                                                              // 394
          response = found;                                                                                            // 396
        }                                                                                                              // 397
                                                                                                                       //
        if ($.isArray(returnedValue)) {                                                                                // 398
          returnedValue.push(response);                                                                                // 399
        } else if (returnedValue !== undefined) {                                                                      // 400
          returnedValue = [returnedValue, response];                                                                   // 402
        } else if (response !== undefined) {                                                                           // 403
          returnedValue = response;                                                                                    // 405
        }                                                                                                              // 406
                                                                                                                       //
        return found;                                                                                                  // 407
      }                                                                                                                // 408
    };                                                                                                                 // 44
                                                                                                                       //
    if (methodInvoked) {                                                                                               // 411
      if (instance === undefined) {                                                                                    // 412
        module.initialize();                                                                                           // 413
      }                                                                                                                // 414
                                                                                                                       //
      module.invoke(query);                                                                                            // 415
    } else {                                                                                                           // 416
      if (instance !== undefined) {                                                                                    // 418
        module.destroy();                                                                                              // 419
      }                                                                                                                // 420
                                                                                                                       //
      module.initialize();                                                                                             // 421
    }                                                                                                                  // 422
                                                                                                                       //
    return returnedValue !== undefined ? returnedValue : this;                                                         // 423
  };                                                                                                                   // 427
                                                                                                                       //
  $.site.settings = {                                                                                                  // 429
    name: 'Site',                                                                                                      // 431
    namespace: 'site',                                                                                                 // 432
    error: {                                                                                                           // 434
      console: 'Console cannot be restored, most likely it was overwritten outside of module',                         // 435
      method: 'The method you called is not defined.'                                                                  // 436
    },                                                                                                                 // 434
    debug: false,                                                                                                      // 439
    verbose: false,                                                                                                    // 440
    performance: true,                                                                                                 // 441
    modules: ['accordion', 'api', 'checkbox', 'dimmer', 'dropdown', 'embed', 'form', 'modal', 'nag', 'popup', 'rating', 'shape', 'sidebar', 'state', 'sticky', 'tab', 'transition', 'visit', 'visibility'],
    siteNamespace: 'site',                                                                                             // 465
    namespaceStub: {                                                                                                   // 466
      cache: {},                                                                                                       // 467
      config: {},                                                                                                      // 468
      sections: {},                                                                                                    // 469
      section: {},                                                                                                     // 470
      utilities: {}                                                                                                    // 471
    }                                                                                                                  // 466
  }; // allows for selection of elements with data attributes                                                          // 429
                                                                                                                       //
  $.extend($.expr[":"], {                                                                                              // 477
    data: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) {                                              // 478
      return function (elem) {                                                                                         // 480
        return !!$.data(elem, dataName);                                                                               // 481
      };                                                                                                               // 482
    }) : function (elem, i, match) {                                                                                   // 483
      // support: jQuery < 1.8                                                                                         // 485
      return !!$.data(elem, match[3]);                                                                                 // 486
    }                                                                                                                  // 487
  });                                                                                                                  // 477
})(jQuery, window, document);                                                                                          // 491
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modules":{"accordion.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/modules/accordion.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Accordion                                                                                        //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.accordion = function (parameters) {                                                                             // 26
    var $allModules = $(this),                                                                                         // 27
        time = new Date().getTime(),                                                                                   // 27
        performance = [],                                                                                              // 27
        query = arguments[0],                                                                                          // 27
        methodInvoked = typeof query == 'string',                                                                      // 27
        queryArguments = [].slice.call(arguments, 1),                                                                  // 27
        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
      setTimeout(callback, 0);                                                                                         // 41
    },                                                                                                                 // 41
        returnedValue;                                                                                                 // 27
                                                                                                                       //
    $allModules.each(function () {                                                                                     // 45
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.accordion.settings, parameters) : $.extend({}, $.fn.accordion.settings),
          className = settings.className,                                                                              // 47
          namespace = settings.namespace,                                                                              // 47
          selector = settings.selector,                                                                                // 47
          error = settings.error,                                                                                      // 47
          eventNamespace = '.' + namespace,                                                                            // 47
          moduleNamespace = 'module-' + namespace,                                                                     // 47
          moduleSelector = $allModules.selector || '',                                                                 // 47
          $module = $(this),                                                                                           // 47
          $title = $module.find(selector.title),                                                                       // 47
          $content = $module.find(selector.content),                                                                   // 47
          element = this,                                                                                              // 47
          instance = $module.data(moduleNamespace),                                                                    // 47
          observer,                                                                                                    // 47
          module;                                                                                                      // 47
      module = {                                                                                                       // 71
        initialize: function () {                                                                                      // 73
          module.debug('Initializing', $module);                                                                       // 74
          module.bind.events();                                                                                        // 75
                                                                                                                       //
          if (settings.observeChanges) {                                                                               // 76
            module.observeChanges();                                                                                   // 77
          }                                                                                                            // 78
                                                                                                                       //
          module.instantiate();                                                                                        // 79
        },                                                                                                             // 80
        instantiate: function () {                                                                                     // 82
          instance = module;                                                                                           // 83
          $module.data(moduleNamespace, module);                                                                       // 84
        },                                                                                                             // 87
        destroy: function () {                                                                                         // 89
          module.debug('Destroying previous instance', $module);                                                       // 90
          $module.off(eventNamespace).removeData(moduleNamespace);                                                     // 91
        },                                                                                                             // 95
        refresh: function () {                                                                                         // 97
          $title = $module.find(selector.title);                                                                       // 98
          $content = $module.find(selector.content);                                                                   // 99
        },                                                                                                             // 100
        observeChanges: function () {                                                                                  // 102
          if ('MutationObserver' in window) {                                                                          // 103
            observer = new MutationObserver(function (mutations) {                                                     // 104
              module.debug('DOM tree modified, updating selector cache');                                              // 105
              module.refresh();                                                                                        // 106
            });                                                                                                        // 107
            observer.observe(element, {                                                                                // 108
              childList: true,                                                                                         // 109
              subtree: true                                                                                            // 110
            });                                                                                                        // 108
            module.debug('Setting up mutation observer', observer);                                                    // 112
          }                                                                                                            // 113
        },                                                                                                             // 114
        bind: {                                                                                                        // 116
          events: function () {                                                                                        // 117
            module.debug('Binding delegated events');                                                                  // 118
            $module.on(settings.on + eventNamespace, selector.trigger, module.event.click);                            // 119
          }                                                                                                            // 122
        },                                                                                                             // 116
        event: {                                                                                                       // 125
          click: function () {                                                                                         // 126
            module.toggle.call(this);                                                                                  // 127
          }                                                                                                            // 128
        },                                                                                                             // 125
        toggle: function (query) {                                                                                     // 131
          var $activeTitle = query !== undefined ? typeof query === 'number' ? $title.eq(query) : $(query).closest(selector.title) : $(this).closest(selector.title),
              $activeContent = $activeTitle.next($content),                                                            // 132
              isAnimating = $activeContent.hasClass(className.animating),                                              // 132
              isActive = $activeContent.hasClass(className.active),                                                    // 132
              isOpen = isActive && !isAnimating,                                                                       // 132
              isOpening = !isActive && isAnimating;                                                                    // 132
          module.debug('Toggling visibility of content', $activeTitle);                                                // 144
                                                                                                                       //
          if (isOpen || isOpening) {                                                                                   // 145
            if (settings.collapsible) {                                                                                // 146
              module.close.call($activeTitle);                                                                         // 147
            } else {                                                                                                   // 148
              module.debug('Cannot close accordion content collapsing is disabled');                                   // 150
            }                                                                                                          // 151
          } else {                                                                                                     // 152
            module.open.call($activeTitle);                                                                            // 154
          }                                                                                                            // 155
        },                                                                                                             // 156
        open: function (query) {                                                                                       // 158
          var $activeTitle = query !== undefined ? typeof query === 'number' ? $title.eq(query) : $(query).closest(selector.title) : $(this).closest(selector.title),
              $activeContent = $activeTitle.next($content),                                                            // 159
              isAnimating = $activeContent.hasClass(className.animating),                                              // 159
              isActive = $activeContent.hasClass(className.active),                                                    // 159
              isOpen = isActive || isAnimating;                                                                        // 159
                                                                                                                       //
          if (isOpen) {                                                                                                // 170
            module.debug('Accordion already open, skipping', $activeContent);                                          // 171
            return;                                                                                                    // 172
          }                                                                                                            // 173
                                                                                                                       //
          module.debug('Opening accordion content', $activeTitle);                                                     // 174
          settings.onOpening.call($activeContent);                                                                     // 175
                                                                                                                       //
          if (settings.exclusive) {                                                                                    // 176
            module.closeOthers.call($activeTitle);                                                                     // 177
          }                                                                                                            // 178
                                                                                                                       //
          $activeTitle.addClass(className.active);                                                                     // 179
          $activeContent.stop(true, true).addClass(className.animating);                                               // 182
                                                                                                                       //
          if (settings.animateChildren) {                                                                              // 186
            if ($.fn.transition !== undefined && $module.transition('is supported')) {                                 // 187
              $activeContent.children().transition({                                                                   // 188
                animation: 'fade in',                                                                                  // 191
                queue: false,                                                                                          // 192
                useFailSafe: true,                                                                                     // 193
                debug: settings.debug,                                                                                 // 194
                verbose: settings.verbose,                                                                             // 195
                duration: settings.duration                                                                            // 196
              });                                                                                                      // 190
            } else {                                                                                                   // 199
              $activeContent.children().stop(true, true).animate({                                                     // 201
                opacity: 1                                                                                             // 205
              }, settings.duration, module.resetOpacity);                                                              // 204
            }                                                                                                          // 208
          }                                                                                                            // 209
                                                                                                                       //
          $activeContent.slideDown(settings.duration, settings.easing, function () {                                   // 210
            $activeContent.removeClass(className.animating).addClass(className.active);                                // 212
            module.reset.display.call(this);                                                                           // 216
            settings.onOpen.call(this);                                                                                // 217
            settings.onChange.call(this);                                                                              // 218
          });                                                                                                          // 219
        },                                                                                                             // 221
        close: function (query) {                                                                                      // 223
          var $activeTitle = query !== undefined ? typeof query === 'number' ? $title.eq(query) : $(query).closest(selector.title) : $(this).closest(selector.title),
              $activeContent = $activeTitle.next($content),                                                            // 224
              isAnimating = $activeContent.hasClass(className.animating),                                              // 224
              isActive = $activeContent.hasClass(className.active),                                                    // 224
              isOpening = !isActive && isAnimating,                                                                    // 224
              isClosing = isActive && isAnimating;                                                                     // 224
                                                                                                                       //
          if ((isActive || isOpening) && !isClosing) {                                                                 // 236
            module.debug('Closing accordion content', $activeContent);                                                 // 237
            settings.onClosing.call($activeContent);                                                                   // 238
            $activeTitle.removeClass(className.active);                                                                // 239
            $activeContent.stop(true, true).addClass(className.animating);                                             // 242
                                                                                                                       //
            if (settings.animateChildren) {                                                                            // 246
              if ($.fn.transition !== undefined && $module.transition('is supported')) {                               // 247
                $activeContent.children().transition({                                                                 // 248
                  animation: 'fade out',                                                                               // 251
                  queue: false,                                                                                        // 252
                  useFailSafe: true,                                                                                   // 253
                  debug: settings.debug,                                                                               // 254
                  verbose: settings.verbose,                                                                           // 255
                  duration: settings.duration                                                                          // 256
                });                                                                                                    // 250
              } else {                                                                                                 // 259
                $activeContent.children().stop(true, true).animate({                                                   // 261
                  opacity: 0                                                                                           // 265
                }, settings.duration, module.resetOpacity);                                                            // 264
              }                                                                                                        // 268
            }                                                                                                          // 269
                                                                                                                       //
            $activeContent.slideUp(settings.duration, settings.easing, function () {                                   // 270
              $activeContent.removeClass(className.animating).removeClass(className.active);                           // 272
              module.reset.display.call(this);                                                                         // 276
              settings.onClose.call(this);                                                                             // 277
              settings.onChange.call(this);                                                                            // 278
            });                                                                                                        // 279
          }                                                                                                            // 281
        },                                                                                                             // 282
        closeOthers: function (index) {                                                                                // 284
          var $activeTitle = index !== undefined ? $title.eq(index) : $(this).closest(selector.title),                 // 285
              $parentTitles = $activeTitle.parents(selector.content).prev(selector.title),                             // 285
              $activeAccordion = $activeTitle.closest(selector.accordion),                                             // 285
              activeSelector = selector.title + '.' + className.active + ':visible',                                   // 285
              activeContent = selector.content + '.' + className.active + ':visible',                                  // 285
              $openTitles,                                                                                             // 285
              $nestedTitles,                                                                                           // 285
              $openContents;                                                                                           // 285
                                                                                                                       //
          if (settings.closeNested) {                                                                                  // 297
            $openTitles = $activeAccordion.find(activeSelector).not($parentTitles);                                    // 298
            $openContents = $openTitles.next($content);                                                                // 299
          } else {                                                                                                     // 300
            $openTitles = $activeAccordion.find(activeSelector).not($parentTitles);                                    // 302
            $nestedTitles = $activeAccordion.find(activeContent).find(activeSelector).not($parentTitles);              // 303
            $openTitles = $openTitles.not($nestedTitles);                                                              // 304
            $openContents = $openTitles.next($content);                                                                // 305
          }                                                                                                            // 306
                                                                                                                       //
          if ($openTitles.length > 0) {                                                                                // 307
            module.debug('Exclusive enabled, closing other content', $openTitles);                                     // 308
            $openTitles.removeClass(className.active);                                                                 // 309
            $openContents.removeClass(className.animating).stop(true, true);                                           // 312
                                                                                                                       //
            if (settings.animateChildren) {                                                                            // 316
              if ($.fn.transition !== undefined && $module.transition('is supported')) {                               // 317
                $openContents.children().transition({                                                                  // 318
                  animation: 'fade out',                                                                               // 321
                  useFailSafe: true,                                                                                   // 322
                  debug: settings.debug,                                                                               // 323
                  verbose: settings.verbose,                                                                           // 324
                  duration: settings.duration                                                                          // 325
                });                                                                                                    // 320
              } else {                                                                                                 // 328
                $openContents.children().stop(true, true).animate({                                                    // 330
                  opacity: 0                                                                                           // 334
                }, settings.duration, module.resetOpacity);                                                            // 333
              }                                                                                                        // 337
            }                                                                                                          // 338
                                                                                                                       //
            $openContents.slideUp(settings.duration, settings.easing, function () {                                    // 339
              $(this).removeClass(className.active);                                                                   // 341
              module.reset.display.call(this);                                                                         // 342
            });                                                                                                        // 343
          }                                                                                                            // 345
        },                                                                                                             // 346
        reset: {                                                                                                       // 348
          display: function () {                                                                                       // 350
            module.verbose('Removing inline display from element', this);                                              // 351
            $(this).css('display', '');                                                                                // 352
                                                                                                                       //
            if ($(this).attr('style') === '') {                                                                        // 353
              $(this).attr('style', '').removeAttr('style');                                                           // 354
            }                                                                                                          // 358
          },                                                                                                           // 359
          opacity: function () {                                                                                       // 361
            module.verbose('Removing inline opacity from element', this);                                              // 362
            $(this).css('opacity', '');                                                                                // 363
                                                                                                                       //
            if ($(this).attr('style') === '') {                                                                        // 364
              $(this).attr('style', '').removeAttr('style');                                                           // 365
            }                                                                                                          // 369
          }                                                                                                            // 370
        },                                                                                                             // 348
        setting: function (name, value) {                                                                              // 374
          module.debug('Changing setting', name, value);                                                               // 375
                                                                                                                       //
          if ($.isPlainObject(name)) {                                                                                 // 376
            $.extend(true, settings, name);                                                                            // 377
          } else if (value !== undefined) {                                                                            // 378
            if ($.isPlainObject(settings[name])) {                                                                     // 380
              $.extend(true, settings[name], value);                                                                   // 381
            } else {                                                                                                   // 382
              settings[name] = value;                                                                                  // 384
            }                                                                                                          // 385
          } else {                                                                                                     // 386
            return settings[name];                                                                                     // 388
          }                                                                                                            // 389
        },                                                                                                             // 390
        internal: function (name, value) {                                                                             // 391
          module.debug('Changing internal', name, value);                                                              // 392
                                                                                                                       //
          if (value !== undefined) {                                                                                   // 393
            if ($.isPlainObject(name)) {                                                                               // 394
              $.extend(true, module, name);                                                                            // 395
            } else {                                                                                                   // 396
              module[name] = value;                                                                                    // 398
            }                                                                                                          // 399
          } else {                                                                                                     // 400
            return module[name];                                                                                       // 402
          }                                                                                                            // 403
        },                                                                                                             // 404
        debug: function () {                                                                                           // 405
          if (!settings.silent && settings.debug) {                                                                    // 406
            if (settings.performance) {                                                                                // 407
              module.performance.log(arguments);                                                                       // 408
            } else {                                                                                                   // 409
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 411
              module.debug.apply(console, arguments);                                                                  // 412
            }                                                                                                          // 413
          }                                                                                                            // 414
        },                                                                                                             // 415
        verbose: function () {                                                                                         // 416
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 417
            if (settings.performance) {                                                                                // 418
              module.performance.log(arguments);                                                                       // 419
            } else {                                                                                                   // 420
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 422
              module.verbose.apply(console, arguments);                                                                // 423
            }                                                                                                          // 424
          }                                                                                                            // 425
        },                                                                                                             // 426
        error: function () {                                                                                           // 427
          if (!settings.silent) {                                                                                      // 428
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 429
            module.error.apply(console, arguments);                                                                    // 430
          }                                                                                                            // 431
        },                                                                                                             // 432
        performance: {                                                                                                 // 433
          log: function (message) {                                                                                    // 434
            var currentTime, executionTime, previousTime;                                                              // 435
                                                                                                                       //
            if (settings.performance) {                                                                                // 440
              currentTime = new Date().getTime();                                                                      // 441
              previousTime = time || currentTime;                                                                      // 442
              executionTime = currentTime - previousTime;                                                              // 443
              time = currentTime;                                                                                      // 444
              performance.push({                                                                                       // 445
                'Name': message[0],                                                                                    // 446
                'Arguments': [].slice.call(message, 1) || '',                                                          // 447
                'Element': element,                                                                                    // 448
                'Execution Time': executionTime                                                                        // 449
              });                                                                                                      // 445
            }                                                                                                          // 451
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 452
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 453
          },                                                                                                           // 454
          display: function () {                                                                                       // 455
            var title = settings.name + ':',                                                                           // 456
                totalTime = 0;                                                                                         // 456
            time = false;                                                                                              // 460
            clearTimeout(module.performance.timer);                                                                    // 461
            $.each(performance, function (index, data) {                                                               // 462
              totalTime += data['Execution Time'];                                                                     // 463
            });                                                                                                        // 464
            title += ' ' + totalTime + 'ms';                                                                           // 465
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 466
              title += ' \'' + moduleSelector + '\'';                                                                  // 467
            }                                                                                                          // 468
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 469
              console.groupCollapsed(title);                                                                           // 470
                                                                                                                       //
              if (console.table) {                                                                                     // 471
                console.table(performance);                                                                            // 472
              } else {                                                                                                 // 473
                $.each(performance, function (index, data) {                                                           // 475
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 476
                });                                                                                                    // 477
              }                                                                                                        // 478
                                                                                                                       //
              console.groupEnd();                                                                                      // 479
            }                                                                                                          // 480
                                                                                                                       //
            performance = [];                                                                                          // 481
          }                                                                                                            // 482
        },                                                                                                             // 433
        invoke: function (query, passedArguments, context) {                                                           // 484
          var object = instance,                                                                                       // 485
              maxDepth,                                                                                                // 485
              found,                                                                                                   // 485
              response;                                                                                                // 485
          passedArguments = passedArguments || queryArguments;                                                         // 491
          context = element || context;                                                                                // 492
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 493
            query = query.split(/[\. ]/);                                                                              // 494
            maxDepth = query.length - 1;                                                                               // 495
            $.each(query, function (depth, value) {                                                                    // 496
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 501
                object = object[camelCaseValue];                                                                       // 502
              } else if (object[camelCaseValue] !== undefined) {                                                       // 503
                found = object[camelCaseValue];                                                                        // 505
                return false;                                                                                          // 506
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 507
                object = object[value];                                                                                // 509
              } else if (object[value] !== undefined) {                                                                // 510
                found = object[value];                                                                                 // 512
                return false;                                                                                          // 513
              } else {                                                                                                 // 514
                module.error(error.method, query);                                                                     // 516
                return false;                                                                                          // 517
              }                                                                                                        // 518
            });                                                                                                        // 519
          }                                                                                                            // 520
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 521
            response = found.apply(context, passedArguments);                                                          // 522
          } else if (found !== undefined) {                                                                            // 523
            response = found;                                                                                          // 525
          }                                                                                                            // 526
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 527
            returnedValue.push(response);                                                                              // 528
          } else if (returnedValue !== undefined) {                                                                    // 529
            returnedValue = [returnedValue, response];                                                                 // 531
          } else if (response !== undefined) {                                                                         // 532
            returnedValue = response;                                                                                  // 534
          }                                                                                                            // 535
                                                                                                                       //
          return found;                                                                                                // 536
        }                                                                                                              // 537
      };                                                                                                               // 71
                                                                                                                       //
      if (methodInvoked) {                                                                                             // 539
        if (instance === undefined) {                                                                                  // 540
          module.initialize();                                                                                         // 541
        }                                                                                                              // 542
                                                                                                                       //
        module.invoke(query);                                                                                          // 543
      } else {                                                                                                         // 544
        if (instance !== undefined) {                                                                                  // 546
          instance.invoke('destroy');                                                                                  // 547
        }                                                                                                              // 548
                                                                                                                       //
        module.initialize();                                                                                           // 549
      }                                                                                                                // 550
    });                                                                                                                // 551
    return returnedValue !== undefined ? returnedValue : this;                                                         // 553
  };                                                                                                                   // 557
                                                                                                                       //
  $.fn.accordion.settings = {                                                                                          // 559
    name: 'Accordion',                                                                                                 // 561
    namespace: 'accordion',                                                                                            // 562
    silent: false,                                                                                                     // 564
    debug: false,                                                                                                      // 565
    verbose: false,                                                                                                    // 566
    performance: true,                                                                                                 // 567
    on: 'click',                                                                                                       // 569
    // event on title that opens accordion                                                                             // 569
    observeChanges: true,                                                                                              // 571
    // whether accordion should automatically refresh on DOM insertion                                                 // 571
    exclusive: true,                                                                                                   // 573
    // whether a single accordion content panel should be open at once                                                 // 573
    collapsible: true,                                                                                                 // 574
    // whether accordion content can be closed                                                                         // 574
    closeNested: false,                                                                                                // 575
    // whether nested content should be closed when a panel is closed                                                  // 575
    animateChildren: true,                                                                                             // 576
    // whether children opacity should be animated                                                                     // 576
    duration: 350,                                                                                                     // 578
    // duration of animation                                                                                           // 578
    easing: 'easeOutQuad',                                                                                             // 579
    // easing equation for animation                                                                                   // 579
    onOpening: function () {},                                                                                         // 582
    // callback before open animation                                                                                  // 582
    onOpen: function () {},                                                                                            // 583
    // callback after open animation                                                                                   // 583
    onClosing: function () {},                                                                                         // 584
    // callback before closing animation                                                                               // 584
    onClose: function () {},                                                                                           // 585
    // callback after closing animation                                                                                // 585
    onChange: function () {},                                                                                          // 586
    // callback after closing or opening animation                                                                     // 586
    error: {                                                                                                           // 588
      method: 'The method you called is not defined'                                                                   // 589
    },                                                                                                                 // 588
    className: {                                                                                                       // 592
      active: 'active',                                                                                                // 593
      animating: 'animating'                                                                                           // 594
    },                                                                                                                 // 592
    selector: {                                                                                                        // 597
      accordion: '.accordion',                                                                                         // 598
      title: '.title',                                                                                                 // 599
      trigger: '.title',                                                                                               // 600
      content: '.content'                                                                                              // 601
    }                                                                                                                  // 597
  }; // Adds easing                                                                                                    // 559
                                                                                                                       //
  $.extend($.easing, {                                                                                                 // 607
    easeOutQuad: function (x, t, b, c, d) {                                                                            // 608
      return -c * (t /= d) * (t - 2) + b;                                                                              // 609
    }                                                                                                                  // 610
  });                                                                                                                  // 607
})(jQuery, window, document);                                                                                          // 613
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"checkbox.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/modules/checkbox.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Checkbox                                                                                         //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.checkbox = function (parameters) {                                                                              // 26
    var $allModules = $(this),                                                                                         // 27
        moduleSelector = $allModules.selector || '',                                                                   // 27
        time = new Date().getTime(),                                                                                   // 27
        performance = [],                                                                                              // 27
        query = arguments[0],                                                                                          // 27
        methodInvoked = typeof query == 'string',                                                                      // 27
        queryArguments = [].slice.call(arguments, 1),                                                                  // 27
        returnedValue;                                                                                                 // 27
    $allModules.each(function () {                                                                                     // 40
      var settings = $.extend(true, {}, $.fn.checkbox.settings, parameters),                                           // 42
          className = settings.className,                                                                              // 42
          namespace = settings.namespace,                                                                              // 42
          selector = settings.selector,                                                                                // 42
          error = settings.error,                                                                                      // 42
          eventNamespace = '.' + namespace,                                                                            // 42
          moduleNamespace = 'module-' + namespace,                                                                     // 42
          $module = $(this),                                                                                           // 42
          $label = $(this).children(selector.label),                                                                   // 42
          $input = $(this).children(selector.input),                                                                   // 42
          input = $input[0],                                                                                           // 42
          initialLoad = false,                                                                                         // 42
          shortcutPressed = false,                                                                                     // 42
          instance = $module.data(moduleNamespace),                                                                    // 42
          observer,                                                                                                    // 42
          element = this,                                                                                              // 42
          module;                                                                                                      // 42
      module = {                                                                                                       // 67
        initialize: function () {                                                                                      // 69
          module.verbose('Initializing checkbox', settings);                                                           // 70
          module.create.label();                                                                                       // 72
          module.bind.events();                                                                                        // 73
          module.set.tabbable();                                                                                       // 75
          module.hide.input();                                                                                         // 76
          module.observeChanges();                                                                                     // 78
          module.instantiate();                                                                                        // 79
          module.setup();                                                                                              // 80
        },                                                                                                             // 81
        instantiate: function () {                                                                                     // 83
          module.verbose('Storing instance of module', module);                                                        // 84
          instance = module;                                                                                           // 85
          $module.data(moduleNamespace, module);                                                                       // 86
        },                                                                                                             // 89
        destroy: function () {                                                                                         // 91
          module.verbose('Destroying module');                                                                         // 92
          module.unbind.events();                                                                                      // 93
          module.show.input();                                                                                         // 94
          $module.removeData(moduleNamespace);                                                                         // 95
        },                                                                                                             // 96
        fix: {                                                                                                         // 98
          reference: function () {                                                                                     // 99
            if ($module.is(selector.input)) {                                                                          // 100
              module.debug('Behavior called on <input> adjusting invoked element');                                    // 101
              $module = $module.closest(selector.checkbox);                                                            // 102
              module.refresh();                                                                                        // 103
            }                                                                                                          // 104
          }                                                                                                            // 105
        },                                                                                                             // 98
        setup: function () {                                                                                           // 108
          module.set.initialLoad();                                                                                    // 109
                                                                                                                       //
          if (module.is.indeterminate()) {                                                                             // 110
            module.debug('Initial value is indeterminate');                                                            // 111
            module.indeterminate();                                                                                    // 112
          } else if (module.is.checked()) {                                                                            // 113
            module.debug('Initial value is checked');                                                                  // 115
            module.check();                                                                                            // 116
          } else {                                                                                                     // 117
            module.debug('Initial value is unchecked');                                                                // 119
            module.uncheck();                                                                                          // 120
          }                                                                                                            // 121
                                                                                                                       //
          module.remove.initialLoad();                                                                                 // 122
        },                                                                                                             // 123
        refresh: function () {                                                                                         // 125
          $label = $module.children(selector.label);                                                                   // 126
          $input = $module.children(selector.input);                                                                   // 127
          input = $input[0];                                                                                           // 128
        },                                                                                                             // 129
        hide: {                                                                                                        // 131
          input: function () {                                                                                         // 132
            module.verbose('Modifying <input> z-index to be unselectable');                                            // 133
            $input.addClass(className.hidden);                                                                         // 134
          }                                                                                                            // 135
        },                                                                                                             // 131
        show: {                                                                                                        // 137
          input: function () {                                                                                         // 138
            module.verbose('Modifying <input> z-index to be selectable');                                              // 139
            $input.removeClass(className.hidden);                                                                      // 140
          }                                                                                                            // 141
        },                                                                                                             // 137
        observeChanges: function () {                                                                                  // 144
          if ('MutationObserver' in window) {                                                                          // 145
            observer = new MutationObserver(function (mutations) {                                                     // 146
              module.debug('DOM tree modified, updating selector cache');                                              // 147
              module.refresh();                                                                                        // 148
            });                                                                                                        // 149
            observer.observe(element, {                                                                                // 150
              childList: true,                                                                                         // 151
              subtree: true                                                                                            // 152
            });                                                                                                        // 150
            module.debug('Setting up mutation observer', observer);                                                    // 154
          }                                                                                                            // 155
        },                                                                                                             // 156
        attachEvents: function (selector, event) {                                                                     // 158
          var $element = $(selector);                                                                                  // 159
          event = $.isFunction(module[event]) ? module[event] : module.toggle;                                         // 162
                                                                                                                       //
          if ($element.length > 0) {                                                                                   // 166
            module.debug('Attaching checkbox events to element', selector, event);                                     // 167
            $element.on('click' + eventNamespace, event);                                                              // 168
          } else {                                                                                                     // 171
            module.error(error.notFound);                                                                              // 173
          }                                                                                                            // 174
        },                                                                                                             // 175
        event: {                                                                                                       // 177
          click: function (event) {                                                                                    // 178
            var $target = $(event.target);                                                                             // 179
                                                                                                                       //
            if ($target.is(selector.input)) {                                                                          // 182
              module.verbose('Using default check action on initialized checkbox');                                    // 183
              return;                                                                                                  // 184
            }                                                                                                          // 185
                                                                                                                       //
            if ($target.is(selector.link)) {                                                                           // 186
              module.debug('Clicking link inside checkbox, skipping toggle');                                          // 187
              return;                                                                                                  // 188
            }                                                                                                          // 189
                                                                                                                       //
            module.toggle();                                                                                           // 190
            $input.focus();                                                                                            // 191
            event.preventDefault();                                                                                    // 192
          },                                                                                                           // 193
          keydown: function (event) {                                                                                  // 194
            var key = event.which,                                                                                     // 195
                keyCode = {                                                                                            // 195
              enter: 13,                                                                                               // 198
              space: 32,                                                                                               // 199
              escape: 27                                                                                               // 200
            };                                                                                                         // 197
                                                                                                                       //
            if (key == keyCode.escape) {                                                                               // 203
              module.verbose('Escape key pressed blurring field');                                                     // 204
              $input.blur();                                                                                           // 205
              shortcutPressed = true;                                                                                  // 206
            } else if (!event.ctrlKey && (key == keyCode.space || key == keyCode.enter)) {                             // 207
              module.verbose('Enter/space key pressed, toggling checkbox');                                            // 209
              module.toggle();                                                                                         // 210
              shortcutPressed = true;                                                                                  // 211
            } else {                                                                                                   // 212
              shortcutPressed = false;                                                                                 // 214
            }                                                                                                          // 215
          },                                                                                                           // 216
          keyup: function (event) {                                                                                    // 217
            if (shortcutPressed) {                                                                                     // 218
              event.preventDefault();                                                                                  // 219
            }                                                                                                          // 220
          }                                                                                                            // 221
        },                                                                                                             // 177
        check: function () {                                                                                           // 224
          if (!module.should.allowCheck()) {                                                                           // 225
            return;                                                                                                    // 226
          }                                                                                                            // 227
                                                                                                                       //
          module.debug('Checking checkbox', $input);                                                                   // 228
          module.set.checked();                                                                                        // 229
                                                                                                                       //
          if (!module.should.ignoreCallbacks()) {                                                                      // 230
            settings.onChecked.call(input);                                                                            // 231
            settings.onChange.call(input);                                                                             // 232
          }                                                                                                            // 233
        },                                                                                                             // 234
        uncheck: function () {                                                                                         // 236
          if (!module.should.allowUncheck()) {                                                                         // 237
            return;                                                                                                    // 238
          }                                                                                                            // 239
                                                                                                                       //
          module.debug('Unchecking checkbox');                                                                         // 240
          module.set.unchecked();                                                                                      // 241
                                                                                                                       //
          if (!module.should.ignoreCallbacks()) {                                                                      // 242
            settings.onUnchecked.call(input);                                                                          // 243
            settings.onChange.call(input);                                                                             // 244
          }                                                                                                            // 245
        },                                                                                                             // 246
        indeterminate: function () {                                                                                   // 248
          if (module.should.allowIndeterminate()) {                                                                    // 249
            module.debug('Checkbox is already indeterminate');                                                         // 250
            return;                                                                                                    // 251
          }                                                                                                            // 252
                                                                                                                       //
          module.debug('Making checkbox indeterminate');                                                               // 253
          module.set.indeterminate();                                                                                  // 254
                                                                                                                       //
          if (!module.should.ignoreCallbacks()) {                                                                      // 255
            settings.onIndeterminate.call(input);                                                                      // 256
            settings.onChange.call(input);                                                                             // 257
          }                                                                                                            // 258
        },                                                                                                             // 259
        determinate: function () {                                                                                     // 261
          if (module.should.allowDeterminate()) {                                                                      // 262
            module.debug('Checkbox is already determinate');                                                           // 263
            return;                                                                                                    // 264
          }                                                                                                            // 265
                                                                                                                       //
          module.debug('Making checkbox determinate');                                                                 // 266
          module.set.determinate();                                                                                    // 267
                                                                                                                       //
          if (!module.should.ignoreCallbacks()) {                                                                      // 268
            settings.onDeterminate.call(input);                                                                        // 269
            settings.onChange.call(input);                                                                             // 270
          }                                                                                                            // 271
        },                                                                                                             // 272
        enable: function () {                                                                                          // 274
          if (module.is.enabled()) {                                                                                   // 275
            module.debug('Checkbox is already enabled');                                                               // 276
            return;                                                                                                    // 277
          }                                                                                                            // 278
                                                                                                                       //
          module.debug('Enabling checkbox');                                                                           // 279
          module.set.enabled();                                                                                        // 280
          settings.onEnable.call(input); // preserve legacy callbacks                                                  // 281
                                                                                                                       //
          settings.onEnabled.call(input);                                                                              // 283
        },                                                                                                             // 284
        disable: function () {                                                                                         // 286
          if (module.is.disabled()) {                                                                                  // 287
            module.debug('Checkbox is already disabled');                                                              // 288
            return;                                                                                                    // 289
          }                                                                                                            // 290
                                                                                                                       //
          module.debug('Disabling checkbox');                                                                          // 291
          module.set.disabled();                                                                                       // 292
          settings.onDisable.call(input); // preserve legacy callbacks                                                 // 293
                                                                                                                       //
          settings.onDisabled.call(input);                                                                             // 295
        },                                                                                                             // 296
        get: {                                                                                                         // 298
          radios: function () {                                                                                        // 299
            var name = module.get.name();                                                                              // 300
            return $('input[name="' + name + '"]').closest(selector.checkbox);                                         // 303
          },                                                                                                           // 304
          otherRadios: function () {                                                                                   // 305
            return module.get.radios().not($module);                                                                   // 306
          },                                                                                                           // 307
          name: function () {                                                                                          // 308
            return $input.attr('name');                                                                                // 309
          }                                                                                                            // 310
        },                                                                                                             // 298
        is: {                                                                                                          // 313
          initialLoad: function () {                                                                                   // 314
            return initialLoad;                                                                                        // 315
          },                                                                                                           // 316
          radio: function () {                                                                                         // 317
            return $input.hasClass(className.radio) || $input.attr('type') == 'radio';                                 // 318
          },                                                                                                           // 319
          indeterminate: function () {                                                                                 // 320
            return $input.prop('indeterminate') !== undefined && $input.prop('indeterminate');                         // 321
          },                                                                                                           // 322
          checked: function () {                                                                                       // 323
            return $input.prop('checked') !== undefined && $input.prop('checked');                                     // 324
          },                                                                                                           // 325
          disabled: function () {                                                                                      // 326
            return $input.prop('disabled') !== undefined && $input.prop('disabled');                                   // 327
          },                                                                                                           // 328
          enabled: function () {                                                                                       // 329
            return !module.is.disabled();                                                                              // 330
          },                                                                                                           // 331
          determinate: function () {                                                                                   // 332
            return !module.is.indeterminate();                                                                         // 333
          },                                                                                                           // 334
          unchecked: function () {                                                                                     // 335
            return !module.is.checked();                                                                               // 336
          }                                                                                                            // 337
        },                                                                                                             // 313
        should: {                                                                                                      // 340
          allowCheck: function () {                                                                                    // 341
            if (module.is.determinate() && module.is.checked() && !module.should.forceCallbacks()) {                   // 342
              module.debug('Should not allow check, checkbox is already checked');                                     // 343
              return false;                                                                                            // 344
            }                                                                                                          // 345
                                                                                                                       //
            if (settings.beforeChecked.apply(input) === false) {                                                       // 346
              module.debug('Should not allow check, beforeChecked cancelled');                                         // 347
              return false;                                                                                            // 348
            }                                                                                                          // 349
                                                                                                                       //
            return true;                                                                                               // 350
          },                                                                                                           // 351
          allowUncheck: function () {                                                                                  // 352
            if (module.is.determinate() && module.is.unchecked() && !module.should.forceCallbacks()) {                 // 353
              module.debug('Should not allow uncheck, checkbox is already unchecked');                                 // 354
              return false;                                                                                            // 355
            }                                                                                                          // 356
                                                                                                                       //
            if (settings.beforeUnchecked.apply(input) === false) {                                                     // 357
              module.debug('Should not allow uncheck, beforeUnchecked cancelled');                                     // 358
              return false;                                                                                            // 359
            }                                                                                                          // 360
                                                                                                                       //
            return true;                                                                                               // 361
          },                                                                                                           // 362
          allowIndeterminate: function () {                                                                            // 363
            if (module.is.indeterminate() && !module.should.forceCallbacks()) {                                        // 364
              module.debug('Should not allow indeterminate, checkbox is already indeterminate');                       // 365
              return false;                                                                                            // 366
            }                                                                                                          // 367
                                                                                                                       //
            if (settings.beforeIndeterminate.apply(input) === false) {                                                 // 368
              module.debug('Should not allow indeterminate, beforeIndeterminate cancelled');                           // 369
              return false;                                                                                            // 370
            }                                                                                                          // 371
                                                                                                                       //
            return true;                                                                                               // 372
          },                                                                                                           // 373
          allowDeterminate: function () {                                                                              // 374
            if (module.is.determinate() && !module.should.forceCallbacks()) {                                          // 375
              module.debug('Should not allow determinate, checkbox is already determinate');                           // 376
              return false;                                                                                            // 377
            }                                                                                                          // 378
                                                                                                                       //
            if (settings.beforeDeterminate.apply(input) === false) {                                                   // 379
              module.debug('Should not allow determinate, beforeDeterminate cancelled');                               // 380
              return false;                                                                                            // 381
            }                                                                                                          // 382
                                                                                                                       //
            return true;                                                                                               // 383
          },                                                                                                           // 384
          forceCallbacks: function () {                                                                                // 385
            return module.is.initialLoad() && settings.fireOnInit;                                                     // 386
          },                                                                                                           // 387
          ignoreCallbacks: function () {                                                                               // 388
            return initialLoad && !settings.fireOnInit;                                                                // 389
          }                                                                                                            // 390
        },                                                                                                             // 340
        can: {                                                                                                         // 393
          change: function () {                                                                                        // 394
            return !($module.hasClass(className.disabled) || $module.hasClass(className.readOnly) || $input.prop('disabled') || $input.prop('readonly'));
          },                                                                                                           // 396
          uncheck: function () {                                                                                       // 397
            return typeof settings.uncheckable === 'boolean' ? settings.uncheckable : !module.is.radio();              // 398
          }                                                                                                            // 402
        },                                                                                                             // 393
        set: {                                                                                                         // 405
          initialLoad: function () {                                                                                   // 406
            initialLoad = true;                                                                                        // 407
          },                                                                                                           // 408
          checked: function () {                                                                                       // 409
            module.verbose('Setting class to checked');                                                                // 410
            $module.removeClass(className.indeterminate).addClass(className.checked);                                  // 411
                                                                                                                       //
            if (module.is.radio()) {                                                                                   // 415
              module.uncheckOthers();                                                                                  // 416
            }                                                                                                          // 417
                                                                                                                       //
            if (!module.is.indeterminate() && module.is.checked()) {                                                   // 418
              module.debug('Input is already checked, skipping input property change');                                // 419
              return;                                                                                                  // 420
            }                                                                                                          // 421
                                                                                                                       //
            module.verbose('Setting state to checked', input);                                                         // 422
            $input.prop('indeterminate', false).prop('checked', true);                                                 // 423
            module.trigger.change();                                                                                   // 427
          },                                                                                                           // 428
          unchecked: function () {                                                                                     // 429
            module.verbose('Removing checked class');                                                                  // 430
            $module.removeClass(className.indeterminate).removeClass(className.checked);                               // 431
                                                                                                                       //
            if (!module.is.indeterminate() && module.is.unchecked()) {                                                 // 435
              module.debug('Input is already unchecked');                                                              // 436
              return;                                                                                                  // 437
            }                                                                                                          // 438
                                                                                                                       //
            module.debug('Setting state to unchecked');                                                                // 439
            $input.prop('indeterminate', false).prop('checked', false);                                                // 440
            module.trigger.change();                                                                                   // 444
          },                                                                                                           // 445
          indeterminate: function () {                                                                                 // 446
            module.verbose('Setting class to indeterminate');                                                          // 447
            $module.addClass(className.indeterminate);                                                                 // 448
                                                                                                                       //
            if (module.is.indeterminate()) {                                                                           // 451
              module.debug('Input is already indeterminate, skipping input property change');                          // 452
              return;                                                                                                  // 453
            }                                                                                                          // 454
                                                                                                                       //
            module.debug('Setting state to indeterminate');                                                            // 455
            $input.prop('indeterminate', true);                                                                        // 456
            module.trigger.change();                                                                                   // 459
          },                                                                                                           // 460
          determinate: function () {                                                                                   // 461
            module.verbose('Removing indeterminate class');                                                            // 462
            $module.removeClass(className.indeterminate);                                                              // 463
                                                                                                                       //
            if (module.is.determinate()) {                                                                             // 466
              module.debug('Input is already determinate, skipping input property change');                            // 467
              return;                                                                                                  // 468
            }                                                                                                          // 469
                                                                                                                       //
            module.debug('Setting state to determinate');                                                              // 470
            $input.prop('indeterminate', false);                                                                       // 471
          },                                                                                                           // 474
          disabled: function () {                                                                                      // 475
            module.verbose('Setting class to disabled');                                                               // 476
            $module.addClass(className.disabled);                                                                      // 477
                                                                                                                       //
            if (module.is.disabled()) {                                                                                // 480
              module.debug('Input is already disabled, skipping input property change');                               // 481
              return;                                                                                                  // 482
            }                                                                                                          // 483
                                                                                                                       //
            module.debug('Setting state to disabled');                                                                 // 484
            $input.prop('disabled', 'disabled');                                                                       // 485
            module.trigger.change();                                                                                   // 488
          },                                                                                                           // 489
          enabled: function () {                                                                                       // 490
            module.verbose('Removing disabled class');                                                                 // 491
            $module.removeClass(className.disabled);                                                                   // 492
                                                                                                                       //
            if (module.is.enabled()) {                                                                                 // 493
              module.debug('Input is already enabled, skipping input property change');                                // 494
              return;                                                                                                  // 495
            }                                                                                                          // 496
                                                                                                                       //
            module.debug('Setting state to enabled');                                                                  // 497
            $input.prop('disabled', false);                                                                            // 498
            module.trigger.change();                                                                                   // 501
          },                                                                                                           // 502
          tabbable: function () {                                                                                      // 503
            module.verbose('Adding tabindex to checkbox');                                                             // 504
                                                                                                                       //
            if ($input.attr('tabindex') === undefined) {                                                               // 505
              $input.attr('tabindex', 0);                                                                              // 506
            }                                                                                                          // 507
          }                                                                                                            // 508
        },                                                                                                             // 405
        remove: {                                                                                                      // 511
          initialLoad: function () {                                                                                   // 512
            initialLoad = false;                                                                                       // 513
          }                                                                                                            // 514
        },                                                                                                             // 511
        trigger: {                                                                                                     // 517
          change: function () {                                                                                        // 518
            var events = document.createEvent('HTMLEvents'),                                                           // 519
                inputElement = $input[0];                                                                              // 519
                                                                                                                       //
            if (inputElement) {                                                                                        // 523
              module.verbose('Triggering native change event');                                                        // 524
              events.initEvent('change', true, false);                                                                 // 525
              inputElement.dispatchEvent(events);                                                                      // 526
            }                                                                                                          // 527
          }                                                                                                            // 528
        },                                                                                                             // 517
        create: {                                                                                                      // 532
          label: function () {                                                                                         // 533
            if ($input.prevAll(selector.label).length > 0) {                                                           // 534
              $input.prev(selector.label).detach().insertAfter($input);                                                // 535
              module.debug('Moving existing label', $label);                                                           // 536
            } else if (!module.has.label()) {                                                                          // 537
              $label = $('<label>').insertAfter($input);                                                               // 539
              module.debug('Creating label', $label);                                                                  // 540
            }                                                                                                          // 541
          }                                                                                                            // 542
        },                                                                                                             // 532
        has: {                                                                                                         // 545
          label: function () {                                                                                         // 546
            return $label.length > 0;                                                                                  // 547
          }                                                                                                            // 548
        },                                                                                                             // 545
        bind: {                                                                                                        // 551
          events: function () {                                                                                        // 552
            module.verbose('Attaching checkbox events');                                                               // 553
            $module.on('click' + eventNamespace, module.event.click).on('keydown' + eventNamespace, selector.input, module.event.keydown).on('keyup' + eventNamespace, selector.input, module.event.keyup);
          }                                                                                                            // 559
        },                                                                                                             // 551
        unbind: {                                                                                                      // 562
          events: function () {                                                                                        // 563
            module.debug('Removing events');                                                                           // 564
            $module.off(eventNamespace);                                                                               // 565
          }                                                                                                            // 568
        },                                                                                                             // 562
        uncheckOthers: function () {                                                                                   // 571
          var $radios = module.get.otherRadios();                                                                      // 572
          module.debug('Unchecking other radios', $radios);                                                            // 575
          $radios.removeClass(className.checked);                                                                      // 576
        },                                                                                                             // 577
        toggle: function () {                                                                                          // 579
          if (!module.can.change()) {                                                                                  // 580
            if (!module.is.radio()) {                                                                                  // 581
              module.debug('Checkbox is read-only or disabled, ignoring toggle');                                      // 582
            }                                                                                                          // 583
                                                                                                                       //
            return;                                                                                                    // 584
          }                                                                                                            // 585
                                                                                                                       //
          if (module.is.indeterminate() || module.is.unchecked()) {                                                    // 586
            module.debug('Currently unchecked');                                                                       // 587
            module.check();                                                                                            // 588
          } else if (module.is.checked() && module.can.uncheck()) {                                                    // 589
            module.debug('Currently checked');                                                                         // 591
            module.uncheck();                                                                                          // 592
          }                                                                                                            // 593
        },                                                                                                             // 594
        setting: function (name, value) {                                                                              // 595
          module.debug('Changing setting', name, value);                                                               // 596
                                                                                                                       //
          if ($.isPlainObject(name)) {                                                                                 // 597
            $.extend(true, settings, name);                                                                            // 598
          } else if (value !== undefined) {                                                                            // 599
            if ($.isPlainObject(settings[name])) {                                                                     // 601
              $.extend(true, settings[name], value);                                                                   // 602
            } else {                                                                                                   // 603
              settings[name] = value;                                                                                  // 605
            }                                                                                                          // 606
          } else {                                                                                                     // 607
            return settings[name];                                                                                     // 609
          }                                                                                                            // 610
        },                                                                                                             // 611
        internal: function (name, value) {                                                                             // 612
          if ($.isPlainObject(name)) {                                                                                 // 613
            $.extend(true, module, name);                                                                              // 614
          } else if (value !== undefined) {                                                                            // 615
            module[name] = value;                                                                                      // 617
          } else {                                                                                                     // 618
            return module[name];                                                                                       // 620
          }                                                                                                            // 621
        },                                                                                                             // 622
        debug: function () {                                                                                           // 623
          if (!settings.silent && settings.debug) {                                                                    // 624
            if (settings.performance) {                                                                                // 625
              module.performance.log(arguments);                                                                       // 626
            } else {                                                                                                   // 627
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 629
              module.debug.apply(console, arguments);                                                                  // 630
            }                                                                                                          // 631
          }                                                                                                            // 632
        },                                                                                                             // 633
        verbose: function () {                                                                                         // 634
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 635
            if (settings.performance) {                                                                                // 636
              module.performance.log(arguments);                                                                       // 637
            } else {                                                                                                   // 638
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 640
              module.verbose.apply(console, arguments);                                                                // 641
            }                                                                                                          // 642
          }                                                                                                            // 643
        },                                                                                                             // 644
        error: function () {                                                                                           // 645
          if (!settings.silent) {                                                                                      // 646
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 647
            module.error.apply(console, arguments);                                                                    // 648
          }                                                                                                            // 649
        },                                                                                                             // 650
        performance: {                                                                                                 // 651
          log: function (message) {                                                                                    // 652
            var currentTime, executionTime, previousTime;                                                              // 653
                                                                                                                       //
            if (settings.performance) {                                                                                // 658
              currentTime = new Date().getTime();                                                                      // 659
              previousTime = time || currentTime;                                                                      // 660
              executionTime = currentTime - previousTime;                                                              // 661
              time = currentTime;                                                                                      // 662
              performance.push({                                                                                       // 663
                'Name': message[0],                                                                                    // 664
                'Arguments': [].slice.call(message, 1) || '',                                                          // 665
                'Element': element,                                                                                    // 666
                'Execution Time': executionTime                                                                        // 667
              });                                                                                                      // 663
            }                                                                                                          // 669
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 670
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 671
          },                                                                                                           // 672
          display: function () {                                                                                       // 673
            var title = settings.name + ':',                                                                           // 674
                totalTime = 0;                                                                                         // 674
            time = false;                                                                                              // 678
            clearTimeout(module.performance.timer);                                                                    // 679
            $.each(performance, function (index, data) {                                                               // 680
              totalTime += data['Execution Time'];                                                                     // 681
            });                                                                                                        // 682
            title += ' ' + totalTime + 'ms';                                                                           // 683
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 684
              title += ' \'' + moduleSelector + '\'';                                                                  // 685
            }                                                                                                          // 686
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 687
              console.groupCollapsed(title);                                                                           // 688
                                                                                                                       //
              if (console.table) {                                                                                     // 689
                console.table(performance);                                                                            // 690
              } else {                                                                                                 // 691
                $.each(performance, function (index, data) {                                                           // 693
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 694
                });                                                                                                    // 695
              }                                                                                                        // 696
                                                                                                                       //
              console.groupEnd();                                                                                      // 697
            }                                                                                                          // 698
                                                                                                                       //
            performance = [];                                                                                          // 699
          }                                                                                                            // 700
        },                                                                                                             // 651
        invoke: function (query, passedArguments, context) {                                                           // 702
          var object = instance,                                                                                       // 703
              maxDepth,                                                                                                // 703
              found,                                                                                                   // 703
              response;                                                                                                // 703
          passedArguments = passedArguments || queryArguments;                                                         // 709
          context = element || context;                                                                                // 710
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 711
            query = query.split(/[\. ]/);                                                                              // 712
            maxDepth = query.length - 1;                                                                               // 713
            $.each(query, function (depth, value) {                                                                    // 714
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 719
                object = object[camelCaseValue];                                                                       // 720
              } else if (object[camelCaseValue] !== undefined) {                                                       // 721
                found = object[camelCaseValue];                                                                        // 723
                return false;                                                                                          // 724
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 725
                object = object[value];                                                                                // 727
              } else if (object[value] !== undefined) {                                                                // 728
                found = object[value];                                                                                 // 730
                return false;                                                                                          // 731
              } else {                                                                                                 // 732
                module.error(error.method, query);                                                                     // 734
                return false;                                                                                          // 735
              }                                                                                                        // 736
            });                                                                                                        // 737
          }                                                                                                            // 738
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 739
            response = found.apply(context, passedArguments);                                                          // 740
          } else if (found !== undefined) {                                                                            // 741
            response = found;                                                                                          // 743
          }                                                                                                            // 744
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 745
            returnedValue.push(response);                                                                              // 746
          } else if (returnedValue !== undefined) {                                                                    // 747
            returnedValue = [returnedValue, response];                                                                 // 749
          } else if (response !== undefined) {                                                                         // 750
            returnedValue = response;                                                                                  // 752
          }                                                                                                            // 753
                                                                                                                       //
          return found;                                                                                                // 754
        }                                                                                                              // 755
      };                                                                                                               // 67
                                                                                                                       //
      if (methodInvoked) {                                                                                             // 758
        if (instance === undefined) {                                                                                  // 759
          module.initialize();                                                                                         // 760
        }                                                                                                              // 761
                                                                                                                       //
        module.invoke(query);                                                                                          // 762
      } else {                                                                                                         // 763
        if (instance !== undefined) {                                                                                  // 765
          instance.invoke('destroy');                                                                                  // 766
        }                                                                                                              // 767
                                                                                                                       //
        module.initialize();                                                                                           // 768
      }                                                                                                                // 769
    });                                                                                                                // 770
    return returnedValue !== undefined ? returnedValue : this;                                                         // 773
  };                                                                                                                   // 777
                                                                                                                       //
  $.fn.checkbox.settings = {                                                                                           // 779
    name: 'Checkbox',                                                                                                  // 781
    namespace: 'checkbox',                                                                                             // 782
    silent: false,                                                                                                     // 784
    debug: false,                                                                                                      // 785
    verbose: true,                                                                                                     // 786
    performance: true,                                                                                                 // 787
    // delegated event context                                                                                         // 789
    uncheckable: 'auto',                                                                                               // 790
    fireOnInit: false,                                                                                                 // 791
    onChange: function () {},                                                                                          // 793
    beforeChecked: function () {},                                                                                     // 795
    beforeUnchecked: function () {},                                                                                   // 796
    beforeDeterminate: function () {},                                                                                 // 797
    beforeIndeterminate: function () {},                                                                               // 798
    onChecked: function () {},                                                                                         // 800
    onUnchecked: function () {},                                                                                       // 801
    onDeterminate: function () {},                                                                                     // 803
    onIndeterminate: function () {},                                                                                   // 804
    onEnable: function () {},                                                                                          // 806
    onDisable: function () {},                                                                                         // 807
    // preserve misspelled callbacks (will be removed in 3.0)                                                          // 809
    onEnabled: function () {},                                                                                         // 810
    onDisabled: function () {},                                                                                        // 811
    className: {                                                                                                       // 813
      checked: 'checked',                                                                                              // 814
      indeterminate: 'indeterminate',                                                                                  // 815
      disabled: 'disabled',                                                                                            // 816
      hidden: 'hidden',                                                                                                // 817
      radio: 'radio',                                                                                                  // 818
      readOnly: 'read-only'                                                                                            // 819
    },                                                                                                                 // 813
    error: {                                                                                                           // 822
      method: 'The method you called is not defined'                                                                   // 823
    },                                                                                                                 // 822
    selector: {                                                                                                        // 826
      checkbox: '.ui.checkbox',                                                                                        // 827
      label: 'label, .box',                                                                                            // 828
      input: 'input[type="checkbox"], input[type="radio"]',                                                            // 829
      link: 'a[href]'                                                                                                  // 830
    }                                                                                                                  // 826
  };                                                                                                                   // 779
})(jQuery, window, document);                                                                                          // 835
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"dimmer.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/modules/dimmer.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof2 = require("babel-runtime/helpers/typeof");                                                                //
                                                                                                                       //
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Dimmer                                                                                           //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.dimmer = function (parameters) {                                                                                // 26
    var $allModules = $(this),                                                                                         // 27
        time = new Date().getTime(),                                                                                   // 27
        performance = [],                                                                                              // 27
        query = arguments[0],                                                                                          // 27
        methodInvoked = typeof query == 'string',                                                                      // 27
        queryArguments = [].slice.call(arguments, 1),                                                                  // 27
        returnedValue;                                                                                                 // 27
    $allModules.each(function () {                                                                                     // 40
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.dimmer.settings, parameters) : $.extend({}, $.fn.dimmer.settings),
          selector = settings.selector,                                                                                // 42
          namespace = settings.namespace,                                                                              // 42
          className = settings.className,                                                                              // 42
          error = settings.error,                                                                                      // 42
          eventNamespace = '.' + namespace,                                                                            // 42
          moduleNamespace = 'module-' + namespace,                                                                     // 42
          moduleSelector = $allModules.selector || '',                                                                 // 42
          clickEvent = 'ontouchstart' in document.documentElement ? 'touchstart' : 'click',                            // 42
          $module = $(this),                                                                                           // 42
          $dimmer,                                                                                                     // 42
          $dimmable,                                                                                                   // 42
          element = this,                                                                                              // 42
          instance = $module.data(moduleNamespace),                                                                    // 42
          module;                                                                                                      // 42
      module = {                                                                                                       // 69
        preinitialize: function () {                                                                                   // 71
          if (module.is.dimmer()) {                                                                                    // 72
            $dimmable = $module.parent();                                                                              // 74
            $dimmer = $module;                                                                                         // 75
          } else {                                                                                                     // 76
            $dimmable = $module;                                                                                       // 78
                                                                                                                       //
            if (module.has.dimmer()) {                                                                                 // 79
              if (settings.dimmerName) {                                                                               // 80
                $dimmer = $dimmable.find(selector.dimmer).filter('.' + settings.dimmerName);                           // 81
              } else {                                                                                                 // 82
                $dimmer = $dimmable.find(selector.dimmer);                                                             // 84
              }                                                                                                        // 85
            } else {                                                                                                   // 86
              $dimmer = module.create();                                                                               // 88
            }                                                                                                          // 89
          }                                                                                                            // 90
        },                                                                                                             // 91
        initialize: function () {                                                                                      // 93
          module.debug('Initializing dimmer', settings);                                                               // 94
          module.bind.events();                                                                                        // 96
          module.set.dimmable();                                                                                       // 97
          module.instantiate();                                                                                        // 98
        },                                                                                                             // 99
        instantiate: function () {                                                                                     // 101
          module.verbose('Storing instance of module', module);                                                        // 102
          instance = module;                                                                                           // 103
          $module.data(moduleNamespace, instance);                                                                     // 104
        },                                                                                                             // 107
        destroy: function () {                                                                                         // 109
          module.verbose('Destroying previous module', $dimmer);                                                       // 110
          module.unbind.events();                                                                                      // 111
          module.remove.variation();                                                                                   // 112
          $dimmable.off(eventNamespace);                                                                               // 113
        },                                                                                                             // 116
        bind: {                                                                                                        // 118
          events: function () {                                                                                        // 119
            if (settings.on == 'hover') {                                                                              // 120
              $dimmable.on('mouseenter' + eventNamespace, module.show).on('mouseleave' + eventNamespace, module.hide);
            } else if (settings.on == 'click') {                                                                       // 125
              $dimmable.on(clickEvent + eventNamespace, module.toggle);                                                // 127
            }                                                                                                          // 130
                                                                                                                       //
            if (module.is.page()) {                                                                                    // 131
              module.debug('Setting as a page dimmer', $dimmable);                                                     // 132
              module.set.pageDimmer();                                                                                 // 133
            }                                                                                                          // 134
                                                                                                                       //
            if (module.is.closable()) {                                                                                // 136
              module.verbose('Adding dimmer close event', $dimmer);                                                    // 137
              $dimmable.on(clickEvent + eventNamespace, selector.dimmer, module.event.click);                          // 138
            }                                                                                                          // 141
          }                                                                                                            // 142
        },                                                                                                             // 118
        unbind: {                                                                                                      // 145
          events: function () {                                                                                        // 146
            $module.removeData(moduleNamespace);                                                                       // 147
            $dimmable.off(eventNamespace);                                                                             // 150
          }                                                                                                            // 153
        },                                                                                                             // 145
        event: {                                                                                                       // 156
          click: function (event) {                                                                                    // 157
            module.verbose('Determining if event occured on dimmer', event);                                           // 158
                                                                                                                       //
            if ($dimmer.find(event.target).length === 0 || $(event.target).is(selector.content)) {                     // 159
              module.hide();                                                                                           // 160
              event.stopImmediatePropagation();                                                                        // 161
            }                                                                                                          // 162
          }                                                                                                            // 163
        },                                                                                                             // 156
        addContent: function (element) {                                                                               // 166
          var $content = $(element);                                                                                   // 167
          module.debug('Add content to dimmer', $content);                                                             // 170
                                                                                                                       //
          if ($content.parent()[0] !== $dimmer[0]) {                                                                   // 171
            $content.detach().appendTo($dimmer);                                                                       // 172
          }                                                                                                            // 173
        },                                                                                                             // 174
        create: function () {                                                                                          // 176
          var $element = $(settings.template.dimmer());                                                                // 177
                                                                                                                       //
          if (settings.variation) {                                                                                    // 180
            module.debug('Creating dimmer with variation', settings.variation);                                        // 181
            $element.addClass(settings.variation);                                                                     // 182
          }                                                                                                            // 183
                                                                                                                       //
          if (settings.dimmerName) {                                                                                   // 184
            module.debug('Creating named dimmer', settings.dimmerName);                                                // 185
            $element.addClass(settings.dimmerName);                                                                    // 186
          }                                                                                                            // 187
                                                                                                                       //
          $element.appendTo($dimmable);                                                                                // 188
          return $element;                                                                                             // 191
        },                                                                                                             // 192
        show: function (callback) {                                                                                    // 194
          callback = $.isFunction(callback) ? callback : function () {};                                               // 195
          module.debug('Showing dimmer', $dimmer, settings);                                                           // 199
                                                                                                                       //
          if ((!module.is.dimmed() || module.is.animating()) && module.is.enabled()) {                                 // 200
            module.animate.show(callback);                                                                             // 201
            settings.onShow.call(element);                                                                             // 202
            settings.onChange.call(element);                                                                           // 203
          } else {                                                                                                     // 204
            module.debug('Dimmer is already shown or disabled');                                                       // 206
          }                                                                                                            // 207
        },                                                                                                             // 208
        hide: function (callback) {                                                                                    // 210
          callback = $.isFunction(callback) ? callback : function () {};                                               // 211
                                                                                                                       //
          if (module.is.dimmed() || module.is.animating()) {                                                           // 215
            module.debug('Hiding dimmer', $dimmer);                                                                    // 216
            module.animate.hide(callback);                                                                             // 217
            settings.onHide.call(element);                                                                             // 218
            settings.onChange.call(element);                                                                           // 219
          } else {                                                                                                     // 220
            module.debug('Dimmer is not visible');                                                                     // 222
          }                                                                                                            // 223
        },                                                                                                             // 224
        toggle: function () {                                                                                          // 226
          module.verbose('Toggling dimmer visibility', $dimmer);                                                       // 227
                                                                                                                       //
          if (!module.is.dimmed()) {                                                                                   // 228
            module.show();                                                                                             // 229
          } else {                                                                                                     // 230
            module.hide();                                                                                             // 232
          }                                                                                                            // 233
        },                                                                                                             // 234
        animate: {                                                                                                     // 236
          show: function (callback) {                                                                                  // 237
            callback = $.isFunction(callback) ? callback : function () {};                                             // 238
                                                                                                                       //
            if (settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {              // 242
              if (settings.opacity !== 'auto') {                                                                       // 243
                module.set.opacity();                                                                                  // 244
              }                                                                                                        // 245
                                                                                                                       //
              $dimmer.transition({                                                                                     // 246
                animation: settings.transition + ' in',                                                                // 248
                queue: false,                                                                                          // 249
                duration: module.get.duration(),                                                                       // 250
                useFailSafe: true,                                                                                     // 251
                onStart: function () {                                                                                 // 252
                  module.set.dimmed();                                                                                 // 253
                },                                                                                                     // 254
                onComplete: function () {                                                                              // 255
                  module.set.active();                                                                                 // 256
                  callback();                                                                                          // 257
                }                                                                                                      // 258
              });                                                                                                      // 247
            } else {                                                                                                   // 261
              module.verbose('Showing dimmer animation with javascript');                                              // 263
              module.set.dimmed();                                                                                     // 264
                                                                                                                       //
              if (settings.opacity == 'auto') {                                                                        // 265
                settings.opacity = 0.8;                                                                                // 266
              }                                                                                                        // 267
                                                                                                                       //
              $dimmer.stop().css({                                                                                     // 268
                opacity: 0,                                                                                            // 271
                width: '100%',                                                                                         // 272
                height: '100%'                                                                                         // 273
              }).fadeTo(module.get.duration(), settings.opacity, function () {                                         // 270
                $dimmer.removeAttr('style');                                                                           // 276
                module.set.active();                                                                                   // 277
                callback();                                                                                            // 278
              });                                                                                                      // 279
            }                                                                                                          // 281
          },                                                                                                           // 282
          hide: function (callback) {                                                                                  // 283
            callback = $.isFunction(callback) ? callback : function () {};                                             // 284
                                                                                                                       //
            if (settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {              // 288
              module.verbose('Hiding dimmer with css');                                                                // 289
              $dimmer.transition({                                                                                     // 290
                animation: settings.transition + ' out',                                                               // 292
                queue: false,                                                                                          // 293
                duration: module.get.duration(),                                                                       // 294
                useFailSafe: true,                                                                                     // 295
                onStart: function () {                                                                                 // 296
                  module.remove.dimmed();                                                                              // 297
                },                                                                                                     // 298
                onComplete: function () {                                                                              // 299
                  module.remove.active();                                                                              // 300
                  callback();                                                                                          // 301
                }                                                                                                      // 302
              });                                                                                                      // 291
            } else {                                                                                                   // 305
              module.verbose('Hiding dimmer with javascript');                                                         // 307
              module.remove.dimmed();                                                                                  // 308
              $dimmer.stop().fadeOut(module.get.duration(), function () {                                              // 309
                module.remove.active();                                                                                // 312
                $dimmer.removeAttr('style');                                                                           // 313
                callback();                                                                                            // 314
              });                                                                                                      // 315
            }                                                                                                          // 317
          }                                                                                                            // 318
        },                                                                                                             // 236
        get: {                                                                                                         // 321
          dimmer: function () {                                                                                        // 322
            return $dimmer;                                                                                            // 323
          },                                                                                                           // 324
          duration: function () {                                                                                      // 325
            if ((0, _typeof3.default)(settings.duration) == 'object') {                                                // 326
              if (module.is.active()) {                                                                                // 327
                return settings.duration.hide;                                                                         // 328
              } else {                                                                                                 // 329
                return settings.duration.show;                                                                         // 331
              }                                                                                                        // 332
            }                                                                                                          // 333
                                                                                                                       //
            return settings.duration;                                                                                  // 334
          }                                                                                                            // 335
        },                                                                                                             // 321
        has: {                                                                                                         // 338
          dimmer: function () {                                                                                        // 339
            if (settings.dimmerName) {                                                                                 // 340
              return $module.find(selector.dimmer).filter('.' + settings.dimmerName).length > 0;                       // 341
            } else {                                                                                                   // 342
              return $module.find(selector.dimmer).length > 0;                                                         // 344
            }                                                                                                          // 345
          }                                                                                                            // 346
        },                                                                                                             // 338
        is: {                                                                                                          // 349
          active: function () {                                                                                        // 350
            return $dimmer.hasClass(className.active);                                                                 // 351
          },                                                                                                           // 352
          animating: function () {                                                                                     // 353
            return $dimmer.is(':animated') || $dimmer.hasClass(className.animating);                                   // 354
          },                                                                                                           // 355
          closable: function () {                                                                                      // 356
            if (settings.closable == 'auto') {                                                                         // 357
              if (settings.on == 'hover') {                                                                            // 358
                return false;                                                                                          // 359
              }                                                                                                        // 360
                                                                                                                       //
              return true;                                                                                             // 361
            }                                                                                                          // 362
                                                                                                                       //
            return settings.closable;                                                                                  // 363
          },                                                                                                           // 364
          dimmer: function () {                                                                                        // 365
            return $module.hasClass(className.dimmer);                                                                 // 366
          },                                                                                                           // 367
          dimmable: function () {                                                                                      // 368
            return $module.hasClass(className.dimmable);                                                               // 369
          },                                                                                                           // 370
          dimmed: function () {                                                                                        // 371
            return $dimmable.hasClass(className.dimmed);                                                               // 372
          },                                                                                                           // 373
          disabled: function () {                                                                                      // 374
            return $dimmable.hasClass(className.disabled);                                                             // 375
          },                                                                                                           // 376
          enabled: function () {                                                                                       // 377
            return !module.is.disabled();                                                                              // 378
          },                                                                                                           // 379
          page: function () {                                                                                          // 380
            return $dimmable.is('body');                                                                               // 381
          },                                                                                                           // 382
          pageDimmer: function () {                                                                                    // 383
            return $dimmer.hasClass(className.pageDimmer);                                                             // 384
          }                                                                                                            // 385
        },                                                                                                             // 349
        can: {                                                                                                         // 388
          show: function () {                                                                                          // 389
            return !$dimmer.hasClass(className.disabled);                                                              // 390
          }                                                                                                            // 391
        },                                                                                                             // 388
        set: {                                                                                                         // 394
          opacity: function (opacity) {                                                                                // 395
            var color = $dimmer.css('background-color'),                                                               // 396
                colorArray = color.split(','),                                                                         // 396
                isRGB = colorArray && colorArray.length == 3,                                                          // 396
                isRGBA = colorArray && colorArray.length == 4;                                                         // 396
            opacity = settings.opacity === 0 ? 0 : settings.opacity || opacity;                                        // 402
                                                                                                                       //
            if (isRGB || isRGBA) {                                                                                     // 403
              colorArray[3] = opacity + ')';                                                                           // 404
              color = colorArray.join(',');                                                                            // 405
            } else {                                                                                                   // 406
              color = 'rgba(0, 0, 0, ' + opacity + ')';                                                                // 408
            }                                                                                                          // 409
                                                                                                                       //
            module.debug('Setting opacity to', opacity);                                                               // 410
            $dimmer.css('background-color', color);                                                                    // 411
          },                                                                                                           // 412
          active: function () {                                                                                        // 413
            $dimmer.addClass(className.active);                                                                        // 414
          },                                                                                                           // 415
          dimmable: function () {                                                                                      // 416
            $dimmable.addClass(className.dimmable);                                                                    // 417
          },                                                                                                           // 418
          dimmed: function () {                                                                                        // 419
            $dimmable.addClass(className.dimmed);                                                                      // 420
          },                                                                                                           // 421
          pageDimmer: function () {                                                                                    // 422
            $dimmer.addClass(className.pageDimmer);                                                                    // 423
          },                                                                                                           // 424
          disabled: function () {                                                                                      // 425
            $dimmer.addClass(className.disabled);                                                                      // 426
          },                                                                                                           // 427
          variation: function (variation) {                                                                            // 428
            variation = variation || settings.variation;                                                               // 429
                                                                                                                       //
            if (variation) {                                                                                           // 430
              $dimmer.addClass(variation);                                                                             // 431
            }                                                                                                          // 432
          }                                                                                                            // 433
        },                                                                                                             // 394
        remove: {                                                                                                      // 436
          active: function () {                                                                                        // 437
            $dimmer.removeClass(className.active);                                                                     // 438
          },                                                                                                           // 441
          dimmed: function () {                                                                                        // 442
            $dimmable.removeClass(className.dimmed);                                                                   // 443
          },                                                                                                           // 444
          disabled: function () {                                                                                      // 445
            $dimmer.removeClass(className.disabled);                                                                   // 446
          },                                                                                                           // 447
          variation: function (variation) {                                                                            // 448
            variation = variation || settings.variation;                                                               // 449
                                                                                                                       //
            if (variation) {                                                                                           // 450
              $dimmer.removeClass(variation);                                                                          // 451
            }                                                                                                          // 452
          }                                                                                                            // 453
        },                                                                                                             // 436
        setting: function (name, value) {                                                                              // 456
          module.debug('Changing setting', name, value);                                                               // 457
                                                                                                                       //
          if ($.isPlainObject(name)) {                                                                                 // 458
            $.extend(true, settings, name);                                                                            // 459
          } else if (value !== undefined) {                                                                            // 460
            if ($.isPlainObject(settings[name])) {                                                                     // 462
              $.extend(true, settings[name], value);                                                                   // 463
            } else {                                                                                                   // 464
              settings[name] = value;                                                                                  // 466
            }                                                                                                          // 467
          } else {                                                                                                     // 468
            return settings[name];                                                                                     // 470
          }                                                                                                            // 471
        },                                                                                                             // 472
        internal: function (name, value) {                                                                             // 473
          if ($.isPlainObject(name)) {                                                                                 // 474
            $.extend(true, module, name);                                                                              // 475
          } else if (value !== undefined) {                                                                            // 476
            module[name] = value;                                                                                      // 478
          } else {                                                                                                     // 479
            return module[name];                                                                                       // 481
          }                                                                                                            // 482
        },                                                                                                             // 483
        debug: function () {                                                                                           // 484
          if (!settings.silent && settings.debug) {                                                                    // 485
            if (settings.performance) {                                                                                // 486
              module.performance.log(arguments);                                                                       // 487
            } else {                                                                                                   // 488
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 490
              module.debug.apply(console, arguments);                                                                  // 491
            }                                                                                                          // 492
          }                                                                                                            // 493
        },                                                                                                             // 494
        verbose: function () {                                                                                         // 495
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 496
            if (settings.performance) {                                                                                // 497
              module.performance.log(arguments);                                                                       // 498
            } else {                                                                                                   // 499
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 501
              module.verbose.apply(console, arguments);                                                                // 502
            }                                                                                                          // 503
          }                                                                                                            // 504
        },                                                                                                             // 505
        error: function () {                                                                                           // 506
          if (!settings.silent) {                                                                                      // 507
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 508
            module.error.apply(console, arguments);                                                                    // 509
          }                                                                                                            // 510
        },                                                                                                             // 511
        performance: {                                                                                                 // 512
          log: function (message) {                                                                                    // 513
            var currentTime, executionTime, previousTime;                                                              // 514
                                                                                                                       //
            if (settings.performance) {                                                                                // 519
              currentTime = new Date().getTime();                                                                      // 520
              previousTime = time || currentTime;                                                                      // 521
              executionTime = currentTime - previousTime;                                                              // 522
              time = currentTime;                                                                                      // 523
              performance.push({                                                                                       // 524
                'Name': message[0],                                                                                    // 525
                'Arguments': [].slice.call(message, 1) || '',                                                          // 526
                'Element': element,                                                                                    // 527
                'Execution Time': executionTime                                                                        // 528
              });                                                                                                      // 524
            }                                                                                                          // 530
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 531
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 532
          },                                                                                                           // 533
          display: function () {                                                                                       // 534
            var title = settings.name + ':',                                                                           // 535
                totalTime = 0;                                                                                         // 535
            time = false;                                                                                              // 539
            clearTimeout(module.performance.timer);                                                                    // 540
            $.each(performance, function (index, data) {                                                               // 541
              totalTime += data['Execution Time'];                                                                     // 542
            });                                                                                                        // 543
            title += ' ' + totalTime + 'ms';                                                                           // 544
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 545
              title += ' \'' + moduleSelector + '\'';                                                                  // 546
            }                                                                                                          // 547
                                                                                                                       //
            if ($allModules.length > 1) {                                                                              // 548
              title += ' ' + '(' + $allModules.length + ')';                                                           // 549
            }                                                                                                          // 550
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 551
              console.groupCollapsed(title);                                                                           // 552
                                                                                                                       //
              if (console.table) {                                                                                     // 553
                console.table(performance);                                                                            // 554
              } else {                                                                                                 // 555
                $.each(performance, function (index, data) {                                                           // 557
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 558
                });                                                                                                    // 559
              }                                                                                                        // 560
                                                                                                                       //
              console.groupEnd();                                                                                      // 561
            }                                                                                                          // 562
                                                                                                                       //
            performance = [];                                                                                          // 563
          }                                                                                                            // 564
        },                                                                                                             // 512
        invoke: function (query, passedArguments, context) {                                                           // 566
          var object = instance,                                                                                       // 567
              maxDepth,                                                                                                // 567
              found,                                                                                                   // 567
              response;                                                                                                // 567
          passedArguments = passedArguments || queryArguments;                                                         // 573
          context = element || context;                                                                                // 574
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 575
            query = query.split(/[\. ]/);                                                                              // 576
            maxDepth = query.length - 1;                                                                               // 577
            $.each(query, function (depth, value) {                                                                    // 578
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 583
                object = object[camelCaseValue];                                                                       // 584
              } else if (object[camelCaseValue] !== undefined) {                                                       // 585
                found = object[camelCaseValue];                                                                        // 587
                return false;                                                                                          // 588
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 589
                object = object[value];                                                                                // 591
              } else if (object[value] !== undefined) {                                                                // 592
                found = object[value];                                                                                 // 594
                return false;                                                                                          // 595
              } else {                                                                                                 // 596
                module.error(error.method, query);                                                                     // 598
                return false;                                                                                          // 599
              }                                                                                                        // 600
            });                                                                                                        // 601
          }                                                                                                            // 602
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 603
            response = found.apply(context, passedArguments);                                                          // 604
          } else if (found !== undefined) {                                                                            // 605
            response = found;                                                                                          // 607
          }                                                                                                            // 608
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 609
            returnedValue.push(response);                                                                              // 610
          } else if (returnedValue !== undefined) {                                                                    // 611
            returnedValue = [returnedValue, response];                                                                 // 613
          } else if (response !== undefined) {                                                                         // 614
            returnedValue = response;                                                                                  // 616
          }                                                                                                            // 617
                                                                                                                       //
          return found;                                                                                                // 618
        }                                                                                                              // 619
      };                                                                                                               // 69
      module.preinitialize();                                                                                          // 622
                                                                                                                       //
      if (methodInvoked) {                                                                                             // 624
        if (instance === undefined) {                                                                                  // 625
          module.initialize();                                                                                         // 626
        }                                                                                                              // 627
                                                                                                                       //
        module.invoke(query);                                                                                          // 628
      } else {                                                                                                         // 629
        if (instance !== undefined) {                                                                                  // 631
          instance.invoke('destroy');                                                                                  // 632
        }                                                                                                              // 633
                                                                                                                       //
        module.initialize();                                                                                           // 634
      }                                                                                                                // 635
    });                                                                                                                // 636
    return returnedValue !== undefined ? returnedValue : this;                                                         // 639
  };                                                                                                                   // 643
                                                                                                                       //
  $.fn.dimmer.settings = {                                                                                             // 645
    name: 'Dimmer',                                                                                                    // 647
    namespace: 'dimmer',                                                                                               // 648
    silent: false,                                                                                                     // 650
    debug: false,                                                                                                      // 651
    verbose: false,                                                                                                    // 652
    performance: true,                                                                                                 // 653
    // name to distinguish between multiple dimmers in context                                                         // 655
    dimmerName: false,                                                                                                 // 656
    // whether to add a variation type                                                                                 // 658
    variation: false,                                                                                                  // 659
    // whether to bind close events                                                                                    // 661
    closable: 'auto',                                                                                                  // 662
    // whether to use css animations                                                                                   // 664
    useCSS: true,                                                                                                      // 665
    // css animation to use                                                                                            // 667
    transition: 'fade',                                                                                                // 668
    // event to bind to                                                                                                // 670
    on: false,                                                                                                         // 671
    // overriding opacity value                                                                                        // 673
    opacity: 'auto',                                                                                                   // 674
    // transition durations                                                                                            // 676
    duration: {                                                                                                        // 677
      show: 500,                                                                                                       // 678
      hide: 500                                                                                                        // 679
    },                                                                                                                 // 677
    onChange: function () {},                                                                                          // 682
    onShow: function () {},                                                                                            // 683
    onHide: function () {},                                                                                            // 684
    error: {                                                                                                           // 686
      method: 'The method you called is not defined.'                                                                  // 687
    },                                                                                                                 // 686
    className: {                                                                                                       // 690
      active: 'active',                                                                                                // 691
      animating: 'animating',                                                                                          // 692
      dimmable: 'dimmable',                                                                                            // 693
      dimmed: 'dimmed',                                                                                                // 694
      dimmer: 'dimmer',                                                                                                // 695
      disabled: 'disabled',                                                                                            // 696
      hide: 'hide',                                                                                                    // 697
      pageDimmer: 'page',                                                                                              // 698
      show: 'show'                                                                                                     // 699
    },                                                                                                                 // 690
    selector: {                                                                                                        // 702
      dimmer: '> .ui.dimmer',                                                                                          // 703
      content: '.ui.dimmer > .content, .ui.dimmer > .content > .center'                                                // 704
    },                                                                                                                 // 702
    template: {                                                                                                        // 707
      dimmer: function () {                                                                                            // 708
        return $('<div />').attr('class', 'ui dimmer');                                                                // 709
      }                                                                                                                // 710
    }                                                                                                                  // 707
  };                                                                                                                   // 645
})(jQuery, window, document);                                                                                          // 715
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"dropdown.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/modules/dropdown.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Dropdown                                                                                         //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.dropdown = function (parameters) {                                                                              // 26
    var $allModules = $(this),                                                                                         // 27
        $document = $(document),                                                                                       // 27
        moduleSelector = $allModules.selector || '',                                                                   // 27
        hasTouch = 'ontouchstart' in document.documentElement,                                                         // 27
        time = new Date().getTime(),                                                                                   // 27
        performance = [],                                                                                              // 27
        query = arguments[0],                                                                                          // 27
        methodInvoked = typeof query == 'string',                                                                      // 27
        queryArguments = [].slice.call(arguments, 1),                                                                  // 27
        returnedValue;                                                                                                 // 27
    $allModules.each(function (elementIndex) {                                                                         // 43
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.dropdown.settings, parameters) : $.extend({}, $.fn.dropdown.settings),
          className = settings.className,                                                                              // 45
          message = settings.message,                                                                                  // 45
          fields = settings.fields,                                                                                    // 45
          keys = settings.keys,                                                                                        // 45
          metadata = settings.metadata,                                                                                // 45
          namespace = settings.namespace,                                                                              // 45
          regExp = settings.regExp,                                                                                    // 45
          selector = settings.selector,                                                                                // 45
          error = settings.error,                                                                                      // 45
          templates = settings.templates,                                                                              // 45
          eventNamespace = '.' + namespace,                                                                            // 45
          moduleNamespace = 'module-' + namespace,                                                                     // 45
          $module = $(this),                                                                                           // 45
          $context = $(settings.context),                                                                              // 45
          $text = $module.find(selector.text),                                                                         // 45
          $search = $module.find(selector.search),                                                                     // 45
          $sizer = $module.find(selector.sizer),                                                                       // 45
          $input = $module.find(selector.input),                                                                       // 45
          $icon = $module.find(selector.icon),                                                                         // 45
          $combo = $module.prev().find(selector.text).length > 0 ? $module.prev().find(selector.text) : $module.prev(),
          $menu = $module.children(selector.menu),                                                                     // 45
          $item = $menu.find(selector.item),                                                                           // 45
          activated = false,                                                                                           // 45
          itemActivated = false,                                                                                       // 45
          internalChange = false,                                                                                      // 45
          element = this,                                                                                              // 45
          instance = $module.data(moduleNamespace),                                                                    // 45
          initialLoad,                                                                                                 // 45
          pageLostFocus,                                                                                               // 45
          willRefocus,                                                                                                 // 45
          elementNamespace,                                                                                            // 45
          id,                                                                                                          // 45
          selectObserver,                                                                                              // 45
          menuObserver,                                                                                                // 45
          module;                                                                                                      // 45
      module = {                                                                                                       // 95
        initialize: function () {                                                                                      // 97
          module.debug('Initializing dropdown', settings);                                                             // 98
                                                                                                                       //
          if (module.is.alreadySetup()) {                                                                              // 100
            module.setup.reference();                                                                                  // 101
          } else {                                                                                                     // 102
            module.setup.layout();                                                                                     // 104
            module.refreshData();                                                                                      // 105
            module.save.defaults();                                                                                    // 107
            module.restore.selected();                                                                                 // 108
            module.create.id();                                                                                        // 110
            module.bind.events();                                                                                      // 111
            module.observeChanges();                                                                                   // 113
            module.instantiate();                                                                                      // 114
          }                                                                                                            // 115
        },                                                                                                             // 117
        instantiate: function () {                                                                                     // 119
          module.verbose('Storing instance of dropdown', module);                                                      // 120
          instance = module;                                                                                           // 121
          $module.data(moduleNamespace, module);                                                                       // 122
        },                                                                                                             // 125
        destroy: function () {                                                                                         // 127
          module.verbose('Destroying previous dropdown', $module);                                                     // 128
          module.remove.tabbable();                                                                                    // 129
          $module.off(eventNamespace).removeData(moduleNamespace);                                                     // 130
          $menu.off(eventNamespace);                                                                                   // 134
          $document.off(elementNamespace);                                                                             // 137
          module.disconnect.menuObserver();                                                                            // 140
          module.disconnect.selectObserver();                                                                          // 141
        },                                                                                                             // 142
        observeChanges: function () {                                                                                  // 144
          if ('MutationObserver' in window) {                                                                          // 145
            selectObserver = new MutationObserver(module.event.select.mutation);                                       // 146
            menuObserver = new MutationObserver(module.event.menu.mutation);                                           // 147
            module.debug('Setting up mutation observer', selectObserver, menuObserver);                                // 148
            module.observe.select();                                                                                   // 149
            module.observe.menu();                                                                                     // 150
          }                                                                                                            // 151
        },                                                                                                             // 152
        disconnect: {                                                                                                  // 154
          menuObserver: function () {                                                                                  // 155
            if (menuObserver) {                                                                                        // 156
              menuObserver.disconnect();                                                                               // 157
            }                                                                                                          // 158
          },                                                                                                           // 159
          selectObserver: function () {                                                                                // 160
            if (menuObserver) {                                                                                        // 161
              menuObserver.disconnect();                                                                               // 162
            }                                                                                                          // 163
          }                                                                                                            // 164
        },                                                                                                             // 154
        observe: {                                                                                                     // 166
          select: function () {                                                                                        // 167
            if (module.has.input()) {                                                                                  // 168
              selectObserver.observe($input[0], {                                                                      // 169
                childList: true,                                                                                       // 170
                subtree: true                                                                                          // 171
              });                                                                                                      // 169
            }                                                                                                          // 173
          },                                                                                                           // 174
          menu: function () {                                                                                          // 175
            if (module.has.menu()) {                                                                                   // 176
              menuObserver.observe($menu[0], {                                                                         // 177
                childList: true,                                                                                       // 178
                subtree: true                                                                                          // 179
              });                                                                                                      // 177
            }                                                                                                          // 181
          }                                                                                                            // 182
        },                                                                                                             // 166
        create: {                                                                                                      // 185
          id: function () {                                                                                            // 186
            id = (Math.random().toString(16) + '000000000').substr(2, 8);                                              // 187
            elementNamespace = '.' + id;                                                                               // 188
            module.verbose('Creating unique id for element', id);                                                      // 189
          },                                                                                                           // 190
          userChoice: function (values) {                                                                              // 191
            var $userChoices, $userChoice, isUserValue, html;                                                          // 192
            values = values || module.get.userValues();                                                                // 198
                                                                                                                       //
            if (!values) {                                                                                             // 199
              return false;                                                                                            // 200
            }                                                                                                          // 201
                                                                                                                       //
            values = $.isArray(values) ? values : [values];                                                            // 202
            $.each(values, function (index, value) {                                                                   // 206
              if (module.get.item(value) === false) {                                                                  // 207
                html = settings.templates.addition(module.add.variables(message.addResult, value));                    // 208
                $userChoice = $('<div />').html(html).attr('data-' + metadata.value, value).attr('data-' + metadata.text, value).addClass(className.addition).addClass(className.item);
                                                                                                                       //
                if (settings.hideAdditions) {                                                                          // 216
                  $userChoice.addClass(className.hidden);                                                              // 217
                }                                                                                                      // 218
                                                                                                                       //
                $userChoices = $userChoices === undefined ? $userChoice : $userChoices.add($userChoice);               // 219
                module.verbose('Creating user choices for value', value, $userChoice);                                 // 223
              }                                                                                                        // 224
            });                                                                                                        // 225
            return $userChoices;                                                                                       // 226
          },                                                                                                           // 227
          userLabels: function (value) {                                                                               // 228
            var userValues = module.get.userValues();                                                                  // 229
                                                                                                                       //
            if (userValues) {                                                                                          // 232
              module.debug('Adding user labels', userValues);                                                          // 233
              $.each(userValues, function (index, value) {                                                             // 234
                module.verbose('Adding custom user value');                                                            // 235
                module.add.label(value, value);                                                                        // 236
              });                                                                                                      // 237
            }                                                                                                          // 238
          },                                                                                                           // 239
          menu: function () {                                                                                          // 240
            $menu = $('<div />').addClass(className.menu).appendTo($module);                                           // 241
          },                                                                                                           // 245
          sizer: function () {                                                                                         // 246
            $sizer = $('<span />').addClass(className.sizer).insertAfter($search);                                     // 247
          }                                                                                                            // 251
        },                                                                                                             // 185
        search: function (query) {                                                                                     // 254
          query = query !== undefined ? query : module.get.query();                                                    // 255
          module.verbose('Searching for query', query);                                                                // 259
                                                                                                                       //
          if (module.has.minCharacters(query)) {                                                                       // 260
            module.filter(query);                                                                                      // 261
          } else {                                                                                                     // 262
            module.hide();                                                                                             // 264
          }                                                                                                            // 265
        },                                                                                                             // 266
        select: {                                                                                                      // 268
          firstUnfiltered: function () {                                                                               // 269
            module.verbose('Selecting first non-filtered element');                                                    // 270
            module.remove.selectedItem();                                                                              // 271
            $item.not(selector.unselectable).not(selector.addition + selector.hidden).eq(0).addClass(className.selected);
          },                                                                                                           // 278
          nextAvailable: function ($selected) {                                                                        // 279
            $selected = $selected.eq(0);                                                                               // 280
            var $nextAvailable = $selected.nextAll(selector.item).not(selector.unselectable).eq(0),                    // 281
                $prevAvailable = $selected.prevAll(selector.item).not(selector.unselectable).eq(0),                    // 281
                hasNext = $nextAvailable.length > 0;                                                                   // 281
                                                                                                                       //
            if (hasNext) {                                                                                             // 286
              module.verbose('Moving selection to', $nextAvailable);                                                   // 287
              $nextAvailable.addClass(className.selected);                                                             // 288
            } else {                                                                                                   // 289
              module.verbose('Moving selection to', $prevAvailable);                                                   // 291
              $prevAvailable.addClass(className.selected);                                                             // 292
            }                                                                                                          // 293
          }                                                                                                            // 294
        },                                                                                                             // 268
        setup: {                                                                                                       // 297
          api: function () {                                                                                           // 298
            var apiSettings = {                                                                                        // 299
              debug: settings.debug,                                                                                   // 301
              urlData: {                                                                                               // 302
                value: module.get.value(),                                                                             // 303
                query: module.get.query()                                                                              // 304
              },                                                                                                       // 302
              on: false                                                                                                // 306
            };                                                                                                         // 300
            module.verbose('First request, initializing API');                                                         // 309
            $module.api(apiSettings);                                                                                  // 310
          },                                                                                                           // 313
          layout: function () {                                                                                        // 314
            if ($module.is('select')) {                                                                                // 315
              module.setup.select();                                                                                   // 316
              module.setup.returnedObject();                                                                           // 317
            }                                                                                                          // 318
                                                                                                                       //
            if (!module.has.menu()) {                                                                                  // 319
              module.create.menu();                                                                                    // 320
            }                                                                                                          // 321
                                                                                                                       //
            if (module.is.search() && !module.has.search()) {                                                          // 322
              module.verbose('Adding search input');                                                                   // 323
              $search = $('<input />').addClass(className.search).prop('autocomplete', 'off').insertBefore($text);     // 324
            }                                                                                                          // 329
                                                                                                                       //
            if (module.is.multiple() && module.is.searchSelection() && !module.has.sizer()) {                          // 330
              module.create.sizer();                                                                                   // 331
            }                                                                                                          // 332
                                                                                                                       //
            if (settings.allowTab) {                                                                                   // 333
              module.set.tabbable();                                                                                   // 334
            }                                                                                                          // 335
          },                                                                                                           // 336
          select: function () {                                                                                        // 337
            var selectValues = module.get.selectValues();                                                              // 338
            module.debug('Dropdown initialized on a select', selectValues);                                            // 341
                                                                                                                       //
            if ($module.is('select')) {                                                                                // 342
              $input = $module;                                                                                        // 343
            } // see if select is placed correctly already                                                             // 344
                                                                                                                       //
                                                                                                                       //
            if ($input.parent(selector.dropdown).length > 0) {                                                         // 346
              module.debug('UI dropdown already exists. Creating dropdown menu only');                                 // 347
              $module = $input.closest(selector.dropdown);                                                             // 348
                                                                                                                       //
              if (!module.has.menu()) {                                                                                // 349
                module.create.menu();                                                                                  // 350
              }                                                                                                        // 351
                                                                                                                       //
              $menu = $module.children(selector.menu);                                                                 // 352
              module.setup.menu(selectValues);                                                                         // 353
            } else {                                                                                                   // 354
              module.debug('Creating entire dropdown from select');                                                    // 356
              $module = $('<div />').attr('class', $input.attr('class')).addClass(className.selection).addClass(className.dropdown).html(templates.dropdown(selectValues)).insertBefore($input);
                                                                                                                       //
              if ($input.hasClass(className.multiple) && $input.prop('multiple') === false) {                          // 364
                module.error(error.missingMultiple);                                                                   // 365
                $input.prop('multiple', true);                                                                         // 366
              }                                                                                                        // 367
                                                                                                                       //
              if ($input.is('[multiple]')) {                                                                           // 368
                module.set.multiple();                                                                                 // 369
              }                                                                                                        // 370
                                                                                                                       //
              if ($input.prop('disabled')) {                                                                           // 371
                module.debug('Disabling dropdown');                                                                    // 372
                $module.addClass(className.disabled);                                                                  // 373
              }                                                                                                        // 374
                                                                                                                       //
              $input.removeAttr('class').detach().prependTo($module);                                                  // 375
            }                                                                                                          // 380
                                                                                                                       //
            module.refresh();                                                                                          // 381
          },                                                                                                           // 382
          menu: function (values) {                                                                                    // 383
            $menu.html(templates.menu(values, fields));                                                                // 384
            $item = $menu.find(selector.item);                                                                         // 385
          },                                                                                                           // 386
          reference: function () {                                                                                     // 387
            module.debug('Dropdown behavior was called on select, replacing with closest dropdown'); // replace module reference
                                                                                                                       //
            $module = $module.parent(selector.dropdown);                                                               // 390
            module.refresh();                                                                                          // 391
            module.setup.returnedObject(); // invoke method in context of current instance                             // 392
                                                                                                                       //
            if (methodInvoked) {                                                                                       // 394
              instance = module;                                                                                       // 395
              module.invoke(query);                                                                                    // 396
            }                                                                                                          // 397
          },                                                                                                           // 398
          returnedObject: function () {                                                                                // 399
            var $firstModules = $allModules.slice(0, elementIndex),                                                    // 400
                $lastModules = $allModules.slice(elementIndex + 1); // adjust all modules to use correct reference     // 400
                                                                                                                       //
            $allModules = $firstModules.add($module).add($lastModules);                                                // 405
          }                                                                                                            // 406
        },                                                                                                             // 297
        refresh: function () {                                                                                         // 409
          module.refreshSelectors();                                                                                   // 410
          module.refreshData();                                                                                        // 411
        },                                                                                                             // 412
        refreshItems: function () {                                                                                    // 414
          $item = $menu.find(selector.item);                                                                           // 415
        },                                                                                                             // 416
        refreshSelectors: function () {                                                                                // 418
          module.verbose('Refreshing selector cache');                                                                 // 419
          $text = $module.find(selector.text);                                                                         // 420
          $search = $module.find(selector.search);                                                                     // 421
          $input = $module.find(selector.input);                                                                       // 422
          $icon = $module.find(selector.icon);                                                                         // 423
          $combo = $module.prev().find(selector.text).length > 0 ? $module.prev().find(selector.text) : $module.prev();
          $menu = $module.children(selector.menu);                                                                     // 428
          $item = $menu.find(selector.item);                                                                           // 429
        },                                                                                                             // 430
        refreshData: function () {                                                                                     // 432
          module.verbose('Refreshing cached metadata');                                                                // 433
          $item.removeData(metadata.text).removeData(metadata.value);                                                  // 434
        },                                                                                                             // 438
        clearData: function () {                                                                                       // 440
          module.verbose('Clearing metadata');                                                                         // 441
          $item.removeData(metadata.text).removeData(metadata.value);                                                  // 442
          $module.removeData(metadata.defaultText).removeData(metadata.defaultValue).removeData(metadata.placeholderText);
        },                                                                                                             // 451
        toggle: function () {                                                                                          // 453
          module.verbose('Toggling menu visibility');                                                                  // 454
                                                                                                                       //
          if (!module.is.active()) {                                                                                   // 455
            module.show();                                                                                             // 456
          } else {                                                                                                     // 457
            module.hide();                                                                                             // 459
          }                                                                                                            // 460
        },                                                                                                             // 461
        show: function (callback) {                                                                                    // 463
          callback = $.isFunction(callback) ? callback : function () {};                                               // 464
                                                                                                                       //
          if (module.can.show() && !module.is.active()) {                                                              // 468
            module.debug('Showing dropdown');                                                                          // 469
                                                                                                                       //
            if (module.has.message() && !(module.has.maxSelections() || module.has.allResultsFiltered())) {            // 470
              module.remove.message();                                                                                 // 471
            }                                                                                                          // 472
                                                                                                                       //
            if (module.is.allFiltered()) {                                                                             // 473
              return true;                                                                                             // 474
            }                                                                                                          // 475
                                                                                                                       //
            if (settings.onShow.call(element) !== false) {                                                             // 476
              module.animate.show(function () {                                                                        // 477
                if (module.can.click()) {                                                                              // 478
                  module.bind.intent();                                                                                // 479
                }                                                                                                      // 480
                                                                                                                       //
                if (module.has.menuSearch()) {                                                                         // 481
                  module.focusSearch();                                                                                // 482
                }                                                                                                      // 483
                                                                                                                       //
                module.set.visible();                                                                                  // 484
                callback.call(element);                                                                                // 485
              });                                                                                                      // 486
            }                                                                                                          // 487
          }                                                                                                            // 488
        },                                                                                                             // 489
        hide: function (callback) {                                                                                    // 491
          callback = $.isFunction(callback) ? callback : function () {};                                               // 492
                                                                                                                       //
          if (module.is.active()) {                                                                                    // 496
            module.debug('Hiding dropdown');                                                                           // 497
                                                                                                                       //
            if (settings.onHide.call(element) !== false) {                                                             // 498
              module.animate.hide(function () {                                                                        // 499
                module.remove.visible();                                                                               // 500
                callback.call(element);                                                                                // 501
              });                                                                                                      // 502
            }                                                                                                          // 503
          }                                                                                                            // 504
        },                                                                                                             // 505
        hideOthers: function () {                                                                                      // 507
          module.verbose('Finding other dropdowns to hide');                                                           // 508
          $allModules.not($module).has(selector.menu + '.' + className.visible).dropdown('hide');                      // 509
        },                                                                                                             // 514
        hideMenu: function () {                                                                                        // 516
          module.verbose('Hiding menu  instantaneously');                                                              // 517
          module.remove.active();                                                                                      // 518
          module.remove.visible();                                                                                     // 519
          $menu.transition('hide');                                                                                    // 520
        },                                                                                                             // 521
        hideSubMenus: function () {                                                                                    // 523
          var $subMenus = $menu.children(selector.item).find(selector.menu);                                           // 524
          module.verbose('Hiding sub menus', $subMenus);                                                               // 527
          $subMenus.transition('hide');                                                                                // 528
        },                                                                                                             // 529
        bind: {                                                                                                        // 531
          events: function () {                                                                                        // 532
            if (hasTouch) {                                                                                            // 533
              module.bind.touchEvents();                                                                               // 534
            }                                                                                                          // 535
                                                                                                                       //
            module.bind.keyboardEvents();                                                                              // 536
            module.bind.inputEvents();                                                                                 // 537
            module.bind.mouseEvents();                                                                                 // 538
          },                                                                                                           // 539
          touchEvents: function () {                                                                                   // 540
            module.debug('Touch device detected binding additional touch events');                                     // 541
                                                                                                                       //
            if (module.is.searchSelection()) {// do nothing special yet                                                // 542
            } else if (module.is.single()) {                                                                           // 544
              $module.on('touchstart' + eventNamespace, module.event.test.toggle);                                     // 546
            }                                                                                                          // 549
                                                                                                                       //
            $menu.on('touchstart' + eventNamespace, selector.item, module.event.item.mouseenter);                      // 550
          },                                                                                                           // 553
          keyboardEvents: function () {                                                                                // 554
            module.verbose('Binding keyboard events');                                                                 // 555
            $module.on('keydown' + eventNamespace, module.event.keydown);                                              // 556
                                                                                                                       //
            if (module.has.search()) {                                                                                 // 559
              $module.on(module.get.inputEvent() + eventNamespace, selector.search, module.event.input);               // 560
            }                                                                                                          // 563
                                                                                                                       //
            if (module.is.multiple()) {                                                                                // 564
              $document.on('keydown' + elementNamespace, module.event.document.keydown);                               // 565
            }                                                                                                          // 568
          },                                                                                                           // 569
          inputEvents: function () {                                                                                   // 570
            module.verbose('Binding input change events');                                                             // 571
            $module.on('change' + eventNamespace, selector.input, module.event.change);                                // 572
          },                                                                                                           // 575
          mouseEvents: function () {                                                                                   // 576
            module.verbose('Binding mouse events');                                                                    // 577
                                                                                                                       //
            if (module.is.multiple()) {                                                                                // 578
              $module.on('click' + eventNamespace, selector.label, module.event.label.click).on('click' + eventNamespace, selector.remove, module.event.remove.click);
            }                                                                                                          // 583
                                                                                                                       //
            if (module.is.searchSelection()) {                                                                         // 584
              $module.on('mousedown' + eventNamespace, module.event.mousedown).on('mouseup' + eventNamespace, module.event.mouseup).on('mousedown' + eventNamespace, selector.menu, module.event.menu.mousedown).on('mouseup' + eventNamespace, selector.menu, module.event.menu.mouseup).on('click' + eventNamespace, selector.icon, module.event.icon.click).on('focus' + eventNamespace, selector.search, module.event.search.focus).on('click' + eventNamespace, selector.search, module.event.search.focus).on('blur' + eventNamespace, selector.search, module.event.search.blur).on('click' + eventNamespace, selector.text, module.event.text.focus);
                                                                                                                       //
              if (module.is.multiple()) {                                                                              // 596
                $module.on('click' + eventNamespace, module.event.click);                                              // 597
              }                                                                                                        // 600
            } else {                                                                                                   // 601
              if (settings.on == 'click') {                                                                            // 603
                $module.on('click' + eventNamespace, selector.icon, module.event.icon.click).on('click' + eventNamespace, module.event.test.toggle);
              } else if (settings.on == 'hover') {                                                                     // 608
                $module.on('mouseenter' + eventNamespace, module.delay.show).on('mouseleave' + eventNamespace, module.delay.hide);
              } else {                                                                                                 // 614
                $module.on(settings.on + eventNamespace, module.toggle);                                               // 616
              }                                                                                                        // 619
                                                                                                                       //
              $module.on('mousedown' + eventNamespace, module.event.mousedown).on('mouseup' + eventNamespace, module.event.mouseup).on('focus' + eventNamespace, module.event.focus).on('blur' + eventNamespace, module.event.blur);
            }                                                                                                          // 626
                                                                                                                       //
            $menu.on('mouseenter' + eventNamespace, selector.item, module.event.item.mouseenter).on('mouseleave' + eventNamespace, selector.item, module.event.item.mouseleave).on('click' + eventNamespace, selector.item, module.event.item.click);
          },                                                                                                           // 632
          intent: function () {                                                                                        // 633
            module.verbose('Binding hide intent event to document');                                                   // 634
                                                                                                                       //
            if (hasTouch) {                                                                                            // 635
              $document.on('touchstart' + elementNamespace, module.event.test.touch).on('touchmove' + elementNamespace, module.event.test.touch);
            }                                                                                                          // 640
                                                                                                                       //
            $document.on('click' + elementNamespace, module.event.test.hide);                                          // 641
          }                                                                                                            // 644
        },                                                                                                             // 531
        unbind: {                                                                                                      // 647
          intent: function () {                                                                                        // 648
            module.verbose('Removing hide intent event from document');                                                // 649
                                                                                                                       //
            if (hasTouch) {                                                                                            // 650
              $document.off('touchstart' + elementNamespace).off('touchmove' + elementNamespace);                      // 651
            }                                                                                                          // 655
                                                                                                                       //
            $document.off('click' + elementNamespace);                                                                 // 656
          }                                                                                                            // 659
        },                                                                                                             // 647
        filter: function (query) {                                                                                     // 662
          var searchTerm = query !== undefined ? query : module.get.query(),                                           // 663
              afterFiltered = function () {                                                                            // 663
            if (module.is.multiple()) {                                                                                // 668
              module.filterActive();                                                                                   // 669
            }                                                                                                          // 670
                                                                                                                       //
            module.select.firstUnfiltered();                                                                           // 671
                                                                                                                       //
            if (module.has.allResultsFiltered()) {                                                                     // 672
              if (settings.onNoResults.call(element, searchTerm)) {                                                    // 673
                if (settings.allowAdditions) {                                                                         // 674
                  if (settings.hideAdditions) {                                                                        // 675
                    module.verbose('User addition with no menu, setting empty style');                                 // 676
                    module.set.empty();                                                                                // 677
                    module.hideMenu();                                                                                 // 678
                  }                                                                                                    // 679
                } else {                                                                                               // 680
                  module.verbose('All items filtered, showing message', searchTerm);                                   // 682
                  module.add.message(message.noResults);                                                               // 683
                }                                                                                                      // 684
              } else {                                                                                                 // 685
                module.verbose('All items filtered, hiding dropdown', searchTerm);                                     // 687
                module.hideMenu();                                                                                     // 688
              }                                                                                                        // 689
            } else {                                                                                                   // 690
              module.remove.empty();                                                                                   // 692
              module.remove.message();                                                                                 // 693
            }                                                                                                          // 694
                                                                                                                       //
            if (settings.allowAdditions) {                                                                             // 695
              module.add.userSuggestion(query);                                                                        // 696
            }                                                                                                          // 697
                                                                                                                       //
            if (module.is.searchSelection() && module.can.show() && module.is.focusedOnSearch()) {                     // 698
              module.show();                                                                                           // 699
            }                                                                                                          // 700
          };                                                                                                           // 701
                                                                                                                       //
          if (settings.useLabels && module.has.maxSelections()) {                                                      // 703
            return;                                                                                                    // 704
          }                                                                                                            // 705
                                                                                                                       //
          if (settings.apiSettings) {                                                                                  // 706
            if (module.can.useAPI()) {                                                                                 // 707
              module.queryRemote(searchTerm, function () {                                                             // 708
                afterFiltered();                                                                                       // 709
              });                                                                                                      // 710
            } else {                                                                                                   // 711
              module.error(error.noAPI);                                                                               // 713
            }                                                                                                          // 714
          } else {                                                                                                     // 715
            module.filterItems(searchTerm);                                                                            // 717
            afterFiltered();                                                                                           // 718
          }                                                                                                            // 719
        },                                                                                                             // 720
        queryRemote: function (query, callback) {                                                                      // 722
          var apiSettings = {                                                                                          // 723
            errorDuration: false,                                                                                      // 725
            cache: 'local',                                                                                            // 726
            throttle: settings.throttle,                                                                               // 727
            urlData: {                                                                                                 // 728
              query: query                                                                                             // 729
            },                                                                                                         // 728
            onError: function () {                                                                                     // 731
              module.add.message(message.serverError);                                                                 // 732
              callback();                                                                                              // 733
            },                                                                                                         // 734
            onFailure: function () {                                                                                   // 735
              module.add.message(message.serverError);                                                                 // 736
              callback();                                                                                              // 737
            },                                                                                                         // 738
            onSuccess: function (response) {                                                                           // 739
              module.remove.message();                                                                                 // 740
              module.setup.menu({                                                                                      // 741
                values: response[fields.remoteValues]                                                                  // 742
              });                                                                                                      // 741
              callback();                                                                                              // 744
            }                                                                                                          // 745
          };                                                                                                           // 724
                                                                                                                       //
          if (!$module.api('get request')) {                                                                           // 748
            module.setup.api();                                                                                        // 749
          }                                                                                                            // 750
                                                                                                                       //
          apiSettings = $.extend(true, {}, apiSettings, settings.apiSettings);                                         // 751
          $module.api('setting', apiSettings).api('query');                                                            // 752
        },                                                                                                             // 756
        filterItems: function (query) {                                                                                // 758
          var searchTerm = query !== undefined ? query : module.get.query(),                                           // 759
              results = null,                                                                                          // 759
              escapedTerm = module.escape.regExp(searchTerm),                                                          // 759
              beginsWithRegExp = new RegExp('^' + escapedTerm, 'igm'); // avoid loop if we're matching nothing         // 759
                                                                                                                       //
          if (module.has.query()) {                                                                                    // 768
            results = [];                                                                                              // 769
            module.verbose('Searching for matching values', searchTerm);                                               // 771
            $item.each(function () {                                                                                   // 772
              var $choice = $(this),                                                                                   // 774
                  text,                                                                                                // 774
                  value;                                                                                               // 774
                                                                                                                       //
              if (settings.match == 'both' || settings.match == 'text') {                                              // 779
                text = String(module.get.choiceText($choice, false));                                                  // 780
                                                                                                                       //
                if (text.search(beginsWithRegExp) !== -1) {                                                            // 781
                  results.push(this);                                                                                  // 782
                  return true;                                                                                         // 783
                } else if (settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, text)) {              // 784
                  results.push(this);                                                                                  // 786
                  return true;                                                                                         // 787
                } else if (settings.fullTextSearch === true && module.fuzzySearch(searchTerm, text)) {                 // 788
                  results.push(this);                                                                                  // 790
                  return true;                                                                                         // 791
                }                                                                                                      // 792
              }                                                                                                        // 793
                                                                                                                       //
              if (settings.match == 'both' || settings.match == 'value') {                                             // 794
                value = String(module.get.choiceValue($choice, text));                                                 // 795
                                                                                                                       //
                if (value.search(beginsWithRegExp) !== -1) {                                                           // 797
                  results.push(this);                                                                                  // 798
                  return true;                                                                                         // 799
                } else if (settings.fullTextSearch && module.fuzzySearch(searchTerm, value)) {                         // 800
                  results.push(this);                                                                                  // 802
                  return true;                                                                                         // 803
                }                                                                                                      // 804
              }                                                                                                        // 805
            });                                                                                                        // 806
          }                                                                                                            // 808
                                                                                                                       //
          module.debug('Showing only matched items', searchTerm);                                                      // 809
          module.remove.filteredItem();                                                                                // 810
                                                                                                                       //
          if (results) {                                                                                               // 811
            $item.not(results).addClass(className.filtered);                                                           // 812
          }                                                                                                            // 816
        },                                                                                                             // 817
        fuzzySearch: function (query, term) {                                                                          // 819
          var termLength = term.length,                                                                                // 820
              queryLength = query.length;                                                                              // 820
          query = query.toLowerCase();                                                                                 // 824
          term = term.toLowerCase();                                                                                   // 825
                                                                                                                       //
          if (queryLength > termLength) {                                                                              // 826
            return false;                                                                                              // 827
          }                                                                                                            // 828
                                                                                                                       //
          if (queryLength === termLength) {                                                                            // 829
            return query === term;                                                                                     // 830
          }                                                                                                            // 831
                                                                                                                       //
          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {
            var queryCharacter = query.charCodeAt(characterIndex);                                                     // 833
                                                                                                                       //
            while (nextCharacterIndex < termLength) {                                                                  // 836
              if (term.charCodeAt(nextCharacterIndex++) === queryCharacter) {                                          // 837
                continue search;                                                                                       // 838
              }                                                                                                        // 839
            }                                                                                                          // 840
                                                                                                                       //
            return false;                                                                                              // 841
          }                                                                                                            // 842
                                                                                                                       //
          return true;                                                                                                 // 843
        },                                                                                                             // 844
        exactSearch: function (query, term) {                                                                          // 845
          query = query.toLowerCase();                                                                                 // 846
          term = term.toLowerCase();                                                                                   // 847
                                                                                                                       //
          if (term.indexOf(query) > -1) {                                                                              // 848
            return true;                                                                                               // 849
          }                                                                                                            // 850
                                                                                                                       //
          return false;                                                                                                // 851
        },                                                                                                             // 852
        filterActive: function () {                                                                                    // 853
          if (settings.useLabels) {                                                                                    // 854
            $item.filter('.' + className.active).addClass(className.filtered);                                         // 855
          }                                                                                                            // 858
        },                                                                                                             // 859
        focusSearch: function (skipHandler) {                                                                          // 861
          if (module.has.search() && !module.is.focusedOnSearch()) {                                                   // 862
            if (skipHandler) {                                                                                         // 863
              $module.off('focus' + eventNamespace, selector.search);                                                  // 864
              $search.focus();                                                                                         // 865
              $module.on('focus' + eventNamespace, selector.search, module.event.search.focus);                        // 866
            } else {                                                                                                   // 867
              $search.focus();                                                                                         // 869
            }                                                                                                          // 870
          }                                                                                                            // 871
        },                                                                                                             // 872
        forceSelection: function () {                                                                                  // 874
          var $currentlySelected = $item.not(className.filtered).filter('.' + className.selected).eq(0),               // 875
              $activeItem = $item.not(className.filtered).filter('.' + className.active).eq(0),                        // 875
              $selectedItem = $currentlySelected.length > 0 ? $currentlySelected : $activeItem,                        // 875
              hasSelected = $selectedItem.length > 0;                                                                  // 875
                                                                                                                       //
          if (hasSelected) {                                                                                           // 883
            module.debug('Forcing partial selection to selected item', $selectedItem);                                 // 884
            module.event.item.click.call($selectedItem, {}, true);                                                     // 885
            return;                                                                                                    // 886
          } else {                                                                                                     // 887
            if (settings.allowAdditions) {                                                                             // 889
              module.set.selected(module.get.query());                                                                 // 890
              module.remove.searchTerm();                                                                              // 891
            } else {                                                                                                   // 892
              module.remove.searchTerm();                                                                              // 894
            }                                                                                                          // 895
          }                                                                                                            // 896
        },                                                                                                             // 897
        event: {                                                                                                       // 899
          change: function () {                                                                                        // 900
            if (!internalChange) {                                                                                     // 901
              module.debug('Input changed, updating selection');                                                       // 902
              module.set.selected();                                                                                   // 903
            }                                                                                                          // 904
          },                                                                                                           // 905
          focus: function () {                                                                                         // 906
            if (settings.showOnFocus && !activated && module.is.hidden() && !pageLostFocus) {                          // 907
              module.show();                                                                                           // 908
            }                                                                                                          // 909
          },                                                                                                           // 910
          blur: function (event) {                                                                                     // 911
            pageLostFocus = document.activeElement === this;                                                           // 912
                                                                                                                       //
            if (!activated && !pageLostFocus) {                                                                        // 913
              module.remove.activeLabel();                                                                             // 914
              module.hide();                                                                                           // 915
            }                                                                                                          // 916
          },                                                                                                           // 917
          mousedown: function () {                                                                                     // 918
            if (module.is.searchSelection()) {                                                                         // 919
              // prevent menu hiding on immediate re-focus                                                             // 920
              willRefocus = true;                                                                                      // 921
            } else {                                                                                                   // 922
              // prevents focus callback from occurring on mousedown                                                   // 924
              activated = true;                                                                                        // 925
            }                                                                                                          // 926
          },                                                                                                           // 927
          mouseup: function () {                                                                                       // 928
            if (module.is.searchSelection()) {                                                                         // 929
              // prevent menu hiding on immediate re-focus                                                             // 930
              willRefocus = false;                                                                                     // 931
            } else {                                                                                                   // 932
              activated = false;                                                                                       // 934
            }                                                                                                          // 935
          },                                                                                                           // 936
          click: function (event) {                                                                                    // 937
            var $target = $(event.target); // focus search                                                             // 938
                                                                                                                       //
            if ($target.is($module)) {                                                                                 // 942
              if (!module.is.focusedOnSearch()) {                                                                      // 943
                module.focusSearch();                                                                                  // 944
              } else {                                                                                                 // 945
                module.show();                                                                                         // 947
              }                                                                                                        // 948
            }                                                                                                          // 949
          },                                                                                                           // 950
          search: {                                                                                                    // 951
            focus: function () {                                                                                       // 952
              activated = true;                                                                                        // 953
                                                                                                                       //
              if (module.is.multiple()) {                                                                              // 954
                module.remove.activeLabel();                                                                           // 955
              }                                                                                                        // 956
                                                                                                                       //
              if (settings.showOnFocus) {                                                                              // 957
                module.search();                                                                                       // 958
              }                                                                                                        // 959
            },                                                                                                         // 960
            blur: function (event) {                                                                                   // 961
              pageLostFocus = document.activeElement === this;                                                         // 962
                                                                                                                       //
              if (!willRefocus) {                                                                                      // 963
                if (!itemActivated && !pageLostFocus) {                                                                // 964
                  if (settings.forceSelection && module.has.query()) {                                                 // 965
                    module.forceSelection();                                                                           // 966
                  }                                                                                                    // 967
                                                                                                                       //
                  module.hide();                                                                                       // 968
                }                                                                                                      // 969
              }                                                                                                        // 970
                                                                                                                       //
              willRefocus = false;                                                                                     // 971
            }                                                                                                          // 972
          },                                                                                                           // 951
          icon: {                                                                                                      // 974
            click: function (event) {                                                                                  // 975
              module.toggle();                                                                                         // 976
              event.stopPropagation();                                                                                 // 977
            }                                                                                                          // 978
          },                                                                                                           // 974
          text: {                                                                                                      // 980
            focus: function (event) {                                                                                  // 981
              activated = true;                                                                                        // 982
              module.focusSearch();                                                                                    // 983
            }                                                                                                          // 984
          },                                                                                                           // 980
          input: function (event) {                                                                                    // 986
            if (module.is.multiple() || module.is.searchSelection()) {                                                 // 987
              module.set.filtered();                                                                                   // 988
            }                                                                                                          // 989
                                                                                                                       //
            clearTimeout(module.timer);                                                                                // 990
            module.timer = setTimeout(module.search, settings.delay.search);                                           // 991
          },                                                                                                           // 992
          label: {                                                                                                     // 993
            click: function (event) {                                                                                  // 994
              var $label = $(this),                                                                                    // 995
                  $labels = $module.find(selector.label),                                                              // 995
                  $activeLabels = $labels.filter('.' + className.active),                                              // 995
                  $nextActive = $label.nextAll('.' + className.active),                                                // 995
                  $prevActive = $label.prevAll('.' + className.active),                                                // 995
                  $range = $nextActive.length > 0 ? $label.nextUntil($nextActive).add($activeLabels).add($label) : $label.prevUntil($prevActive).add($activeLabels).add($label);
                                                                                                                       //
              if (event.shiftKey) {                                                                                    // 1005
                $activeLabels.removeClass(className.active);                                                           // 1006
                $range.addClass(className.active);                                                                     // 1007
              } else if (event.ctrlKey) {                                                                              // 1008
                $label.toggleClass(className.active);                                                                  // 1010
              } else {                                                                                                 // 1011
                $activeLabels.removeClass(className.active);                                                           // 1013
                $label.addClass(className.active);                                                                     // 1014
              }                                                                                                        // 1015
                                                                                                                       //
              settings.onLabelSelect.apply(this, $labels.filter('.' + className.active));                              // 1016
            }                                                                                                          // 1017
          },                                                                                                           // 993
          remove: {                                                                                                    // 1019
            click: function () {                                                                                       // 1020
              var $label = $(this).parent();                                                                           // 1021
                                                                                                                       //
              if ($label.hasClass(className.active)) {                                                                 // 1024
                // remove all selected labels                                                                          // 1025
                module.remove.activeLabels();                                                                          // 1026
              } else {                                                                                                 // 1027
                // remove this label only                                                                              // 1029
                module.remove.activeLabels($label);                                                                    // 1030
              }                                                                                                        // 1031
            }                                                                                                          // 1032
          },                                                                                                           // 1019
          test: {                                                                                                      // 1034
            toggle: function (event) {                                                                                 // 1035
              var toggleBehavior = module.is.multiple() ? module.show : module.toggle;                                 // 1036
                                                                                                                       //
              if (module.is.bubbledLabelClick(event)) {                                                                // 1041
                return;                                                                                                // 1042
              }                                                                                                        // 1043
                                                                                                                       //
              if (module.determine.eventOnElement(event, toggleBehavior)) {                                            // 1044
                event.preventDefault();                                                                                // 1045
              }                                                                                                        // 1046
            },                                                                                                         // 1047
            touch: function (event) {                                                                                  // 1048
              module.determine.eventOnElement(event, function () {                                                     // 1049
                if (event.type == 'touchstart') {                                                                      // 1050
                  module.timer = setTimeout(function () {                                                              // 1051
                    module.hide();                                                                                     // 1052
                  }, settings.delay.touch);                                                                            // 1053
                } else if (event.type == 'touchmove') {                                                                // 1054
                  clearTimeout(module.timer);                                                                          // 1056
                }                                                                                                      // 1057
              });                                                                                                      // 1058
              event.stopPropagation();                                                                                 // 1059
            },                                                                                                         // 1060
            hide: function (event) {                                                                                   // 1061
              module.determine.eventInModule(event, module.hide);                                                      // 1062
            }                                                                                                          // 1063
          },                                                                                                           // 1034
          select: {                                                                                                    // 1065
            mutation: function (mutations) {                                                                           // 1066
              module.debug('<select> modified, recreating menu');                                                      // 1067
              module.setup.select();                                                                                   // 1068
            }                                                                                                          // 1069
          },                                                                                                           // 1065
          menu: {                                                                                                      // 1071
            mutation: function (mutations) {                                                                           // 1072
              var mutation = mutations[0],                                                                             // 1073
                  $addedNode = mutation.addedNodes ? $(mutation.addedNodes[0]) : $(false),                             // 1073
                  $removedNode = mutation.removedNodes ? $(mutation.removedNodes[0]) : $(false),                       // 1073
                  $changedNodes = $addedNode.add($removedNode),                                                        // 1073
                  isUserAddition = $changedNodes.is(selector.addition) || $changedNodes.closest(selector.addition).length > 0,
                  isMessage = $changedNodes.is(selector.message) || $changedNodes.closest(selector.message).length > 0;
                                                                                                                       //
              if (isUserAddition || isMessage) {                                                                       // 1085
                module.debug('Updating item selector cache');                                                          // 1086
                module.refreshItems();                                                                                 // 1087
              } else {                                                                                                 // 1088
                module.debug('Menu modified, updating selector cache');                                                // 1090
                module.refresh();                                                                                      // 1091
              }                                                                                                        // 1092
            },                                                                                                         // 1093
            mousedown: function () {                                                                                   // 1094
              itemActivated = true;                                                                                    // 1095
            },                                                                                                         // 1096
            mouseup: function () {                                                                                     // 1097
              itemActivated = false;                                                                                   // 1098
            }                                                                                                          // 1099
          },                                                                                                           // 1071
          item: {                                                                                                      // 1101
            mouseenter: function (event) {                                                                             // 1102
              var $target = $(event.target),                                                                           // 1103
                  $item = $(this),                                                                                     // 1103
                  $subMenu = $item.children(selector.menu),                                                            // 1103
                  $otherMenus = $item.siblings(selector.item).children(selector.menu),                                 // 1103
                  hasSubMenu = $subMenu.length > 0,                                                                    // 1103
                  isBubbledEvent = $subMenu.find($target).length > 0;                                                  // 1103
                                                                                                                       //
              if (!isBubbledEvent && hasSubMenu) {                                                                     // 1111
                clearTimeout(module.itemTimer);                                                                        // 1112
                module.itemTimer = setTimeout(function () {                                                            // 1113
                  module.verbose('Showing sub-menu', $subMenu);                                                        // 1114
                  $.each($otherMenus, function () {                                                                    // 1115
                    module.animate.hide(false, $(this));                                                               // 1116
                  });                                                                                                  // 1117
                  module.animate.show(false, $subMenu);                                                                // 1118
                }, settings.delay.show);                                                                               // 1119
                event.preventDefault();                                                                                // 1120
              }                                                                                                        // 1121
            },                                                                                                         // 1122
            mouseleave: function (event) {                                                                             // 1123
              var $subMenu = $(this).children(selector.menu);                                                          // 1124
                                                                                                                       //
              if ($subMenu.length > 0) {                                                                               // 1127
                clearTimeout(module.itemTimer);                                                                        // 1128
                module.itemTimer = setTimeout(function () {                                                            // 1129
                  module.verbose('Hiding sub-menu', $subMenu);                                                         // 1130
                  module.animate.hide(false, $subMenu);                                                                // 1131
                }, settings.delay.hide);                                                                               // 1132
              }                                                                                                        // 1133
            },                                                                                                         // 1134
            click: function (event, skipRefocus) {                                                                     // 1135
              var $choice = $(this),                                                                                   // 1136
                  $target = event ? $(event.target) : $(''),                                                           // 1136
                  $subMenu = $choice.find(selector.menu),                                                              // 1136
                  text = module.get.choiceText($choice),                                                               // 1136
                  value = module.get.choiceValue($choice, text),                                                       // 1136
                  hasSubMenu = $subMenu.length > 0,                                                                    // 1136
                  isBubbledEvent = $subMenu.find($target).length > 0;                                                  // 1136
                                                                                                                       //
              if (!isBubbledEvent && (!hasSubMenu || settings.allowCategorySelection)) {                               // 1147
                if (module.is.searchSelection()) {                                                                     // 1148
                  if (settings.allowAdditions) {                                                                       // 1149
                    module.remove.userAddition();                                                                      // 1150
                  }                                                                                                    // 1151
                                                                                                                       //
                  module.remove.searchTerm();                                                                          // 1152
                                                                                                                       //
                  if (!module.is.focusedOnSearch() && !(skipRefocus == true)) {                                        // 1153
                    module.focusSearch(true);                                                                          // 1154
                  }                                                                                                    // 1155
                }                                                                                                      // 1156
                                                                                                                       //
                if (!settings.useLabels) {                                                                             // 1157
                  module.remove.filteredItem();                                                                        // 1158
                  module.set.scrollPosition($choice);                                                                  // 1159
                }                                                                                                      // 1160
                                                                                                                       //
                module.determine.selectAction.call(this, text, value);                                                 // 1161
              }                                                                                                        // 1162
            }                                                                                                          // 1163
          },                                                                                                           // 1101
          document: {                                                                                                  // 1166
            // label selection should occur even when element has no focus                                             // 1167
            keydown: function (event) {                                                                                // 1168
              var pressedKey = event.which,                                                                            // 1169
                  isShortcutKey = module.is.inObject(pressedKey, keys);                                                // 1169
                                                                                                                       //
              if (isShortcutKey) {                                                                                     // 1173
                var $label = $module.find(selector.label),                                                             // 1174
                    $activeLabel = $label.filter('.' + className.active),                                              // 1174
                    activeValue = $activeLabel.data(metadata.value),                                                   // 1174
                    labelIndex = $label.index($activeLabel),                                                           // 1174
                    labelCount = $label.length,                                                                        // 1174
                    hasActiveLabel = $activeLabel.length > 0,                                                          // 1174
                    hasMultipleActive = $activeLabel.length > 1,                                                       // 1174
                    isFirstLabel = labelIndex === 0,                                                                   // 1174
                    isLastLabel = labelIndex + 1 == labelCount,                                                        // 1174
                    isSearch = module.is.searchSelection(),                                                            // 1174
                    isFocusedOnSearch = module.is.focusedOnSearch(),                                                   // 1174
                    isFocused = module.is.focused(),                                                                   // 1174
                    caretAtStart = isFocusedOnSearch && module.get.caretPosition() === 0,                              // 1174
                    $nextLabel;                                                                                        // 1174
                                                                                                                       //
                if (isSearch && !hasActiveLabel && !isFocusedOnSearch) {                                               // 1190
                  return;                                                                                              // 1191
                }                                                                                                      // 1192
                                                                                                                       //
                if (pressedKey == keys.leftArrow) {                                                                    // 1194
                  // activate previous label                                                                           // 1195
                  if ((isFocused || caretAtStart) && !hasActiveLabel) {                                                // 1196
                    module.verbose('Selecting previous label');                                                        // 1197
                    $label.last().addClass(className.active);                                                          // 1198
                  } else if (hasActiveLabel) {                                                                         // 1199
                    if (!event.shiftKey) {                                                                             // 1201
                      module.verbose('Selecting previous label');                                                      // 1202
                      $label.removeClass(className.active);                                                            // 1203
                    } else {                                                                                           // 1204
                      module.verbose('Adding previous label to selection');                                            // 1206
                    }                                                                                                  // 1207
                                                                                                                       //
                    if (isFirstLabel && !hasMultipleActive) {                                                          // 1208
                      $activeLabel.addClass(className.active);                                                         // 1209
                    } else {                                                                                           // 1210
                      $activeLabel.prev(selector.siblingLabel).addClass(className.active).end();                       // 1212
                    }                                                                                                  // 1216
                                                                                                                       //
                    event.preventDefault();                                                                            // 1217
                  }                                                                                                    // 1218
                } else if (pressedKey == keys.rightArrow) {                                                            // 1219
                  // activate first label                                                                              // 1221
                  if (isFocused && !hasActiveLabel) {                                                                  // 1222
                    $label.first().addClass(className.active);                                                         // 1223
                  } // activate next label                                                                             // 1224
                                                                                                                       //
                                                                                                                       //
                  if (hasActiveLabel) {                                                                                // 1226
                    if (!event.shiftKey) {                                                                             // 1227
                      module.verbose('Selecting next label');                                                          // 1228
                      $label.removeClass(className.active);                                                            // 1229
                    } else {                                                                                           // 1230
                      module.verbose('Adding next label to selection');                                                // 1232
                    }                                                                                                  // 1233
                                                                                                                       //
                    if (isLastLabel) {                                                                                 // 1234
                      if (isSearch) {                                                                                  // 1235
                        if (!isFocusedOnSearch) {                                                                      // 1236
                          module.focusSearch();                                                                        // 1237
                        } else {                                                                                       // 1238
                          $label.removeClass(className.active);                                                        // 1240
                        }                                                                                              // 1241
                      } else if (hasMultipleActive) {                                                                  // 1242
                        $activeLabel.next(selector.siblingLabel).addClass(className.active);                           // 1244
                      } else {                                                                                         // 1245
                        $activeLabel.addClass(className.active);                                                       // 1247
                      }                                                                                                // 1248
                    } else {                                                                                           // 1249
                      $activeLabel.next(selector.siblingLabel).addClass(className.active);                             // 1251
                    }                                                                                                  // 1252
                                                                                                                       //
                    event.preventDefault();                                                                            // 1253
                  }                                                                                                    // 1254
                } else if (pressedKey == keys.deleteKey || pressedKey == keys.backspace) {                             // 1255
                  if (hasActiveLabel) {                                                                                // 1257
                    module.verbose('Removing active labels');                                                          // 1258
                                                                                                                       //
                    if (isLastLabel) {                                                                                 // 1259
                      if (isSearch && !isFocusedOnSearch) {                                                            // 1260
                        module.focusSearch();                                                                          // 1261
                      }                                                                                                // 1262
                    }                                                                                                  // 1263
                                                                                                                       //
                    $activeLabel.last().next(selector.siblingLabel).addClass(className.active);                        // 1264
                    module.remove.activeLabels($activeLabel);                                                          // 1265
                    event.preventDefault();                                                                            // 1266
                  } else if (caretAtStart && !hasActiveLabel && pressedKey == keys.backspace) {                        // 1267
                    module.verbose('Removing last label on input backspace');                                          // 1269
                    $activeLabel = $label.last().addClass(className.active);                                           // 1270
                    module.remove.activeLabels($activeLabel);                                                          // 1271
                  }                                                                                                    // 1272
                } else {                                                                                               // 1273
                  $activeLabel.removeClass(className.active);                                                          // 1275
                }                                                                                                      // 1276
              }                                                                                                        // 1277
            }                                                                                                          // 1278
          },                                                                                                           // 1166
          keydown: function (event) {                                                                                  // 1281
            var pressedKey = event.which,                                                                              // 1282
                isShortcutKey = module.is.inObject(pressedKey, keys);                                                  // 1282
                                                                                                                       //
            if (isShortcutKey) {                                                                                       // 1286
              var $currentlySelected = $item.not(selector.unselectable).filter('.' + className.selected).eq(0),        // 1287
                  $activeItem = $menu.children('.' + className.active).eq(0),                                          // 1287
                  $selectedItem = $currentlySelected.length > 0 ? $currentlySelected : $activeItem,                    // 1287
                  $visibleItems = $selectedItem.length > 0 ? $selectedItem.siblings(':not(.' + className.filtered + ')').addBack() : $menu.children(':not(.' + className.filtered + ')'),
                  $subMenu = $selectedItem.children(selector.menu),                                                    // 1287
                  $parentMenu = $selectedItem.closest(selector.menu),                                                  // 1287
                  inVisibleMenu = $parentMenu.hasClass(className.visible) || $parentMenu.hasClass(className.animating) || $parentMenu.parent(selector.menu).length > 0,
                  hasSubMenu = $subMenu.length > 0,                                                                    // 1287
                  hasSelectedItem = $selectedItem.length > 0,                                                          // 1287
                  selectedIsSelectable = $selectedItem.not(selector.unselectable).length > 0,                          // 1287
                  delimiterPressed = pressedKey == keys.delimiter && settings.allowAdditions && module.is.multiple(),  // 1287
                  isAdditionWithoutMenu = settings.allowAdditions && settings.hideAdditions && (pressedKey == keys.enter || delimiterPressed) && selectedIsSelectable,
                  $nextItem,                                                                                           // 1287
                  isSubMenuItem,                                                                                       // 1287
                  newIndex; // allow selection with menu closed                                                        // 1287
                                                                                                                       //
              if (isAdditionWithoutMenu) {                                                                             // 1309
                module.verbose('Selecting item from keyboard shortcut', $selectedItem);                                // 1310
                module.event.item.click.call($selectedItem, event);                                                    // 1311
                                                                                                                       //
                if (module.is.searchSelection()) {                                                                     // 1312
                  module.remove.searchTerm();                                                                          // 1313
                }                                                                                                      // 1314
              } // visible menu keyboard shortcuts                                                                     // 1315
                                                                                                                       //
                                                                                                                       //
              if (module.is.visible()) {                                                                               // 1318
                // enter (select or open sub-menu)                                                                     // 1320
                if (pressedKey == keys.enter || delimiterPressed) {                                                    // 1321
                  if (pressedKey == keys.enter && hasSelectedItem && hasSubMenu && !settings.allowCategorySelection) {
                    module.verbose('Pressed enter on unselectable category, opening sub menu');                        // 1323
                    pressedKey = keys.rightArrow;                                                                      // 1324
                  } else if (selectedIsSelectable) {                                                                   // 1325
                    module.verbose('Selecting item from keyboard shortcut', $selectedItem);                            // 1327
                    module.event.item.click.call($selectedItem, event);                                                // 1328
                                                                                                                       //
                    if (module.is.searchSelection()) {                                                                 // 1329
                      module.remove.searchTerm();                                                                      // 1330
                    }                                                                                                  // 1331
                  }                                                                                                    // 1332
                                                                                                                       //
                  event.preventDefault();                                                                              // 1333
                } // sub-menu actions                                                                                  // 1334
                                                                                                                       //
                                                                                                                       //
                if (hasSelectedItem) {                                                                                 // 1337
                  if (pressedKey == keys.leftArrow) {                                                                  // 1339
                    isSubMenuItem = $parentMenu[0] !== $menu[0];                                                       // 1341
                                                                                                                       //
                    if (isSubMenuItem) {                                                                               // 1343
                      module.verbose('Left key pressed, closing sub-menu');                                            // 1344
                      module.animate.hide(false, $parentMenu);                                                         // 1345
                      $selectedItem.removeClass(className.selected);                                                   // 1346
                      $parentMenu.closest(selector.item).addClass(className.selected);                                 // 1349
                      event.preventDefault();                                                                          // 1353
                    }                                                                                                  // 1354
                  } // right arrow (show sub-menu)                                                                     // 1355
                                                                                                                       //
                                                                                                                       //
                  if (pressedKey == keys.rightArrow) {                                                                 // 1358
                    if (hasSubMenu) {                                                                                  // 1359
                      module.verbose('Right key pressed, opening sub-menu');                                           // 1360
                      module.animate.show(false, $subMenu);                                                            // 1361
                      $selectedItem.removeClass(className.selected);                                                   // 1362
                      $subMenu.find(selector.item).eq(0).addClass(className.selected);                                 // 1365
                      event.preventDefault();                                                                          // 1369
                    }                                                                                                  // 1370
                  }                                                                                                    // 1371
                } // up arrow (traverse menu up)                                                                       // 1372
                                                                                                                       //
                                                                                                                       //
                if (pressedKey == keys.upArrow) {                                                                      // 1375
                  $nextItem = hasSelectedItem && inVisibleMenu ? $selectedItem.prevAll(selector.item + ':not(' + selector.unselectable + ')').eq(0) : $item.eq(0);
                                                                                                                       //
                  if ($visibleItems.index($nextItem) < 0) {                                                            // 1380
                    module.verbose('Up key pressed but reached top of current menu');                                  // 1381
                    event.preventDefault();                                                                            // 1382
                    return;                                                                                            // 1383
                  } else {                                                                                             // 1384
                    module.verbose('Up key pressed, changing active item');                                            // 1386
                    $selectedItem.removeClass(className.selected);                                                     // 1387
                    $nextItem.addClass(className.selected);                                                            // 1390
                    module.set.scrollPosition($nextItem);                                                              // 1393
                                                                                                                       //
                    if (settings.selectOnKeydown && module.is.single()) {                                              // 1394
                      module.set.selectedItem($nextItem);                                                              // 1395
                    }                                                                                                  // 1396
                  }                                                                                                    // 1397
                                                                                                                       //
                  event.preventDefault();                                                                              // 1398
                } // down arrow (traverse menu down)                                                                   // 1399
                                                                                                                       //
                                                                                                                       //
                if (pressedKey == keys.downArrow) {                                                                    // 1402
                  $nextItem = hasSelectedItem && inVisibleMenu ? $nextItem = $selectedItem.nextAll(selector.item + ':not(' + selector.unselectable + ')').eq(0) : $item.eq(0);
                                                                                                                       //
                  if ($nextItem.length === 0) {                                                                        // 1407
                    module.verbose('Down key pressed but reached bottom of current menu');                             // 1408
                    event.preventDefault();                                                                            // 1409
                    return;                                                                                            // 1410
                  } else {                                                                                             // 1411
                    module.verbose('Down key pressed, changing active item');                                          // 1413
                    $item.removeClass(className.selected);                                                             // 1414
                    $nextItem.addClass(className.selected);                                                            // 1417
                    module.set.scrollPosition($nextItem);                                                              // 1420
                                                                                                                       //
                    if (settings.selectOnKeydown && module.is.single()) {                                              // 1421
                      module.set.activeItem($nextItem);                                                                // 1422
                      module.set.selected(module.get.choiceValue($nextItem), $nextItem);                               // 1423
                    }                                                                                                  // 1424
                  }                                                                                                    // 1425
                                                                                                                       //
                  event.preventDefault();                                                                              // 1426
                } // page down (show next page)                                                                        // 1427
                                                                                                                       //
                                                                                                                       //
                if (pressedKey == keys.pageUp) {                                                                       // 1430
                  module.scrollPage('up');                                                                             // 1431
                  event.preventDefault();                                                                              // 1432
                }                                                                                                      // 1433
                                                                                                                       //
                if (pressedKey == keys.pageDown) {                                                                     // 1434
                  module.scrollPage('down');                                                                           // 1435
                  event.preventDefault();                                                                              // 1436
                } // escape (close menu)                                                                               // 1437
                                                                                                                       //
                                                                                                                       //
                if (pressedKey == keys.escape) {                                                                       // 1440
                  module.verbose('Escape key pressed, closing dropdown');                                              // 1441
                  module.hide();                                                                                       // 1442
                }                                                                                                      // 1443
              } else {                                                                                                 // 1445
                // delimiter key                                                                                       // 1447
                if (delimiterPressed) {                                                                                // 1448
                  event.preventDefault();                                                                              // 1449
                } // down arrow (open menu)                                                                            // 1450
                                                                                                                       //
                                                                                                                       //
                if (pressedKey == keys.downArrow && !module.is.visible()) {                                            // 1452
                  module.verbose('Down key pressed, showing dropdown');                                                // 1453
                  module.select.firstUnfiltered();                                                                     // 1454
                  module.show();                                                                                       // 1455
                  event.preventDefault();                                                                              // 1456
                }                                                                                                      // 1457
              }                                                                                                        // 1458
            } else {                                                                                                   // 1459
              if (!module.has.search()) {                                                                              // 1461
                module.set.selectedLetter(String.fromCharCode(pressedKey));                                            // 1462
              }                                                                                                        // 1463
            }                                                                                                          // 1464
          }                                                                                                            // 1465
        },                                                                                                             // 899
        trigger: {                                                                                                     // 1468
          change: function () {                                                                                        // 1469
            var events = document.createEvent('HTMLEvents'),                                                           // 1470
                inputElement = $input[0];                                                                              // 1470
                                                                                                                       //
            if (inputElement) {                                                                                        // 1474
              module.verbose('Triggering native change event');                                                        // 1475
              events.initEvent('change', true, false);                                                                 // 1476
              inputElement.dispatchEvent(events);                                                                      // 1477
            }                                                                                                          // 1478
          }                                                                                                            // 1479
        },                                                                                                             // 1468
        determine: {                                                                                                   // 1482
          selectAction: function (text, value) {                                                                       // 1483
            module.verbose('Determining action', settings.action);                                                     // 1484
                                                                                                                       //
            if ($.isFunction(module.action[settings.action])) {                                                        // 1485
              module.verbose('Triggering preset action', settings.action, text, value);                                // 1486
              module.action[settings.action].call(element, text, value, this);                                         // 1487
            } else if ($.isFunction(settings.action)) {                                                                // 1488
              module.verbose('Triggering user action', settings.action, text, value);                                  // 1490
              settings.action.call(element, text, value, this);                                                        // 1491
            } else {                                                                                                   // 1492
              module.error(error.action, settings.action);                                                             // 1494
            }                                                                                                          // 1495
          },                                                                                                           // 1496
          eventInModule: function (event, callback) {                                                                  // 1497
            var $target = $(event.target),                                                                             // 1498
                inDocument = $target.closest(document.documentElement).length > 0,                                     // 1498
                inModule = $target.closest($module).length > 0;                                                        // 1498
            callback = $.isFunction(callback) ? callback : function () {};                                             // 1503
                                                                                                                       //
            if (inDocument && !inModule) {                                                                             // 1507
              module.verbose('Triggering event', callback);                                                            // 1508
              callback();                                                                                              // 1509
              return true;                                                                                             // 1510
            } else {                                                                                                   // 1511
              module.verbose('Event occurred in dropdown, canceling callback');                                        // 1513
              return false;                                                                                            // 1514
            }                                                                                                          // 1515
          },                                                                                                           // 1516
          eventOnElement: function (event, callback) {                                                                 // 1517
            var $target = $(event.target),                                                                             // 1518
                $label = $target.closest(selector.siblingLabel),                                                       // 1518
                inVisibleDOM = document.body.contains(event.target),                                                   // 1518
                notOnLabel = $module.find($label).length === 0,                                                        // 1518
                notInMenu = $target.closest($menu).length === 0;                                                       // 1518
            callback = $.isFunction(callback) ? callback : function () {};                                             // 1525
                                                                                                                       //
            if (inVisibleDOM && notOnLabel && notInMenu) {                                                             // 1529
              module.verbose('Triggering event', callback);                                                            // 1530
              callback();                                                                                              // 1531
              return true;                                                                                             // 1532
            } else {                                                                                                   // 1533
              module.verbose('Event occurred in dropdown menu, canceling callback');                                   // 1535
              return false;                                                                                            // 1536
            }                                                                                                          // 1537
          }                                                                                                            // 1538
        },                                                                                                             // 1482
        action: {                                                                                                      // 1541
          nothing: function () {},                                                                                     // 1543
          activate: function (text, value, element) {                                                                  // 1545
            value = value !== undefined ? value : text;                                                                // 1546
                                                                                                                       //
            if (module.can.activate($(element))) {                                                                     // 1550
              module.set.selected(value, $(element));                                                                  // 1551
                                                                                                                       //
              if (module.is.multiple() && !module.is.allFiltered()) {                                                  // 1552
                return;                                                                                                // 1553
              } else {                                                                                                 // 1554
                module.hideAndClear();                                                                                 // 1556
              }                                                                                                        // 1557
            }                                                                                                          // 1558
          },                                                                                                           // 1559
          select: function (text, value, element) {                                                                    // 1561
            // mimics action.activate but does not select text                                                         // 1562
            module.action.activate.call(element);                                                                      // 1563
          },                                                                                                           // 1564
          combo: function (text, value, element) {                                                                     // 1566
            value = value !== undefined ? value : text;                                                                // 1567
            module.set.selected(value, $(element));                                                                    // 1571
            module.hideAndClear();                                                                                     // 1572
          },                                                                                                           // 1573
          hide: function (text, value, element) {                                                                      // 1575
            module.set.value(value, text);                                                                             // 1576
            module.hideAndClear();                                                                                     // 1577
          }                                                                                                            // 1578
        },                                                                                                             // 1541
        get: {                                                                                                         // 1582
          id: function () {                                                                                            // 1583
            return id;                                                                                                 // 1584
          },                                                                                                           // 1585
          defaultText: function () {                                                                                   // 1586
            return $module.data(metadata.defaultText);                                                                 // 1587
          },                                                                                                           // 1588
          defaultValue: function () {                                                                                  // 1589
            return $module.data(metadata.defaultValue);                                                                // 1590
          },                                                                                                           // 1591
          placeholderText: function () {                                                                               // 1592
            return $module.data(metadata.placeholderText) || '';                                                       // 1593
          },                                                                                                           // 1594
          text: function () {                                                                                          // 1595
            return $text.text();                                                                                       // 1596
          },                                                                                                           // 1597
          query: function () {                                                                                         // 1598
            return $.trim($search.val());                                                                              // 1599
          },                                                                                                           // 1600
          searchWidth: function (value) {                                                                              // 1601
            value = value !== undefined ? value : $search.val();                                                       // 1602
            $sizer.text(value); // prevent rounding issues                                                             // 1606
                                                                                                                       //
            return Math.ceil($sizer.width() + 1);                                                                      // 1608
          },                                                                                                           // 1609
          selectionCount: function () {                                                                                // 1610
            var values = module.get.values(),                                                                          // 1611
                count;                                                                                                 // 1611
            count = module.is.multiple() ? $.isArray(values) ? values.length : 0 : module.get.value() !== '' ? 1 : 0;  // 1615
            return count;                                                                                              // 1623
          },                                                                                                           // 1624
          transition: function ($subMenu) {                                                                            // 1625
            return settings.transition == 'auto' ? module.is.upward($subMenu) ? 'slide up' : 'slide down' : settings.transition;
          },                                                                                                           // 1632
          userValues: function () {                                                                                    // 1633
            var values = module.get.values();                                                                          // 1634
                                                                                                                       //
            if (!values) {                                                                                             // 1637
              return false;                                                                                            // 1638
            }                                                                                                          // 1639
                                                                                                                       //
            values = $.isArray(values) ? values : [values];                                                            // 1640
            return $.grep(values, function (value) {                                                                   // 1644
              return module.get.item(value) === false;                                                                 // 1645
            });                                                                                                        // 1646
          },                                                                                                           // 1647
          uniqueArray: function (array) {                                                                              // 1648
            return $.grep(array, function (value, index) {                                                             // 1649
              return $.inArray(value, array) === index;                                                                // 1650
            });                                                                                                        // 1651
          },                                                                                                           // 1652
          caretPosition: function () {                                                                                 // 1653
            var input = $search.get(0),                                                                                // 1654
                range,                                                                                                 // 1654
                rangeLength;                                                                                           // 1654
                                                                                                                       //
            if ('selectionStart' in input) {                                                                           // 1659
              return input.selectionStart;                                                                             // 1660
            } else if (document.selection) {                                                                           // 1661
              input.focus();                                                                                           // 1663
              range = document.selection.createRange();                                                                // 1664
              rangeLength = range.text.length;                                                                         // 1665
              range.moveStart('character', -input.value.length);                                                       // 1666
              return range.text.length - rangeLength;                                                                  // 1667
            }                                                                                                          // 1668
          },                                                                                                           // 1669
          value: function () {                                                                                         // 1670
            var value = $input.length > 0 ? $input.val() : $module.data(metadata.value),                               // 1671
                isEmptyMultiselect = $.isArray(value) && value.length === 1 && value[0] === ''; // prevents placeholder element from being selected when multiple
                                                                                                                       //
            return value === undefined || isEmptyMultiselect ? '' : value;                                             // 1678
          },                                                                                                           // 1682
          values: function () {                                                                                        // 1683
            var value = module.get.value();                                                                            // 1684
                                                                                                                       //
            if (value === '') {                                                                                        // 1687
              return '';                                                                                               // 1688
            }                                                                                                          // 1689
                                                                                                                       //
            return !module.has.selectInput() && module.is.multiple() ? typeof value == 'string' ? // delimited string  // 1690
            value.split(settings.delimiter) : '' : value;                                                              // 1692
          },                                                                                                           // 1696
          remoteValues: function () {                                                                                  // 1697
            var values = module.get.values(),                                                                          // 1698
                remoteValues = false;                                                                                  // 1698
                                                                                                                       //
            if (values) {                                                                                              // 1702
              if (typeof values == 'string') {                                                                         // 1703
                values = [values];                                                                                     // 1704
              }                                                                                                        // 1705
                                                                                                                       //
              $.each(values, function (index, value) {                                                                 // 1706
                var name = module.read.remoteData(value);                                                              // 1707
                module.verbose('Restoring value from session data', name, value);                                      // 1710
                                                                                                                       //
                if (name) {                                                                                            // 1711
                  if (!remoteValues) {                                                                                 // 1712
                    remoteValues = {};                                                                                 // 1713
                  }                                                                                                    // 1714
                                                                                                                       //
                  remoteValues[value] = name;                                                                          // 1715
                }                                                                                                      // 1716
              });                                                                                                      // 1717
            }                                                                                                          // 1718
                                                                                                                       //
            return remoteValues;                                                                                       // 1719
          },                                                                                                           // 1720
          choiceText: function ($choice, preserveHTML) {                                                               // 1721
            preserveHTML = preserveHTML !== undefined ? preserveHTML : settings.preserveHTML;                          // 1722
                                                                                                                       //
            if ($choice) {                                                                                             // 1726
              if ($choice.find(selector.menu).length > 0) {                                                            // 1727
                module.verbose('Retrieving text of element with sub-menu');                                            // 1728
                $choice = $choice.clone();                                                                             // 1729
                $choice.find(selector.menu).remove();                                                                  // 1730
                $choice.find(selector.menuIcon).remove();                                                              // 1731
              }                                                                                                        // 1732
                                                                                                                       //
              return $choice.data(metadata.text) !== undefined ? $choice.data(metadata.text) : preserveHTML ? $.trim($choice.html()) : $.trim($choice.text());
            }                                                                                                          // 1739
          },                                                                                                           // 1740
          choiceValue: function ($choice, choiceText) {                                                                // 1741
            choiceText = choiceText || module.get.choiceText($choice);                                                 // 1742
                                                                                                                       //
            if (!$choice) {                                                                                            // 1743
              return false;                                                                                            // 1744
            }                                                                                                          // 1745
                                                                                                                       //
            return $choice.data(metadata.value) !== undefined ? String($choice.data(metadata.value)) : typeof choiceText === 'string' ? $.trim(choiceText.toLowerCase()) : String(choiceText);
          },                                                                                                           // 1752
          inputEvent: function () {                                                                                    // 1753
            var input = $search[0];                                                                                    // 1754
                                                                                                                       //
            if (input) {                                                                                               // 1757
              return input.oninput !== undefined ? 'input' : input.onpropertychange !== undefined ? 'propertychange' : 'keyup';
            }                                                                                                          // 1764
                                                                                                                       //
            return false;                                                                                              // 1765
          },                                                                                                           // 1766
          selectValues: function () {                                                                                  // 1767
            var select = {};                                                                                           // 1768
            select.values = [];                                                                                        // 1771
            $module.find('option').each(function () {                                                                  // 1772
              var $option = $(this),                                                                                   // 1775
                  name = $option.html(),                                                                               // 1775
                  disabled = $option.attr('disabled'),                                                                 // 1775
                  value = $option.attr('value') !== undefined ? $option.attr('value') : name;                          // 1775
                                                                                                                       //
              if (settings.placeholder === 'auto' && value === '') {                                                   // 1783
                select.placeholder = name;                                                                             // 1784
              } else {                                                                                                 // 1785
                select.values.push({                                                                                   // 1787
                  name: name,                                                                                          // 1788
                  value: value,                                                                                        // 1789
                  disabled: disabled                                                                                   // 1790
                });                                                                                                    // 1787
              }                                                                                                        // 1792
            });                                                                                                        // 1793
                                                                                                                       //
            if (settings.placeholder && settings.placeholder !== 'auto') {                                             // 1795
              module.debug('Setting placeholder value to', settings.placeholder);                                      // 1796
              select.placeholder = settings.placeholder;                                                               // 1797
            }                                                                                                          // 1798
                                                                                                                       //
            if (settings.sortSelect) {                                                                                 // 1799
              select.values.sort(function (a, b) {                                                                     // 1800
                return a.name > b.name ? 1 : -1;                                                                       // 1801
              });                                                                                                      // 1805
              module.debug('Retrieved and sorted values from select', select);                                         // 1806
            } else {                                                                                                   // 1807
              module.debug('Retrieved values from select', select);                                                    // 1809
            }                                                                                                          // 1810
                                                                                                                       //
            return select;                                                                                             // 1811
          },                                                                                                           // 1812
          activeItem: function () {                                                                                    // 1813
            return $item.filter('.' + className.active);                                                               // 1814
          },                                                                                                           // 1815
          selectedItem: function () {                                                                                  // 1816
            var $selectedItem = $item.not(selector.unselectable).filter('.' + className.selected);                     // 1817
            return $selectedItem.length > 0 ? $selectedItem : $item.eq(0);                                             // 1820
          },                                                                                                           // 1824
          itemWithAdditions: function (value) {                                                                        // 1825
            var $items = module.get.item(value),                                                                       // 1826
                $userItems = module.create.userChoice(value),                                                          // 1826
                hasUserItems = $userItems && $userItems.length > 0;                                                    // 1826
                                                                                                                       //
            if (hasUserItems) {                                                                                        // 1831
              $items = $items.length > 0 ? $items.add($userItems) : $userItems;                                        // 1832
            }                                                                                                          // 1836
                                                                                                                       //
            return $items;                                                                                             // 1837
          },                                                                                                           // 1838
          item: function (value, strict) {                                                                             // 1839
            var $selectedItem = false,                                                                                 // 1840
                shouldSearch,                                                                                          // 1840
                isMultiple;                                                                                            // 1840
            value = value !== undefined ? value : module.get.values() !== undefined ? module.get.values() : module.get.text();
            shouldSearch = isMultiple ? value.length > 0 : value !== undefined && value !== null;                      // 1851
            isMultiple = module.is.multiple() && $.isArray(value);                                                     // 1855
            strict = value === '' || value === 0 ? true : strict || false;                                             // 1856
                                                                                                                       //
            if (shouldSearch) {                                                                                        // 1860
              $item.each(function () {                                                                                 // 1861
                var $choice = $(this),                                                                                 // 1863
                    optionText = module.get.choiceText($choice),                                                       // 1863
                    optionValue = module.get.choiceValue($choice, optionText); // safe early exit                      // 1863
                                                                                                                       //
                if (optionValue === null || optionValue === undefined) {                                               // 1869
                  return;                                                                                              // 1870
                }                                                                                                      // 1871
                                                                                                                       //
                if (isMultiple) {                                                                                      // 1872
                  if ($.inArray(String(optionValue), value) !== -1 || $.inArray(optionText, value) !== -1) {           // 1873
                    $selectedItem = $selectedItem ? $selectedItem.add($choice) : $choice;                              // 1874
                  }                                                                                                    // 1878
                } else if (strict) {                                                                                   // 1879
                  module.verbose('Ambiguous dropdown value using strict type check', $choice, value);                  // 1881
                                                                                                                       //
                  if (optionValue === value || optionText === value) {                                                 // 1882
                    $selectedItem = $choice;                                                                           // 1883
                    return true;                                                                                       // 1884
                  }                                                                                                    // 1885
                } else {                                                                                               // 1886
                  if (String(optionValue) == String(value) || optionText == value) {                                   // 1888
                    module.verbose('Found select item by value', optionValue, value);                                  // 1889
                    $selectedItem = $choice;                                                                           // 1890
                    return true;                                                                                       // 1891
                  }                                                                                                    // 1892
                }                                                                                                      // 1893
              });                                                                                                      // 1894
            }                                                                                                          // 1896
                                                                                                                       //
            return $selectedItem;                                                                                      // 1897
          }                                                                                                            // 1898
        },                                                                                                             // 1582
        check: {                                                                                                       // 1901
          maxSelections: function (selectionCount) {                                                                   // 1902
            if (settings.maxSelections) {                                                                              // 1903
              selectionCount = selectionCount !== undefined ? selectionCount : module.get.selectionCount();            // 1904
                                                                                                                       //
              if (selectionCount >= settings.maxSelections) {                                                          // 1908
                module.debug('Maximum selection count reached');                                                       // 1909
                                                                                                                       //
                if (settings.useLabels) {                                                                              // 1910
                  $item.addClass(className.filtered);                                                                  // 1911
                  module.add.message(message.maxSelections);                                                           // 1912
                }                                                                                                      // 1913
                                                                                                                       //
                return true;                                                                                           // 1914
              } else {                                                                                                 // 1915
                module.verbose('No longer at maximum selection count');                                                // 1917
                module.remove.message();                                                                               // 1918
                module.remove.filteredItem();                                                                          // 1919
                                                                                                                       //
                if (module.is.searchSelection()) {                                                                     // 1920
                  module.filterItems();                                                                                // 1921
                }                                                                                                      // 1922
                                                                                                                       //
                return false;                                                                                          // 1923
              }                                                                                                        // 1924
            }                                                                                                          // 1925
                                                                                                                       //
            return true;                                                                                               // 1926
          }                                                                                                            // 1927
        },                                                                                                             // 1901
        restore: {                                                                                                     // 1930
          defaults: function () {                                                                                      // 1931
            module.clear();                                                                                            // 1932
            module.restore.defaultText();                                                                              // 1933
            module.restore.defaultValue();                                                                             // 1934
          },                                                                                                           // 1935
          defaultText: function () {                                                                                   // 1936
            var defaultText = module.get.defaultText(),                                                                // 1937
                placeholderText = module.get.placeholderText;                                                          // 1937
                                                                                                                       //
            if (defaultText === placeholderText) {                                                                     // 1941
              module.debug('Restoring default placeholder text', defaultText);                                         // 1942
              module.set.placeholderText(defaultText);                                                                 // 1943
            } else {                                                                                                   // 1944
              module.debug('Restoring default text', defaultText);                                                     // 1946
              module.set.text(defaultText);                                                                            // 1947
            }                                                                                                          // 1948
          },                                                                                                           // 1949
          placeholderText: function () {                                                                               // 1950
            module.set.placeholderText();                                                                              // 1951
          },                                                                                                           // 1952
          defaultValue: function () {                                                                                  // 1953
            var defaultValue = module.get.defaultValue();                                                              // 1954
                                                                                                                       //
            if (defaultValue !== undefined) {                                                                          // 1957
              module.debug('Restoring default value', defaultValue);                                                   // 1958
                                                                                                                       //
              if (defaultValue !== '') {                                                                               // 1959
                module.set.value(defaultValue);                                                                        // 1960
                module.set.selected();                                                                                 // 1961
              } else {                                                                                                 // 1962
                module.remove.activeItem();                                                                            // 1964
                module.remove.selectedItem();                                                                          // 1965
              }                                                                                                        // 1966
            }                                                                                                          // 1967
          },                                                                                                           // 1968
          labels: function () {                                                                                        // 1969
            if (settings.allowAdditions) {                                                                             // 1970
              if (!settings.useLabels) {                                                                               // 1971
                module.error(error.labels);                                                                            // 1972
                settings.useLabels = true;                                                                             // 1973
              }                                                                                                        // 1974
                                                                                                                       //
              module.debug('Restoring selected values');                                                               // 1975
              module.create.userLabels();                                                                              // 1976
            }                                                                                                          // 1977
                                                                                                                       //
            module.check.maxSelections();                                                                              // 1978
          },                                                                                                           // 1979
          selected: function () {                                                                                      // 1980
            module.restore.values();                                                                                   // 1981
                                                                                                                       //
            if (module.is.multiple()) {                                                                                // 1982
              module.debug('Restoring previously selected values and labels');                                         // 1983
              module.restore.labels();                                                                                 // 1984
            } else {                                                                                                   // 1985
              module.debug('Restoring previously selected values');                                                    // 1987
            }                                                                                                          // 1988
          },                                                                                                           // 1989
          values: function () {                                                                                        // 1990
            // prevents callbacks from occurring on initial load                                                       // 1991
            module.set.initialLoad();                                                                                  // 1992
                                                                                                                       //
            if (settings.apiSettings && settings.saveRemoteData && module.get.remoteValues()) {                        // 1993
              module.restore.remoteValues();                                                                           // 1994
            } else {                                                                                                   // 1995
              module.set.selected();                                                                                   // 1997
            }                                                                                                          // 1998
                                                                                                                       //
            module.remove.initialLoad();                                                                               // 1999
          },                                                                                                           // 2000
          remoteValues: function () {                                                                                  // 2001
            var values = module.get.remoteValues();                                                                    // 2002
            module.debug('Recreating selected from session data', values);                                             // 2005
                                                                                                                       //
            if (values) {                                                                                              // 2006
              if (module.is.single()) {                                                                                // 2007
                $.each(values, function (value, name) {                                                                // 2008
                  module.set.text(name);                                                                               // 2009
                });                                                                                                    // 2010
              } else {                                                                                                 // 2011
                $.each(values, function (value, name) {                                                                // 2013
                  module.add.label(value, name);                                                                       // 2014
                });                                                                                                    // 2015
              }                                                                                                        // 2016
            }                                                                                                          // 2017
          }                                                                                                            // 2018
        },                                                                                                             // 1930
        read: {                                                                                                        // 2021
          remoteData: function (value) {                                                                               // 2022
            var name;                                                                                                  // 2023
                                                                                                                       //
            if (window.Storage === undefined) {                                                                        // 2026
              module.error(error.noStorage);                                                                           // 2027
              return;                                                                                                  // 2028
            }                                                                                                          // 2029
                                                                                                                       //
            name = sessionStorage.getItem(value);                                                                      // 2030
            return name !== undefined ? name : false;                                                                  // 2031
          }                                                                                                            // 2035
        },                                                                                                             // 2021
        save: {                                                                                                        // 2038
          defaults: function () {                                                                                      // 2039
            module.save.defaultText();                                                                                 // 2040
            module.save.placeholderText();                                                                             // 2041
            module.save.defaultValue();                                                                                // 2042
          },                                                                                                           // 2043
          defaultValue: function () {                                                                                  // 2044
            var value = module.get.value();                                                                            // 2045
            module.verbose('Saving default value as', value);                                                          // 2048
            $module.data(metadata.defaultValue, value);                                                                // 2049
          },                                                                                                           // 2050
          defaultText: function () {                                                                                   // 2051
            var text = module.get.text();                                                                              // 2052
            module.verbose('Saving default text as', text);                                                            // 2055
            $module.data(metadata.defaultText, text);                                                                  // 2056
          },                                                                                                           // 2057
          placeholderText: function () {                                                                               // 2058
            var text;                                                                                                  // 2059
                                                                                                                       //
            if (settings.placeholder !== false && $text.hasClass(className.placeholder)) {                             // 2062
              text = module.get.text();                                                                                // 2063
              module.verbose('Saving placeholder text as', text);                                                      // 2064
              $module.data(metadata.placeholderText, text);                                                            // 2065
            }                                                                                                          // 2066
          },                                                                                                           // 2067
          remoteData: function (name, value) {                                                                         // 2068
            if (window.Storage === undefined) {                                                                        // 2069
              module.error(error.noStorage);                                                                           // 2070
              return;                                                                                                  // 2071
            }                                                                                                          // 2072
                                                                                                                       //
            module.verbose('Saving remote data to session storage', value, name);                                      // 2073
            sessionStorage.setItem(value, name);                                                                       // 2074
          }                                                                                                            // 2075
        },                                                                                                             // 2038
        clear: function () {                                                                                           // 2078
          if (module.is.multiple()) {                                                                                  // 2079
            module.remove.labels();                                                                                    // 2080
          } else {                                                                                                     // 2081
            module.remove.activeItem();                                                                                // 2083
            module.remove.selectedItem();                                                                              // 2084
          }                                                                                                            // 2085
                                                                                                                       //
          module.set.placeholderText();                                                                                // 2086
          module.clearValue();                                                                                         // 2087
        },                                                                                                             // 2088
        clearValue: function () {                                                                                      // 2090
          module.set.value('');                                                                                        // 2091
        },                                                                                                             // 2092
        scrollPage: function (direction, $selectedItem) {                                                              // 2094
          var $currentItem = $selectedItem || module.get.selectedItem(),                                               // 2095
              $menu = $currentItem.closest(selector.menu),                                                             // 2095
              menuHeight = $menu.outerHeight(),                                                                        // 2095
              currentScroll = $menu.scrollTop(),                                                                       // 2095
              itemHeight = $item.eq(0).outerHeight(),                                                                  // 2095
              itemsPerPage = Math.floor(menuHeight / itemHeight),                                                      // 2095
              maxScroll = $menu.prop('scrollHeight'),                                                                  // 2095
              newScroll = direction == 'up' ? currentScroll - itemHeight * itemsPerPage : currentScroll + itemHeight * itemsPerPage,
              $selectableItem = $item.not(selector.unselectable),                                                      // 2095
              isWithinRange,                                                                                           // 2095
              $nextSelectedItem,                                                                                       // 2095
              elementIndex;                                                                                            // 2095
          elementIndex = direction == 'up' ? $selectableItem.index($currentItem) - itemsPerPage : $selectableItem.index($currentItem) + itemsPerPage;
          isWithinRange = direction == 'up' ? elementIndex >= 0 : elementIndex < $selectableItem.length;               // 2115
          $nextSelectedItem = isWithinRange ? $selectableItem.eq(elementIndex) : direction == 'up' ? $selectableItem.first() : $selectableItem.last();
                                                                                                                       //
          if ($nextSelectedItem.length > 0) {                                                                          // 2125
            module.debug('Scrolling page', direction, $nextSelectedItem);                                              // 2126
            $currentItem.removeClass(className.selected);                                                              // 2127
            $nextSelectedItem.addClass(className.selected);                                                            // 2130
                                                                                                                       //
            if (settings.selectOnKeydown && module.is.single()) {                                                      // 2133
              module.set.selectedItem($nextSelectedItem);                                                              // 2134
            }                                                                                                          // 2135
                                                                                                                       //
            $menu.scrollTop(newScroll);                                                                                // 2136
          }                                                                                                            // 2139
        },                                                                                                             // 2140
        set: {                                                                                                         // 2142
          filtered: function () {                                                                                      // 2143
            var isMultiple = module.is.multiple(),                                                                     // 2144
                isSearch = module.is.searchSelection(),                                                                // 2144
                isSearchMultiple = isMultiple && isSearch,                                                             // 2144
                searchValue = isSearch ? module.get.query() : '',                                                      // 2144
                hasSearchValue = typeof searchValue === 'string' && searchValue.length > 0,                            // 2144
                searchWidth = module.get.searchWidth(),                                                                // 2144
                valueIsSet = searchValue !== '';                                                                       // 2144
                                                                                                                       //
            if (isMultiple && hasSearchValue) {                                                                        // 2155
              module.verbose('Adjusting input width', searchWidth, settings.glyphWidth);                               // 2156
              $search.css('width', searchWidth);                                                                       // 2157
            }                                                                                                          // 2158
                                                                                                                       //
            if (hasSearchValue || isSearchMultiple && valueIsSet) {                                                    // 2159
              module.verbose('Hiding placeholder text');                                                               // 2160
              $text.addClass(className.filtered);                                                                      // 2161
            } else if (!isMultiple || isSearchMultiple && !valueIsSet) {                                               // 2162
              module.verbose('Showing placeholder text');                                                              // 2164
              $text.removeClass(className.filtered);                                                                   // 2165
            }                                                                                                          // 2166
          },                                                                                                           // 2167
          empty: function () {                                                                                         // 2168
            $module.addClass(className.empty);                                                                         // 2169
          },                                                                                                           // 2170
          loading: function () {                                                                                       // 2171
            $module.addClass(className.loading);                                                                       // 2172
          },                                                                                                           // 2173
          placeholderText: function (text) {                                                                           // 2174
            text = text || module.get.placeholderText();                                                               // 2175
            module.debug('Setting placeholder text', text);                                                            // 2176
            module.set.text(text);                                                                                     // 2177
            $text.addClass(className.placeholder);                                                                     // 2178
          },                                                                                                           // 2179
          tabbable: function () {                                                                                      // 2180
            if (module.has.search()) {                                                                                 // 2181
              module.debug('Added tabindex to searchable dropdown');                                                   // 2182
              $search.val('').attr('tabindex', 0);                                                                     // 2183
              $menu.attr('tabindex', -1);                                                                              // 2187
            } else {                                                                                                   // 2190
              module.debug('Added tabindex to dropdown');                                                              // 2192
                                                                                                                       //
              if ($module.attr('tabindex') === undefined) {                                                            // 2193
                $module.attr('tabindex', 0);                                                                           // 2194
                $menu.attr('tabindex', -1);                                                                            // 2197
              }                                                                                                        // 2200
            }                                                                                                          // 2201
          },                                                                                                           // 2202
          initialLoad: function () {                                                                                   // 2203
            module.verbose('Setting initial load');                                                                    // 2204
            initialLoad = true;                                                                                        // 2205
          },                                                                                                           // 2206
          activeItem: function ($item) {                                                                               // 2207
            if (settings.allowAdditions && $item.filter(selector.addition).length > 0) {                               // 2208
              $item.addClass(className.filtered);                                                                      // 2209
            } else {                                                                                                   // 2210
              $item.addClass(className.active);                                                                        // 2212
            }                                                                                                          // 2213
          },                                                                                                           // 2214
          scrollPosition: function ($item, forceScroll) {                                                              // 2215
            var edgeTolerance = 5,                                                                                     // 2216
                $menu,                                                                                                 // 2216
                hasActive,                                                                                             // 2216
                offset,                                                                                                // 2216
                itemHeight,                                                                                            // 2216
                itemOffset,                                                                                            // 2216
                menuOffset,                                                                                            // 2216
                menuScroll,                                                                                            // 2216
                menuHeight,                                                                                            // 2216
                abovePage,                                                                                             // 2216
                belowPage;                                                                                             // 2216
            $item = $item || module.get.selectedItem();                                                                // 2230
            $menu = $item.closest(selector.menu);                                                                      // 2231
            hasActive = $item && $item.length > 0;                                                                     // 2232
            forceScroll = forceScroll !== undefined ? forceScroll : false;                                             // 2233
                                                                                                                       //
            if ($item && $menu.length > 0 && hasActive) {                                                              // 2237
              itemOffset = $item.position().top;                                                                       // 2238
              $menu.addClass(className.loading);                                                                       // 2240
              menuScroll = $menu.scrollTop();                                                                          // 2241
              menuOffset = $menu.offset().top;                                                                         // 2242
              itemOffset = $item.offset().top;                                                                         // 2243
              offset = menuScroll - menuOffset + itemOffset;                                                           // 2244
                                                                                                                       //
              if (!forceScroll) {                                                                                      // 2245
                menuHeight = $menu.height();                                                                           // 2246
                belowPage = menuScroll + menuHeight < offset + edgeTolerance;                                          // 2247
                abovePage = offset - edgeTolerance < menuScroll;                                                       // 2248
              }                                                                                                        // 2249
                                                                                                                       //
              module.debug('Scrolling to active item', offset);                                                        // 2250
                                                                                                                       //
              if (forceScroll || abovePage || belowPage) {                                                             // 2251
                $menu.scrollTop(offset);                                                                               // 2252
              }                                                                                                        // 2253
                                                                                                                       //
              $menu.removeClass(className.loading);                                                                    // 2254
            }                                                                                                          // 2255
          },                                                                                                           // 2256
          text: function (text) {                                                                                      // 2257
            if (settings.action !== 'select') {                                                                        // 2258
              if (settings.action == 'combo') {                                                                        // 2259
                module.debug('Changing combo button text', text, $combo);                                              // 2260
                                                                                                                       //
                if (settings.preserveHTML) {                                                                           // 2261
                  $combo.html(text);                                                                                   // 2262
                } else {                                                                                               // 2263
                  $combo.text(text);                                                                                   // 2265
                }                                                                                                      // 2266
              } else {                                                                                                 // 2267
                if (text !== module.get.placeholderText()) {                                                           // 2269
                  $text.removeClass(className.placeholder);                                                            // 2270
                }                                                                                                      // 2271
                                                                                                                       //
                module.debug('Changing text', text, $text);                                                            // 2272
                $text.removeClass(className.filtered);                                                                 // 2273
                                                                                                                       //
                if (settings.preserveHTML) {                                                                           // 2276
                  $text.html(text);                                                                                    // 2277
                } else {                                                                                               // 2278
                  $text.text(text);                                                                                    // 2280
                }                                                                                                      // 2281
              }                                                                                                        // 2282
            }                                                                                                          // 2283
          },                                                                                                           // 2284
          selectedItem: function ($item) {                                                                             // 2285
            module.debug('Setting user selection to item', $item);                                                     // 2286
            module.remove.activeItem();                                                                                // 2287
            module.set.activeItem($item);                                                                              // 2288
            module.set.selected(module.get.choiceValue($item), $item);                                                 // 2289
          },                                                                                                           // 2290
          selectedLetter: function (letter) {                                                                          // 2291
            var $selectedItem = $item.filter('.' + className.selected),                                                // 2292
                alreadySelectedLetter = $selectedItem.length > 0 && module.has.firstLetter($selectedItem, letter),     // 2292
                $nextValue = false,                                                                                    // 2292
                $nextItem; // check next of same letter                                                                // 2292
                                                                                                                       //
            if (alreadySelectedLetter) {                                                                               // 2299
              $nextItem = $selectedItem.nextAll($item).eq(0);                                                          // 2300
                                                                                                                       //
              if (module.has.firstLetter($nextItem, letter)) {                                                         // 2301
                $nextValue = $nextItem;                                                                                // 2302
              }                                                                                                        // 2303
            } // check all values                                                                                      // 2304
                                                                                                                       //
                                                                                                                       //
            if (!$nextValue) {                                                                                         // 2306
              $item.each(function () {                                                                                 // 2307
                if (module.has.firstLetter($(this), letter)) {                                                         // 2309
                  $nextValue = $(this);                                                                                // 2310
                  return false;                                                                                        // 2311
                }                                                                                                      // 2312
              });                                                                                                      // 2313
            } // set next value                                                                                        // 2315
                                                                                                                       //
                                                                                                                       //
            if ($nextValue) {                                                                                          // 2317
              module.verbose('Scrolling to next value with letter', letter);                                           // 2318
              module.set.scrollPosition($nextValue);                                                                   // 2319
              $selectedItem.removeClass(className.selected);                                                           // 2320
              $nextValue.addClass(className.selected);                                                                 // 2321
                                                                                                                       //
              if (settings.selectOnKeydown && module.is.single()) {                                                    // 2322
                module.set.selectedItem($nextValue);                                                                   // 2323
              }                                                                                                        // 2324
            }                                                                                                          // 2325
          },                                                                                                           // 2326
          direction: function ($menu) {                                                                                // 2327
            if (settings.direction == 'auto') {                                                                        // 2328
              if (module.is.onScreen($menu)) {                                                                         // 2329
                module.remove.upward($menu);                                                                           // 2330
              } else {                                                                                                 // 2331
                module.set.upward($menu);                                                                              // 2333
              }                                                                                                        // 2334
            } else if (settings.direction == 'upward') {                                                               // 2335
              module.set.upward($menu);                                                                                // 2337
            }                                                                                                          // 2338
          },                                                                                                           // 2339
          upward: function ($menu) {                                                                                   // 2340
            var $element = $menu || $module;                                                                           // 2341
            $element.addClass(className.upward);                                                                       // 2342
          },                                                                                                           // 2343
          value: function (value, text, $selected) {                                                                   // 2344
            var escapedValue = module.escape.value(value),                                                             // 2345
                hasInput = $input.length > 0,                                                                          // 2345
                isAddition = !module.has.value(value),                                                                 // 2345
                currentValue = module.get.values(),                                                                    // 2345
                stringValue = value !== undefined ? String(value) : value,                                             // 2345
                newValue;                                                                                              // 2345
                                                                                                                       //
            if (hasInput) {                                                                                            // 2355
              if (!settings.allowReselection && stringValue == currentValue) {                                         // 2356
                module.verbose('Skipping value update already same value', value, currentValue);                       // 2357
                                                                                                                       //
                if (!module.is.initialLoad()) {                                                                        // 2358
                  return;                                                                                              // 2359
                }                                                                                                      // 2360
              }                                                                                                        // 2361
                                                                                                                       //
              if (module.is.single() && module.has.selectInput() && module.can.extendSelect()) {                       // 2363
                module.debug('Adding user option', value);                                                             // 2364
                module.add.optionValue(value);                                                                         // 2365
              }                                                                                                        // 2366
                                                                                                                       //
              module.debug('Updating input value', escapedValue, currentValue);                                        // 2367
              internalChange = true;                                                                                   // 2368
              $input.val(escapedValue);                                                                                // 2369
                                                                                                                       //
              if (settings.fireOnInit === false && module.is.initialLoad()) {                                          // 2372
                module.debug('Input native change event ignored on initial load');                                     // 2373
              } else {                                                                                                 // 2374
                module.trigger.change();                                                                               // 2376
              }                                                                                                        // 2377
                                                                                                                       //
              internalChange = false;                                                                                  // 2378
            } else {                                                                                                   // 2379
              module.verbose('Storing value in metadata', escapedValue, $input);                                       // 2381
                                                                                                                       //
              if (escapedValue !== currentValue) {                                                                     // 2382
                $module.data(metadata.value, stringValue);                                                             // 2383
              }                                                                                                        // 2384
            }                                                                                                          // 2385
                                                                                                                       //
            if (settings.fireOnInit === false && module.is.initialLoad()) {                                            // 2386
              module.verbose('No callback on initial load', settings.onChange);                                        // 2387
            } else {                                                                                                   // 2388
              settings.onChange.call(element, value, text, $selected);                                                 // 2390
            }                                                                                                          // 2391
          },                                                                                                           // 2392
          active: function () {                                                                                        // 2393
            $module.addClass(className.active);                                                                        // 2394
          },                                                                                                           // 2397
          multiple: function () {                                                                                      // 2398
            $module.addClass(className.multiple);                                                                      // 2399
          },                                                                                                           // 2400
          visible: function () {                                                                                       // 2401
            $module.addClass(className.visible);                                                                       // 2402
          },                                                                                                           // 2403
          exactly: function (value, $selectedItem) {                                                                   // 2404
            module.debug('Setting selected to exact values');                                                          // 2405
            module.clear();                                                                                            // 2406
            module.set.selected(value, $selectedItem);                                                                 // 2407
          },                                                                                                           // 2408
          selected: function (value, $selectedItem) {                                                                  // 2409
            var isMultiple = module.is.multiple(),                                                                     // 2410
                $userSelectedItem;                                                                                     // 2410
            $selectedItem = settings.allowAdditions ? $selectedItem || module.get.itemWithAdditions(value) : $selectedItem || module.get.item(value);
                                                                                                                       //
            if (!$selectedItem) {                                                                                      // 2418
              return;                                                                                                  // 2419
            }                                                                                                          // 2420
                                                                                                                       //
            module.debug('Setting selected menu item to', $selectedItem);                                              // 2421
                                                                                                                       //
            if (module.is.multiple()) {                                                                                // 2422
              module.remove.searchWidth();                                                                             // 2423
            }                                                                                                          // 2424
                                                                                                                       //
            if (module.is.single()) {                                                                                  // 2425
              module.remove.activeItem();                                                                              // 2426
              module.remove.selectedItem();                                                                            // 2427
            } else if (settings.useLabels) {                                                                           // 2428
              module.remove.selectedItem();                                                                            // 2430
            } // select each item                                                                                      // 2431
                                                                                                                       //
                                                                                                                       //
            $selectedItem.each(function () {                                                                           // 2433
              var $selected = $(this),                                                                                 // 2435
                  selectedText = module.get.choiceText($selected),                                                     // 2435
                  selectedValue = module.get.choiceValue($selected, selectedText),                                     // 2435
                  isFiltered = $selected.hasClass(className.filtered),                                                 // 2435
                  isActive = $selected.hasClass(className.active),                                                     // 2435
                  isUserValue = $selected.hasClass(className.addition),                                                // 2435
                  shouldAnimate = isMultiple && $selectedItem.length == 1;                                             // 2435
                                                                                                                       //
              if (isMultiple) {                                                                                        // 2445
                if (!isActive || isUserValue) {                                                                        // 2446
                  if (settings.apiSettings && settings.saveRemoteData) {                                               // 2447
                    module.save.remoteData(selectedText, selectedValue);                                               // 2448
                  }                                                                                                    // 2449
                                                                                                                       //
                  if (settings.useLabels) {                                                                            // 2450
                    module.add.value(selectedValue, selectedText, $selected);                                          // 2451
                    module.add.label(selectedValue, selectedText, shouldAnimate);                                      // 2452
                    module.set.activeItem($selected);                                                                  // 2453
                    module.filterActive();                                                                             // 2454
                    module.select.nextAvailable($selectedItem);                                                        // 2455
                  } else {                                                                                             // 2456
                    module.add.value(selectedValue, selectedText, $selected);                                          // 2458
                    module.set.text(module.add.variables(message.count));                                              // 2459
                    module.set.activeItem($selected);                                                                  // 2460
                  }                                                                                                    // 2461
                } else if (!isFiltered) {                                                                              // 2462
                  module.debug('Selected active value, removing label');                                               // 2464
                  module.remove.selected(selectedValue);                                                               // 2465
                }                                                                                                      // 2466
              } else {                                                                                                 // 2467
                if (settings.apiSettings && settings.saveRemoteData) {                                                 // 2469
                  module.save.remoteData(selectedText, selectedValue);                                                 // 2470
                }                                                                                                      // 2471
                                                                                                                       //
                module.set.text(selectedText);                                                                         // 2472
                module.set.value(selectedValue, selectedText, $selected);                                              // 2473
                $selected.addClass(className.active).addClass(className.selected);                                     // 2474
              }                                                                                                        // 2478
            });                                                                                                        // 2479
          }                                                                                                            // 2481
        },                                                                                                             // 2142
        add: {                                                                                                         // 2484
          label: function (value, text, shouldAnimate) {                                                               // 2485
            var $next = module.is.searchSelection() ? $search : $text,                                                 // 2486
                escapedValue = module.escape.value(value),                                                             // 2486
                $label;                                                                                                // 2486
            $label = $('<a />').addClass(className.label).attr('data-value', escapedValue).html(templates.label(escapedValue, text));
            $label = settings.onLabelCreate.call($label, escapedValue, text);                                          // 2498
                                                                                                                       //
            if (module.has.label(value)) {                                                                             // 2500
              module.debug('Label already exists, skipping', escapedValue);                                            // 2501
              return;                                                                                                  // 2502
            }                                                                                                          // 2503
                                                                                                                       //
            if (settings.label.variation) {                                                                            // 2504
              $label.addClass(settings.label.variation);                                                               // 2505
            }                                                                                                          // 2506
                                                                                                                       //
            if (shouldAnimate === true) {                                                                              // 2507
              module.debug('Animating in label', $label);                                                              // 2508
              $label.addClass(className.hidden).insertBefore($next).transition(settings.label.transition, settings.label.duration);
            } else {                                                                                                   // 2514
              module.debug('Adding selection label', $label);                                                          // 2516
              $label.insertBefore($next);                                                                              // 2517
            }                                                                                                          // 2520
          },                                                                                                           // 2521
          message: function (message) {                                                                                // 2522
            var $message = $menu.children(selector.message),                                                           // 2523
                html = settings.templates.message(module.add.variables(message));                                      // 2523
                                                                                                                       //
            if ($message.length > 0) {                                                                                 // 2527
              $message.html(html);                                                                                     // 2528
            } else {                                                                                                   // 2531
              $message = $('<div/>').html(html).addClass(className.message).appendTo($menu);                           // 2533
            }                                                                                                          // 2538
          },                                                                                                           // 2539
          optionValue: function (value) {                                                                              // 2540
            var escapedValue = module.escape.value(value),                                                             // 2541
                $option = $input.find('option[value="' + escapedValue + '"]'),                                         // 2541
                hasOption = $option.length > 0;                                                                        // 2541
                                                                                                                       //
            if (hasOption) {                                                                                           // 2546
              return;                                                                                                  // 2547
            } // temporarily disconnect observer                                                                       // 2548
                                                                                                                       //
                                                                                                                       //
            module.disconnect.selectObserver();                                                                        // 2550
                                                                                                                       //
            if (module.is.single()) {                                                                                  // 2551
              module.verbose('Removing previous user addition');                                                       // 2552
              $input.find('option.' + className.addition).remove();                                                    // 2553
            }                                                                                                          // 2554
                                                                                                                       //
            $('<option/>').prop('value', escapedValue).addClass(className.addition).html(value).appendTo($input);      // 2555
            module.verbose('Adding user addition as an <option>', value);                                              // 2561
            module.observe.select();                                                                                   // 2562
          },                                                                                                           // 2563
          userSuggestion: function (value) {                                                                           // 2564
            var $addition = $menu.children(selector.addition),                                                         // 2565
                $existingItem = module.get.item(value),                                                                // 2565
                alreadyHasValue = $existingItem && $existingItem.not(selector.addition).length,                        // 2565
                hasUserSuggestion = $addition.length > 0,                                                              // 2565
                html;                                                                                                  // 2565
                                                                                                                       //
            if (settings.useLabels && module.has.maxSelections()) {                                                    // 2572
              return;                                                                                                  // 2573
            }                                                                                                          // 2574
                                                                                                                       //
            if (value === '' || alreadyHasValue) {                                                                     // 2575
              $addition.remove();                                                                                      // 2576
              return;                                                                                                  // 2577
            }                                                                                                          // 2578
                                                                                                                       //
            if (hasUserSuggestion) {                                                                                   // 2579
              $addition.data(metadata.value, value).data(metadata.text, value).attr('data-' + metadata.value, value).attr('data-' + metadata.text, value).removeClass(className.filtered);
                                                                                                                       //
              if (!settings.hideAdditions) {                                                                           // 2587
                html = settings.templates.addition(module.add.variables(message.addResult, value));                    // 2588
                $addition.html(html);                                                                                  // 2589
              }                                                                                                        // 2592
                                                                                                                       //
              module.verbose('Replacing user suggestion with new value', $addition);                                   // 2593
            } else {                                                                                                   // 2594
              $addition = module.create.userChoice(value);                                                             // 2596
              $addition.prependTo($menu);                                                                              // 2597
              module.verbose('Adding item choice to menu corresponding with user choice addition', $addition);         // 2600
            }                                                                                                          // 2601
                                                                                                                       //
            if (!settings.hideAdditions || module.is.allFiltered()) {                                                  // 2602
              $addition.addClass(className.selected).siblings().removeClass(className.selected);                       // 2603
            }                                                                                                          // 2608
                                                                                                                       //
            module.refreshItems();                                                                                     // 2609
          },                                                                                                           // 2610
          variables: function (message, term) {                                                                        // 2611
            var hasCount = message.search('{count}') !== -1,                                                           // 2612
                hasMaxCount = message.search('{maxCount}') !== -1,                                                     // 2612
                hasTerm = message.search('{term}') !== -1,                                                             // 2612
                values,                                                                                                // 2612
                count,                                                                                                 // 2612
                query;                                                                                                 // 2612
            module.verbose('Adding templated variables to message', message);                                          // 2620
                                                                                                                       //
            if (hasCount) {                                                                                            // 2621
              count = module.get.selectionCount();                                                                     // 2622
              message = message.replace('{count}', count);                                                             // 2623
            }                                                                                                          // 2624
                                                                                                                       //
            if (hasMaxCount) {                                                                                         // 2625
              count = module.get.selectionCount();                                                                     // 2626
              message = message.replace('{maxCount}', settings.maxSelections);                                         // 2627
            }                                                                                                          // 2628
                                                                                                                       //
            if (hasTerm) {                                                                                             // 2629
              query = term || module.get.query();                                                                      // 2630
              message = message.replace('{term}', query);                                                              // 2631
            }                                                                                                          // 2632
                                                                                                                       //
            return message;                                                                                            // 2633
          },                                                                                                           // 2634
          value: function (addedValue, addedText, $selectedItem) {                                                     // 2635
            var currentValue = module.get.values(),                                                                    // 2636
                newValue;                                                                                              // 2636
                                                                                                                       //
            if (addedValue === '') {                                                                                   // 2640
              module.debug('Cannot select blank values from multiselect');                                             // 2641
              return;                                                                                                  // 2642
            } // extend current array                                                                                  // 2643
                                                                                                                       //
                                                                                                                       //
            if ($.isArray(currentValue)) {                                                                             // 2645
              newValue = currentValue.concat([addedValue]);                                                            // 2646
              newValue = module.get.uniqueArray(newValue);                                                             // 2647
            } else {                                                                                                   // 2648
              newValue = [addedValue];                                                                                 // 2650
            } // add values                                                                                            // 2651
                                                                                                                       //
                                                                                                                       //
            if (module.has.selectInput()) {                                                                            // 2653
              if (module.can.extendSelect()) {                                                                         // 2654
                module.debug('Adding value to select', addedValue, newValue, $input);                                  // 2655
                module.add.optionValue(addedValue);                                                                    // 2656
              }                                                                                                        // 2657
            } else {                                                                                                   // 2658
              newValue = newValue.join(settings.delimiter);                                                            // 2660
              module.debug('Setting hidden input to delimited value', newValue, $input);                               // 2661
            }                                                                                                          // 2662
                                                                                                                       //
            if (settings.fireOnInit === false && module.is.initialLoad()) {                                            // 2664
              module.verbose('Skipping onadd callback on initial load', settings.onAdd);                               // 2665
            } else {                                                                                                   // 2666
              settings.onAdd.call(element, addedValue, addedText, $selectedItem);                                      // 2668
            }                                                                                                          // 2669
                                                                                                                       //
            module.set.value(newValue, addedValue, addedText, $selectedItem);                                          // 2670
            module.check.maxSelections();                                                                              // 2671
          }                                                                                                            // 2672
        },                                                                                                             // 2484
        remove: {                                                                                                      // 2675
          active: function () {                                                                                        // 2676
            $module.removeClass(className.active);                                                                     // 2677
          },                                                                                                           // 2678
          activeLabel: function () {                                                                                   // 2679
            $module.find(selector.label).removeClass(className.active);                                                // 2680
          },                                                                                                           // 2681
          empty: function () {                                                                                         // 2682
            $module.removeClass(className.empty);                                                                      // 2683
          },                                                                                                           // 2684
          loading: function () {                                                                                       // 2685
            $module.removeClass(className.loading);                                                                    // 2686
          },                                                                                                           // 2687
          initialLoad: function () {                                                                                   // 2688
            initialLoad = false;                                                                                       // 2689
          },                                                                                                           // 2690
          upward: function ($menu) {                                                                                   // 2691
            var $element = $menu || $module;                                                                           // 2692
            $element.removeClass(className.upward);                                                                    // 2693
          },                                                                                                           // 2694
          visible: function () {                                                                                       // 2695
            $module.removeClass(className.visible);                                                                    // 2696
          },                                                                                                           // 2697
          activeItem: function () {                                                                                    // 2698
            $item.removeClass(className.active);                                                                       // 2699
          },                                                                                                           // 2700
          filteredItem: function () {                                                                                  // 2701
            if (settings.useLabels && module.has.maxSelections()) {                                                    // 2702
              return;                                                                                                  // 2703
            }                                                                                                          // 2704
                                                                                                                       //
            if (settings.useLabels && module.is.multiple()) {                                                          // 2705
              $item.not('.' + className.active).removeClass(className.filtered);                                       // 2706
            } else {                                                                                                   // 2707
              $item.removeClass(className.filtered);                                                                   // 2709
            }                                                                                                          // 2710
                                                                                                                       //
            module.remove.empty();                                                                                     // 2711
          },                                                                                                           // 2712
          optionValue: function (value) {                                                                              // 2713
            var escapedValue = module.escape.value(value),                                                             // 2714
                $option = $input.find('option[value="' + escapedValue + '"]'),                                         // 2714
                hasOption = $option.length > 0;                                                                        // 2714
                                                                                                                       //
            if (!hasOption || !$option.hasClass(className.addition)) {                                                 // 2719
              return;                                                                                                  // 2720
            } // temporarily disconnect observer                                                                       // 2721
                                                                                                                       //
                                                                                                                       //
            if (selectObserver) {                                                                                      // 2723
              selectObserver.disconnect();                                                                             // 2724
              module.verbose('Temporarily disconnecting mutation observer');                                           // 2725
            }                                                                                                          // 2726
                                                                                                                       //
            $option.remove();                                                                                          // 2727
            module.verbose('Removing user addition as an <option>', escapedValue);                                     // 2728
                                                                                                                       //
            if (selectObserver) {                                                                                      // 2729
              selectObserver.observe($input[0], {                                                                      // 2730
                childList: true,                                                                                       // 2731
                subtree: true                                                                                          // 2732
              });                                                                                                      // 2730
            }                                                                                                          // 2734
          },                                                                                                           // 2735
          message: function () {                                                                                       // 2736
            $menu.children(selector.message).remove();                                                                 // 2737
          },                                                                                                           // 2738
          searchWidth: function () {                                                                                   // 2739
            $search.css('width', '');                                                                                  // 2740
          },                                                                                                           // 2741
          searchTerm: function () {                                                                                    // 2742
            module.verbose('Cleared search term');                                                                     // 2743
            $search.val('');                                                                                           // 2744
            module.set.filtered();                                                                                     // 2745
          },                                                                                                           // 2746
          userAddition: function () {                                                                                  // 2747
            $item.filter(selector.addition).remove();                                                                  // 2748
          },                                                                                                           // 2749
          selected: function (value, $selectedItem) {                                                                  // 2750
            $selectedItem = settings.allowAdditions ? $selectedItem || module.get.itemWithAdditions(value) : $selectedItem || module.get.item(value);
                                                                                                                       //
            if (!$selectedItem) {                                                                                      // 2756
              return false;                                                                                            // 2757
            }                                                                                                          // 2758
                                                                                                                       //
            $selectedItem.each(function () {                                                                           // 2760
              var $selected = $(this),                                                                                 // 2762
                  selectedText = module.get.choiceText($selected),                                                     // 2762
                  selectedValue = module.get.choiceValue($selected, selectedText);                                     // 2762
                                                                                                                       //
              if (module.is.multiple()) {                                                                              // 2767
                if (settings.useLabels) {                                                                              // 2768
                  module.remove.value(selectedValue, selectedText, $selected);                                         // 2769
                  module.remove.label(selectedValue);                                                                  // 2770
                } else {                                                                                               // 2771
                  module.remove.value(selectedValue, selectedText, $selected);                                         // 2773
                                                                                                                       //
                  if (module.get.selectionCount() === 0) {                                                             // 2774
                    module.set.placeholderText();                                                                      // 2775
                  } else {                                                                                             // 2776
                    module.set.text(module.add.variables(message.count));                                              // 2778
                  }                                                                                                    // 2779
                }                                                                                                      // 2780
              } else {                                                                                                 // 2781
                module.remove.value(selectedValue, selectedText, $selected);                                           // 2783
              }                                                                                                        // 2784
                                                                                                                       //
              $selected.removeClass(className.filtered).removeClass(className.active);                                 // 2785
                                                                                                                       //
              if (settings.useLabels) {                                                                                // 2789
                $selected.removeClass(className.selected);                                                             // 2790
              }                                                                                                        // 2791
            });                                                                                                        // 2792
          },                                                                                                           // 2794
          selectedItem: function () {                                                                                  // 2795
            $item.removeClass(className.selected);                                                                     // 2796
          },                                                                                                           // 2797
          value: function (removedValue, removedText, $removedItem) {                                                  // 2798
            var values = module.get.values(),                                                                          // 2799
                newValue;                                                                                              // 2799
                                                                                                                       //
            if (module.has.selectInput()) {                                                                            // 2803
              module.verbose('Input is <select> removing selected option', removedValue);                              // 2804
              newValue = module.remove.arrayValue(removedValue, values);                                               // 2805
              module.remove.optionValue(removedValue);                                                                 // 2806
            } else {                                                                                                   // 2807
              module.verbose('Removing from delimited values', removedValue);                                          // 2809
              newValue = module.remove.arrayValue(removedValue, values);                                               // 2810
              newValue = newValue.join(settings.delimiter);                                                            // 2811
            }                                                                                                          // 2812
                                                                                                                       //
            if (settings.fireOnInit === false && module.is.initialLoad()) {                                            // 2813
              module.verbose('No callback on initial load', settings.onRemove);                                        // 2814
            } else {                                                                                                   // 2815
              settings.onRemove.call(element, removedValue, removedText, $removedItem);                                // 2817
            }                                                                                                          // 2818
                                                                                                                       //
            module.set.value(newValue, removedText, $removedItem);                                                     // 2819
            module.check.maxSelections();                                                                              // 2820
          },                                                                                                           // 2821
          arrayValue: function (removedValue, values) {                                                                // 2822
            if (!$.isArray(values)) {                                                                                  // 2823
              values = [values];                                                                                       // 2824
            }                                                                                                          // 2825
                                                                                                                       //
            values = $.grep(values, function (value) {                                                                 // 2826
              return removedValue != value;                                                                            // 2827
            });                                                                                                        // 2828
            module.verbose('Removed value from delimited string', removedValue, values);                               // 2829
            return values;                                                                                             // 2830
          },                                                                                                           // 2831
          label: function (value, shouldAnimate) {                                                                     // 2832
            var $labels = $module.find(selector.label),                                                                // 2833
                $removedLabel = $labels.filter('[data-value="' + value + '"]');                                        // 2833
            module.verbose('Removing label', $removedLabel);                                                           // 2837
            $removedLabel.remove();                                                                                    // 2838
          },                                                                                                           // 2839
          activeLabels: function ($activeLabels) {                                                                     // 2840
            $activeLabels = $activeLabels || $module.find(selector.label).filter('.' + className.active);              // 2841
            module.verbose('Removing active label selections', $activeLabels);                                         // 2842
            module.remove.labels($activeLabels);                                                                       // 2843
          },                                                                                                           // 2844
          labels: function ($labels) {                                                                                 // 2845
            $labels = $labels || $module.find(selector.label);                                                         // 2846
            module.verbose('Removing labels', $labels);                                                                // 2847
            $labels.each(function () {                                                                                 // 2848
              var $label = $(this),                                                                                    // 2850
                  value = $label.data(metadata.value),                                                                 // 2850
                  stringValue = value !== undefined ? String(value) : value,                                           // 2850
                  isUserValue = module.is.userValue(stringValue);                                                      // 2850
                                                                                                                       //
              if (settings.onLabelRemove.call($label, value) === false) {                                              // 2858
                module.debug('Label remove callback cancelled removal');                                               // 2859
                return;                                                                                                // 2860
              }                                                                                                        // 2861
                                                                                                                       //
              module.remove.message();                                                                                 // 2862
                                                                                                                       //
              if (isUserValue) {                                                                                       // 2863
                module.remove.value(stringValue);                                                                      // 2864
                module.remove.label(stringValue);                                                                      // 2865
              } else {                                                                                                 // 2866
                // selected will also remove label                                                                     // 2868
                module.remove.selected(stringValue);                                                                   // 2869
              }                                                                                                        // 2870
            });                                                                                                        // 2871
          },                                                                                                           // 2873
          tabbable: function () {                                                                                      // 2874
            if (module.has.search()) {                                                                                 // 2875
              module.debug('Searchable dropdown initialized');                                                         // 2876
              $search.removeAttr('tabindex');                                                                          // 2877
              $menu.removeAttr('tabindex');                                                                            // 2880
            } else {                                                                                                   // 2883
              module.debug('Simple selection dropdown initialized');                                                   // 2885
              $module.removeAttr('tabindex');                                                                          // 2886
              $menu.removeAttr('tabindex');                                                                            // 2889
            }                                                                                                          // 2892
          }                                                                                                            // 2893
        },                                                                                                             // 2675
        has: {                                                                                                         // 2896
          menuSearch: function () {                                                                                    // 2897
            return module.has.search() && $search.closest($menu).length > 0;                                           // 2898
          },                                                                                                           // 2899
          search: function () {                                                                                        // 2900
            return $search.length > 0;                                                                                 // 2901
          },                                                                                                           // 2902
          sizer: function () {                                                                                         // 2903
            return $sizer.length > 0;                                                                                  // 2904
          },                                                                                                           // 2905
          selectInput: function () {                                                                                   // 2906
            return $input.is('select');                                                                                // 2907
          },                                                                                                           // 2908
          minCharacters: function (searchTerm) {                                                                       // 2909
            if (settings.minCharacters) {                                                                              // 2910
              searchTerm = searchTerm !== undefined ? String(searchTerm) : String(module.get.query());                 // 2911
              return searchTerm.length >= settings.minCharacters;                                                      // 2915
            }                                                                                                          // 2916
                                                                                                                       //
            return true;                                                                                               // 2917
          },                                                                                                           // 2918
          firstLetter: function ($item, letter) {                                                                      // 2919
            var text, firstLetter;                                                                                     // 2920
                                                                                                                       //
            if (!$item || $item.length === 0 || typeof letter !== 'string') {                                          // 2924
              return false;                                                                                            // 2925
            }                                                                                                          // 2926
                                                                                                                       //
            text = module.get.choiceText($item, false);                                                                // 2927
            letter = letter.toLowerCase();                                                                             // 2928
            firstLetter = String(text).charAt(0).toLowerCase();                                                        // 2929
            return letter == firstLetter;                                                                              // 2930
          },                                                                                                           // 2931
          input: function () {                                                                                         // 2932
            return $input.length > 0;                                                                                  // 2933
          },                                                                                                           // 2934
          items: function () {                                                                                         // 2935
            return $item.length > 0;                                                                                   // 2936
          },                                                                                                           // 2937
          menu: function () {                                                                                          // 2938
            return $menu.length > 0;                                                                                   // 2939
          },                                                                                                           // 2940
          message: function () {                                                                                       // 2941
            return $menu.children(selector.message).length !== 0;                                                      // 2942
          },                                                                                                           // 2943
          label: function (value) {                                                                                    // 2944
            var escapedValue = module.escape.value(value),                                                             // 2945
                $labels = $module.find(selector.label);                                                                // 2945
            return $labels.filter('[data-value="' + escapedValue + '"]').length > 0;                                   // 2949
          },                                                                                                           // 2950
          maxSelections: function () {                                                                                 // 2951
            return settings.maxSelections && module.get.selectionCount() >= settings.maxSelections;                    // 2952
          },                                                                                                           // 2953
          allResultsFiltered: function () {                                                                            // 2954
            var $normalResults = $item.not(selector.addition);                                                         // 2955
            return $normalResults.filter(selector.unselectable).length === $normalResults.length;                      // 2958
          },                                                                                                           // 2959
          userSuggestion: function () {                                                                                // 2960
            return $menu.children(selector.addition).length > 0;                                                       // 2961
          },                                                                                                           // 2962
          query: function () {                                                                                         // 2963
            return module.get.query() !== '';                                                                          // 2964
          },                                                                                                           // 2965
          value: function (value) {                                                                                    // 2966
            var values = module.get.values(),                                                                          // 2967
                hasValue = $.isArray(values) ? values && $.inArray(value, values) !== -1 : values == value;            // 2967
            return hasValue ? true : false;                                                                            // 2973
          }                                                                                                            // 2977
        },                                                                                                             // 2896
        is: {                                                                                                          // 2980
          active: function () {                                                                                        // 2981
            return $module.hasClass(className.active);                                                                 // 2982
          },                                                                                                           // 2983
          bubbledLabelClick: function (event) {                                                                        // 2984
            return $(event.target).is('select, input') && $module.closest('label').length > 0;                         // 2985
          },                                                                                                           // 2986
          alreadySetup: function () {                                                                                  // 2987
            return $module.is('select') && $module.parent(selector.dropdown).length > 0 && $module.prev().length === 0;
          },                                                                                                           // 2989
          animating: function ($subMenu) {                                                                             // 2990
            return $subMenu ? $subMenu.transition && $subMenu.transition('is animating') : $menu.transition && $menu.transition('is animating');
          },                                                                                                           // 2995
          disabled: function () {                                                                                      // 2996
            return $module.hasClass(className.disabled);                                                               // 2997
          },                                                                                                           // 2998
          focused: function () {                                                                                       // 2999
            return document.activeElement === $module[0];                                                              // 3000
          },                                                                                                           // 3001
          focusedOnSearch: function () {                                                                               // 3002
            return document.activeElement === $search[0];                                                              // 3003
          },                                                                                                           // 3004
          allFiltered: function () {                                                                                   // 3005
            return (module.is.multiple() || module.has.search()) && !(settings.hideAdditions == false && module.has.userSuggestion()) && !module.has.message() && module.has.allResultsFiltered();
          },                                                                                                           // 3007
          hidden: function ($subMenu) {                                                                                // 3008
            return !module.is.visible($subMenu);                                                                       // 3009
          },                                                                                                           // 3010
          initialLoad: function () {                                                                                   // 3011
            return initialLoad;                                                                                        // 3012
          },                                                                                                           // 3013
          onScreen: function ($subMenu) {                                                                              // 3014
            var $currentMenu = $subMenu || $menu,                                                                      // 3015
                canOpenDownward = true,                                                                                // 3015
                onScreen = {},                                                                                         // 3015
                calculations;                                                                                          // 3015
            $currentMenu.addClass(className.loading);                                                                  // 3021
            calculations = {                                                                                           // 3022
              context: {                                                                                               // 3023
                scrollTop: $context.scrollTop(),                                                                       // 3024
                height: $context.outerHeight()                                                                         // 3025
              },                                                                                                       // 3023
              menu: {                                                                                                  // 3027
                offset: $currentMenu.offset(),                                                                         // 3028
                height: $currentMenu.outerHeight()                                                                     // 3029
              }                                                                                                        // 3027
            };                                                                                                         // 3022
            onScreen = {                                                                                               // 3032
              above: calculations.context.scrollTop <= calculations.menu.offset.top - calculations.menu.height,        // 3033
              below: calculations.context.scrollTop + calculations.context.height >= calculations.menu.offset.top + calculations.menu.height
            };                                                                                                         // 3032
                                                                                                                       //
            if (onScreen.below) {                                                                                      // 3036
              module.verbose('Dropdown can fit in context downward', onScreen);                                        // 3037
              canOpenDownward = true;                                                                                  // 3038
            } else if (!onScreen.below && !onScreen.above) {                                                           // 3039
              module.verbose('Dropdown cannot fit in either direction, favoring downward', onScreen);                  // 3041
              canOpenDownward = true;                                                                                  // 3042
            } else {                                                                                                   // 3043
              module.verbose('Dropdown cannot fit below, opening upward', onScreen);                                   // 3045
              canOpenDownward = false;                                                                                 // 3046
            }                                                                                                          // 3047
                                                                                                                       //
            $currentMenu.removeClass(className.loading);                                                               // 3048
            return canOpenDownward;                                                                                    // 3049
          },                                                                                                           // 3050
          inObject: function (needle, object) {                                                                        // 3051
            var found = false;                                                                                         // 3052
            $.each(object, function (index, property) {                                                                // 3055
              if (property == needle) {                                                                                // 3056
                found = true;                                                                                          // 3057
                return true;                                                                                           // 3058
              }                                                                                                        // 3059
            });                                                                                                        // 3060
            return found;                                                                                              // 3061
          },                                                                                                           // 3062
          multiple: function () {                                                                                      // 3063
            return $module.hasClass(className.multiple);                                                               // 3064
          },                                                                                                           // 3065
          single: function () {                                                                                        // 3066
            return !module.is.multiple();                                                                              // 3067
          },                                                                                                           // 3068
          selectMutation: function (mutations) {                                                                       // 3069
            var selectChanged = false;                                                                                 // 3070
            $.each(mutations, function (index, mutation) {                                                             // 3073
              if (mutation.target && $(mutation.target).is('select')) {                                                // 3074
                selectChanged = true;                                                                                  // 3075
                return true;                                                                                           // 3076
              }                                                                                                        // 3077
            });                                                                                                        // 3078
            return selectChanged;                                                                                      // 3079
          },                                                                                                           // 3080
          search: function () {                                                                                        // 3081
            return $module.hasClass(className.search);                                                                 // 3082
          },                                                                                                           // 3083
          searchSelection: function () {                                                                               // 3084
            return module.has.search() && $search.parent(selector.dropdown).length === 1;                              // 3085
          },                                                                                                           // 3086
          selection: function () {                                                                                     // 3087
            return $module.hasClass(className.selection);                                                              // 3088
          },                                                                                                           // 3089
          userValue: function (value) {                                                                                // 3090
            return $.inArray(value, module.get.userValues()) !== -1;                                                   // 3091
          },                                                                                                           // 3092
          upward: function ($menu) {                                                                                   // 3093
            var $element = $menu || $module;                                                                           // 3094
            return $element.hasClass(className.upward);                                                                // 3095
          },                                                                                                           // 3096
          visible: function ($subMenu) {                                                                               // 3097
            return $subMenu ? $subMenu.hasClass(className.visible) : $menu.hasClass(className.visible);                // 3098
          }                                                                                                            // 3102
        },                                                                                                             // 2980
        can: {                                                                                                         // 3105
          activate: function ($item) {                                                                                 // 3106
            if (settings.useLabels) {                                                                                  // 3107
              return true;                                                                                             // 3108
            }                                                                                                          // 3109
                                                                                                                       //
            if (!module.has.maxSelections()) {                                                                         // 3110
              return true;                                                                                             // 3111
            }                                                                                                          // 3112
                                                                                                                       //
            if (module.has.maxSelections() && $item.hasClass(className.active)) {                                      // 3113
              return true;                                                                                             // 3114
            }                                                                                                          // 3115
                                                                                                                       //
            return false;                                                                                              // 3116
          },                                                                                                           // 3117
          click: function () {                                                                                         // 3118
            return hasTouch || settings.on == 'click';                                                                 // 3119
          },                                                                                                           // 3120
          extendSelect: function () {                                                                                  // 3121
            return settings.allowAdditions || settings.apiSettings;                                                    // 3122
          },                                                                                                           // 3123
          show: function () {                                                                                          // 3124
            return !module.is.disabled() && (module.has.items() || module.has.message());                              // 3125
          },                                                                                                           // 3126
          useAPI: function () {                                                                                        // 3127
            return $.fn.api !== undefined;                                                                             // 3128
          }                                                                                                            // 3129
        },                                                                                                             // 3105
        animate: {                                                                                                     // 3132
          show: function (callback, $subMenu) {                                                                        // 3133
            var $currentMenu = $subMenu || $menu,                                                                      // 3134
                start = $subMenu ? function () {} : function () {                                                      // 3134
              module.hideSubMenus();                                                                                   // 3139
              module.hideOthers();                                                                                     // 3140
              module.set.active();                                                                                     // 3141
            },                                                                                                         // 3142
                transition;                                                                                            // 3134
            callback = $.isFunction(callback) ? callback : function () {};                                             // 3145
            module.verbose('Doing menu show animation', $currentMenu);                                                 // 3149
            module.set.direction($subMenu);                                                                            // 3150
            transition = module.get.transition($subMenu);                                                              // 3151
                                                                                                                       //
            if (module.is.selection()) {                                                                               // 3152
              module.set.scrollPosition(module.get.selectedItem(), true);                                              // 3153
            }                                                                                                          // 3154
                                                                                                                       //
            if (module.is.hidden($currentMenu) || module.is.animating($currentMenu)) {                                 // 3155
              if (transition == 'none') {                                                                              // 3156
                start();                                                                                               // 3157
                $currentMenu.transition('show');                                                                       // 3158
                callback.call(element);                                                                                // 3159
              } else if ($.fn.transition !== undefined && $module.transition('is supported')) {                        // 3160
                $currentMenu.transition({                                                                              // 3162
                  animation: transition + ' in',                                                                       // 3164
                  debug: settings.debug,                                                                               // 3165
                  verbose: settings.verbose,                                                                           // 3166
                  duration: settings.duration,                                                                         // 3167
                  queue: true,                                                                                         // 3168
                  onStart: start,                                                                                      // 3169
                  onComplete: function () {                                                                            // 3170
                    callback.call(element);                                                                            // 3171
                  }                                                                                                    // 3172
                });                                                                                                    // 3163
              } else {                                                                                                 // 3175
                module.error(error.noTransition, transition);                                                          // 3177
              }                                                                                                        // 3178
            }                                                                                                          // 3179
          },                                                                                                           // 3180
          hide: function (callback, $subMenu) {                                                                        // 3181
            var $currentMenu = $subMenu || $menu,                                                                      // 3182
                duration = $subMenu ? settings.duration * 0.9 : settings.duration,                                     // 3182
                start = $subMenu ? function () {} : function () {                                                      // 3182
              if (module.can.click()) {                                                                                // 3190
                module.unbind.intent();                                                                                // 3191
              }                                                                                                        // 3192
                                                                                                                       //
              module.remove.active();                                                                                  // 3193
            },                                                                                                         // 3194
                transition = module.get.transition($subMenu);                                                          // 3182
            callback = $.isFunction(callback) ? callback : function () {};                                             // 3197
                                                                                                                       //
            if (module.is.visible($currentMenu) || module.is.animating($currentMenu)) {                                // 3201
              module.verbose('Doing menu hide animation', $currentMenu);                                               // 3202
                                                                                                                       //
              if (transition == 'none') {                                                                              // 3204
                start();                                                                                               // 3205
                $currentMenu.transition('hide');                                                                       // 3206
                callback.call(element);                                                                                // 3207
              } else if ($.fn.transition !== undefined && $module.transition('is supported')) {                        // 3208
                $currentMenu.transition({                                                                              // 3210
                  animation: transition + ' out',                                                                      // 3212
                  duration: settings.duration,                                                                         // 3213
                  debug: settings.debug,                                                                               // 3214
                  verbose: settings.verbose,                                                                           // 3215
                  queue: true,                                                                                         // 3216
                  onStart: start,                                                                                      // 3217
                  onComplete: function () {                                                                            // 3218
                    if (settings.direction == 'auto') {                                                                // 3219
                      module.remove.upward($subMenu);                                                                  // 3220
                    }                                                                                                  // 3221
                                                                                                                       //
                    callback.call(element);                                                                            // 3222
                  }                                                                                                    // 3223
                });                                                                                                    // 3211
              } else {                                                                                                 // 3226
                module.error(error.transition);                                                                        // 3228
              }                                                                                                        // 3229
            }                                                                                                          // 3230
          }                                                                                                            // 3231
        },                                                                                                             // 3132
        hideAndClear: function () {                                                                                    // 3234
          module.remove.searchTerm();                                                                                  // 3235
                                                                                                                       //
          if (module.has.maxSelections()) {                                                                            // 3236
            return;                                                                                                    // 3237
          }                                                                                                            // 3238
                                                                                                                       //
          if (module.has.search()) {                                                                                   // 3239
            module.hide(function () {                                                                                  // 3240
              module.remove.filteredItem();                                                                            // 3241
            });                                                                                                        // 3242
          } else {                                                                                                     // 3243
            module.hide();                                                                                             // 3245
          }                                                                                                            // 3246
        },                                                                                                             // 3247
        delay: {                                                                                                       // 3249
          show: function () {                                                                                          // 3250
            module.verbose('Delaying show event to ensure user intent');                                               // 3251
            clearTimeout(module.timer);                                                                                // 3252
            module.timer = setTimeout(module.show, settings.delay.show);                                               // 3253
          },                                                                                                           // 3254
          hide: function () {                                                                                          // 3255
            module.verbose('Delaying hide event to ensure user intent');                                               // 3256
            clearTimeout(module.timer);                                                                                // 3257
            module.timer = setTimeout(module.hide, settings.delay.hide);                                               // 3258
          }                                                                                                            // 3259
        },                                                                                                             // 3249
        escape: {                                                                                                      // 3262
          value: function (value) {                                                                                    // 3263
            var multipleValues = $.isArray(value),                                                                     // 3264
                stringValue = typeof value === 'string',                                                               // 3264
                isUnparsable = !stringValue && !multipleValues,                                                        // 3264
                hasQuotes = stringValue && value.search(regExp.quote) !== -1,                                          // 3264
                values = [];                                                                                           // 3264
                                                                                                                       //
            if (!module.has.selectInput() || isUnparsable || !hasQuotes) {                                             // 3271
              return value;                                                                                            // 3272
            }                                                                                                          // 3273
                                                                                                                       //
            module.debug('Encoding quote values for use in select', value);                                            // 3274
                                                                                                                       //
            if (multipleValues) {                                                                                      // 3275
              $.each(value, function (index, value) {                                                                  // 3276
                values.push(value.replace(regExp.quote, '&quot;'));                                                    // 3277
              });                                                                                                      // 3278
              return values;                                                                                           // 3279
            }                                                                                                          // 3280
                                                                                                                       //
            return value.replace(regExp.quote, '&quot;');                                                              // 3281
          },                                                                                                           // 3282
          regExp: function (text) {                                                                                    // 3283
            text = String(text);                                                                                       // 3284
            return text.replace(regExp.escape, '\\$&');                                                                // 3285
          }                                                                                                            // 3286
        },                                                                                                             // 3262
        setting: function (name, value) {                                                                              // 3289
          module.debug('Changing setting', name, value);                                                               // 3290
                                                                                                                       //
          if ($.isPlainObject(name)) {                                                                                 // 3291
            $.extend(true, settings, name);                                                                            // 3292
          } else if (value !== undefined) {                                                                            // 3293
            if ($.isPlainObject(settings[name])) {                                                                     // 3295
              $.extend(true, settings[name], value);                                                                   // 3296
            } else {                                                                                                   // 3297
              settings[name] = value;                                                                                  // 3299
            }                                                                                                          // 3300
          } else {                                                                                                     // 3301
            return settings[name];                                                                                     // 3303
          }                                                                                                            // 3304
        },                                                                                                             // 3305
        internal: function (name, value) {                                                                             // 3306
          if ($.isPlainObject(name)) {                                                                                 // 3307
            $.extend(true, module, name);                                                                              // 3308
          } else if (value !== undefined) {                                                                            // 3309
            module[name] = value;                                                                                      // 3311
          } else {                                                                                                     // 3312
            return module[name];                                                                                       // 3314
          }                                                                                                            // 3315
        },                                                                                                             // 3316
        debug: function () {                                                                                           // 3317
          if (!settings.silent && settings.debug) {                                                                    // 3318
            if (settings.performance) {                                                                                // 3319
              module.performance.log(arguments);                                                                       // 3320
            } else {                                                                                                   // 3321
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 3323
              module.debug.apply(console, arguments);                                                                  // 3324
            }                                                                                                          // 3325
          }                                                                                                            // 3326
        },                                                                                                             // 3327
        verbose: function () {                                                                                         // 3328
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 3329
            if (settings.performance) {                                                                                // 3330
              module.performance.log(arguments);                                                                       // 3331
            } else {                                                                                                   // 3332
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 3334
              module.verbose.apply(console, arguments);                                                                // 3335
            }                                                                                                          // 3336
          }                                                                                                            // 3337
        },                                                                                                             // 3338
        error: function () {                                                                                           // 3339
          if (!settings.silent) {                                                                                      // 3340
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 3341
            module.error.apply(console, arguments);                                                                    // 3342
          }                                                                                                            // 3343
        },                                                                                                             // 3344
        performance: {                                                                                                 // 3345
          log: function (message) {                                                                                    // 3346
            var currentTime, executionTime, previousTime;                                                              // 3347
                                                                                                                       //
            if (settings.performance) {                                                                                // 3352
              currentTime = new Date().getTime();                                                                      // 3353
              previousTime = time || currentTime;                                                                      // 3354
              executionTime = currentTime - previousTime;                                                              // 3355
              time = currentTime;                                                                                      // 3356
              performance.push({                                                                                       // 3357
                'Name': message[0],                                                                                    // 3358
                'Arguments': [].slice.call(message, 1) || '',                                                          // 3359
                'Element': element,                                                                                    // 3360
                'Execution Time': executionTime                                                                        // 3361
              });                                                                                                      // 3357
            }                                                                                                          // 3363
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 3364
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 3365
          },                                                                                                           // 3366
          display: function () {                                                                                       // 3367
            var title = settings.name + ':',                                                                           // 3368
                totalTime = 0;                                                                                         // 3368
            time = false;                                                                                              // 3372
            clearTimeout(module.performance.timer);                                                                    // 3373
            $.each(performance, function (index, data) {                                                               // 3374
              totalTime += data['Execution Time'];                                                                     // 3375
            });                                                                                                        // 3376
            title += ' ' + totalTime + 'ms';                                                                           // 3377
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 3378
              title += ' \'' + moduleSelector + '\'';                                                                  // 3379
            }                                                                                                          // 3380
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 3381
              console.groupCollapsed(title);                                                                           // 3382
                                                                                                                       //
              if (console.table) {                                                                                     // 3383
                console.table(performance);                                                                            // 3384
              } else {                                                                                                 // 3385
                $.each(performance, function (index, data) {                                                           // 3387
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 3388
                });                                                                                                    // 3389
              }                                                                                                        // 3390
                                                                                                                       //
              console.groupEnd();                                                                                      // 3391
            }                                                                                                          // 3392
                                                                                                                       //
            performance = [];                                                                                          // 3393
          }                                                                                                            // 3394
        },                                                                                                             // 3345
        invoke: function (query, passedArguments, context) {                                                           // 3396
          var object = instance,                                                                                       // 3397
              maxDepth,                                                                                                // 3397
              found,                                                                                                   // 3397
              response;                                                                                                // 3397
          passedArguments = passedArguments || queryArguments;                                                         // 3403
          context = element || context;                                                                                // 3404
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 3405
            query = query.split(/[\. ]/);                                                                              // 3406
            maxDepth = query.length - 1;                                                                               // 3407
            $.each(query, function (depth, value) {                                                                    // 3408
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 3413
                object = object[camelCaseValue];                                                                       // 3414
              } else if (object[camelCaseValue] !== undefined) {                                                       // 3415
                found = object[camelCaseValue];                                                                        // 3417
                return false;                                                                                          // 3418
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 3419
                object = object[value];                                                                                // 3421
              } else if (object[value] !== undefined) {                                                                // 3422
                found = object[value];                                                                                 // 3424
                return false;                                                                                          // 3425
              } else {                                                                                                 // 3426
                module.error(error.method, query);                                                                     // 3428
                return false;                                                                                          // 3429
              }                                                                                                        // 3430
            });                                                                                                        // 3431
          }                                                                                                            // 3432
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 3433
            response = found.apply(context, passedArguments);                                                          // 3434
          } else if (found !== undefined) {                                                                            // 3435
            response = found;                                                                                          // 3437
          }                                                                                                            // 3438
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 3439
            returnedValue.push(response);                                                                              // 3440
          } else if (returnedValue !== undefined) {                                                                    // 3441
            returnedValue = [returnedValue, response];                                                                 // 3443
          } else if (response !== undefined) {                                                                         // 3444
            returnedValue = response;                                                                                  // 3446
          }                                                                                                            // 3447
                                                                                                                       //
          return found;                                                                                                // 3448
        }                                                                                                              // 3449
      };                                                                                                               // 95
                                                                                                                       //
      if (methodInvoked) {                                                                                             // 3452
        if (instance === undefined) {                                                                                  // 3453
          module.initialize();                                                                                         // 3454
        }                                                                                                              // 3455
                                                                                                                       //
        module.invoke(query);                                                                                          // 3456
      } else {                                                                                                         // 3457
        if (instance !== undefined) {                                                                                  // 3459
          instance.invoke('destroy');                                                                                  // 3460
        }                                                                                                              // 3461
                                                                                                                       //
        module.initialize();                                                                                           // 3462
      }                                                                                                                // 3463
    });                                                                                                                // 3464
    return returnedValue !== undefined ? returnedValue : $allModules;                                                  // 3466
  };                                                                                                                   // 3470
                                                                                                                       //
  $.fn.dropdown.settings = {                                                                                           // 3472
    silent: false,                                                                                                     // 3474
    debug: false,                                                                                                      // 3475
    verbose: false,                                                                                                    // 3476
    performance: true,                                                                                                 // 3477
    on: 'click',                                                                                                       // 3479
    // what event should show menu action on item selection                                                            // 3479
    action: 'activate',                                                                                                // 3480
    // action on item selection (nothing, activate, select, combo, hide, function(){})                                 // 3480
    apiSettings: false,                                                                                                // 3483
    selectOnKeydown: true,                                                                                             // 3484
    // Whether selection should occur automatically when keyboard shortcuts used                                       // 3484
    minCharacters: 0,                                                                                                  // 3485
    // Minimum characters required to trigger API call                                                                 // 3485
    saveRemoteData: true,                                                                                              // 3486
    // Whether remote name/value pairs should be stored in sessionStorage to allow remote data to be restored on page refresh
    throttle: 200,                                                                                                     // 3487
    // How long to wait after last user input to search remotely                                                       // 3487
    context: window,                                                                                                   // 3489
    // Context to use when determining if on screen                                                                    // 3489
    direction: 'auto',                                                                                                 // 3490
    // Whether dropdown should always open in one direction                                                            // 3490
    keepOnScreen: true,                                                                                                // 3491
    // Whether dropdown should check whether it is on screen before showing                                            // 3491
    match: 'both',                                                                                                     // 3493
    // what to match against with search selection (both, text, or label)                                              // 3493
    fullTextSearch: false,                                                                                             // 3494
    // search anywhere in value (set to 'exact' to require exact matches)                                              // 3494
    placeholder: 'auto',                                                                                               // 3496
    // whether to convert blank <select> values to placeholder text                                                    // 3496
    preserveHTML: true,                                                                                                // 3497
    // preserve html when selecting value                                                                              // 3497
    sortSelect: false,                                                                                                 // 3498
    // sort selection on init                                                                                          // 3498
    forceSelection: true,                                                                                              // 3500
    // force a choice on blur with search selection                                                                    // 3500
    allowAdditions: false,                                                                                             // 3502
    // whether multiple select should allow user added values                                                          // 3502
    hideAdditions: true,                                                                                               // 3503
    // whether or not to hide special message prompting a user they can enter a value                                  // 3503
    maxSelections: false,                                                                                              // 3505
    // When set to a number limits the number of selections to this count                                              // 3505
    useLabels: true,                                                                                                   // 3506
    // whether multiple select should filter currently active selections from choices                                  // 3506
    delimiter: ',',                                                                                                    // 3507
    // when multiselect uses normal <input> the values will be delimited with this character                           // 3507
    showOnFocus: true,                                                                                                 // 3509
    // show menu on focus                                                                                              // 3509
    allowReselection: false,                                                                                           // 3510
    // whether current value should trigger callbacks when reselected                                                  // 3510
    allowTab: true,                                                                                                    // 3511
    // add tabindex to element                                                                                         // 3511
    allowCategorySelection: false,                                                                                     // 3512
    // allow elements with sub-menus to be selected                                                                    // 3512
    fireOnInit: false,                                                                                                 // 3514
    // Whether callbacks should fire when initializing dropdown values                                                 // 3514
    transition: 'auto',                                                                                                // 3516
    // auto transition will slide down or up based on direction                                                        // 3516
    duration: 200,                                                                                                     // 3517
    // duration of transition                                                                                          // 3517
    glyphWidth: 1.037,                                                                                                 // 3519
    // widest glyph width in em (W is 1.037 em) used to calculate multiselect input width                              // 3519
    // label settings on multi-select                                                                                  // 3521
    label: {                                                                                                           // 3522
      transition: 'scale',                                                                                             // 3523
      duration: 200,                                                                                                   // 3524
      variation: false                                                                                                 // 3525
    },                                                                                                                 // 3522
    // delay before event                                                                                              // 3528
    delay: {                                                                                                           // 3529
      hide: 300,                                                                                                       // 3530
      show: 200,                                                                                                       // 3531
      search: 20,                                                                                                      // 3532
      touch: 50                                                                                                        // 3533
    },                                                                                                                 // 3529
    /* Callbacks */onChange: function (value, text, $selected) {},                                                     // 3536
    onAdd: function (value, text, $selected) {},                                                                       // 3538
    onRemove: function (value, text, $selected) {},                                                                    // 3539
    onLabelSelect: function ($selectedLabels) {},                                                                      // 3541
    onLabelCreate: function (value, text) {                                                                            // 3542
      return $(this);                                                                                                  // 3542
    },                                                                                                                 // 3542
    onLabelRemove: function (value) {                                                                                  // 3543
      return true;                                                                                                     // 3543
    },                                                                                                                 // 3543
    onNoResults: function (searchTerm) {                                                                               // 3544
      return true;                                                                                                     // 3544
    },                                                                                                                 // 3544
    onShow: function () {},                                                                                            // 3545
    onHide: function () {},                                                                                            // 3546
    /* Component */name: 'Dropdown',                                                                                   // 3548
    namespace: 'dropdown',                                                                                             // 3550
    message: {                                                                                                         // 3552
      addResult: 'Add <b>{term}</b>',                                                                                  // 3553
      count: '{count} selected',                                                                                       // 3554
      maxSelections: 'Max {maxCount} selections',                                                                      // 3555
      noResults: 'No results found.',                                                                                  // 3556
      serverError: 'There was an error contacting the server'                                                          // 3557
    },                                                                                                                 // 3552
    error: {                                                                                                           // 3560
      action: 'You called a dropdown action that was not defined',                                                     // 3561
      alreadySetup: 'Once a select has been initialized behaviors must be called on the created ui dropdown',          // 3562
      labels: 'Allowing user additions currently requires the use of labels.',                                         // 3563
      missingMultiple: '<select> requires multiple property to be set to correctly preserve multiple values',          // 3564
      method: 'The method you called is not defined.',                                                                 // 3565
      noAPI: 'The API module is required to load resources remotely',                                                  // 3566
      noStorage: 'Saving remote data requires session storage',                                                        // 3567
      noTransition: 'This module requires ui transitions <https://github.com/Semantic-Org/UI-Transition>'              // 3568
    },                                                                                                                 // 3560
    regExp: {                                                                                                          // 3571
      escape: /[-[\]{}()*+?.,\\^$|#\s]/g,                                                                              // 3572
      quote: /"/g                                                                                                      // 3573
    },                                                                                                                 // 3571
    metadata: {                                                                                                        // 3576
      defaultText: 'defaultText',                                                                                      // 3577
      defaultValue: 'defaultValue',                                                                                    // 3578
      placeholderText: 'placeholder',                                                                                  // 3579
      text: 'text',                                                                                                    // 3580
      value: 'value'                                                                                                   // 3581
    },                                                                                                                 // 3576
    // property names for remote query                                                                                 // 3584
    fields: {                                                                                                          // 3585
      remoteValues: 'results',                                                                                         // 3586
      // grouping for api results                                                                                      // 3586
      values: 'values',                                                                                                // 3587
      // grouping for all dropdown values                                                                              // 3587
      disabled: 'disabled',                                                                                            // 3588
      // whether value should be disabled                                                                              // 3588
      name: 'name',                                                                                                    // 3589
      // displayed dropdown text                                                                                       // 3589
      value: 'value',                                                                                                  // 3590
      // actual dropdown value                                                                                         // 3590
      text: 'text' // displayed text when selected                                                                     // 3591
                                                                                                                       //
    },                                                                                                                 // 3585
    keys: {                                                                                                            // 3594
      backspace: 8,                                                                                                    // 3595
      delimiter: 188,                                                                                                  // 3596
      // comma                                                                                                         // 3596
      deleteKey: 46,                                                                                                   // 3597
      enter: 13,                                                                                                       // 3598
      escape: 27,                                                                                                      // 3599
      pageUp: 33,                                                                                                      // 3600
      pageDown: 34,                                                                                                    // 3601
      leftArrow: 37,                                                                                                   // 3602
      upArrow: 38,                                                                                                     // 3603
      rightArrow: 39,                                                                                                  // 3604
      downArrow: 40                                                                                                    // 3605
    },                                                                                                                 // 3594
    selector: {                                                                                                        // 3608
      addition: '.addition',                                                                                           // 3609
      dropdown: '.ui.dropdown',                                                                                        // 3610
      hidden: '.hidden',                                                                                               // 3611
      icon: '> .dropdown.icon',                                                                                        // 3612
      input: '> input[type="hidden"], > select',                                                                       // 3613
      item: '.item',                                                                                                   // 3614
      label: '> .label',                                                                                               // 3615
      remove: '> .label > .delete.icon',                                                                               // 3616
      siblingLabel: '.label',                                                                                          // 3617
      menu: '.menu',                                                                                                   // 3618
      message: '.message',                                                                                             // 3619
      menuIcon: '.dropdown.icon',                                                                                      // 3620
      search: 'input.search, .menu > .search > input, .menu input.search',                                             // 3621
      sizer: '> input.sizer',                                                                                          // 3622
      text: '> .text:not(.icon)',                                                                                      // 3623
      unselectable: '.disabled, .filtered'                                                                             // 3624
    },                                                                                                                 // 3608
    className: {                                                                                                       // 3627
      active: 'active',                                                                                                // 3628
      addition: 'addition',                                                                                            // 3629
      animating: 'animating',                                                                                          // 3630
      disabled: 'disabled',                                                                                            // 3631
      empty: 'empty',                                                                                                  // 3632
      dropdown: 'ui dropdown',                                                                                         // 3633
      filtered: 'filtered',                                                                                            // 3634
      hidden: 'hidden transition',                                                                                     // 3635
      item: 'item',                                                                                                    // 3636
      label: 'ui label',                                                                                               // 3637
      loading: 'loading',                                                                                              // 3638
      menu: 'menu',                                                                                                    // 3639
      message: 'message',                                                                                              // 3640
      multiple: 'multiple',                                                                                            // 3641
      placeholder: 'default',                                                                                          // 3642
      sizer: 'sizer',                                                                                                  // 3643
      search: 'search',                                                                                                // 3644
      selected: 'selected',                                                                                            // 3645
      selection: 'selection',                                                                                          // 3646
      upward: 'upward',                                                                                                // 3647
      visible: 'visible'                                                                                               // 3648
    }                                                                                                                  // 3627
  }; /* Templates */                                                                                                   // 3472
  $.fn.dropdown.settings.templates = {                                                                                 // 3654
    // generates dropdown from select values                                                                           // 3656
    dropdown: function (select) {                                                                                      // 3657
      var placeholder = select.placeholder || false,                                                                   // 3658
          values = select.values || {},                                                                                // 3658
          html = '';                                                                                                   // 3658
      html += '<i class="dropdown icon"></i>';                                                                         // 3663
                                                                                                                       //
      if (select.placeholder) {                                                                                        // 3664
        html += '<div class="default text">' + placeholder + '</div>';                                                 // 3665
      } else {                                                                                                         // 3666
        html += '<div class="text"></div>';                                                                            // 3668
      }                                                                                                                // 3669
                                                                                                                       //
      html += '<div class="menu">';                                                                                    // 3670
      $.each(select.values, function (index, option) {                                                                 // 3671
        html += option.disabled ? '<div class="disabled item" data-value="' + option.value + '">' + option.name + '</div>' : '<div class="item" data-value="' + option.value + '">' + option.name + '</div>';
      });                                                                                                              // 3676
      html += '</div>';                                                                                                // 3677
      return html;                                                                                                     // 3678
    },                                                                                                                 // 3679
    // generates just menu from select                                                                                 // 3681
    menu: function (response, fields) {                                                                                // 3682
      var values = response[fields.values] || {},                                                                      // 3683
          html = '';                                                                                                   // 3683
      $.each(values, function (index, option) {                                                                        // 3687
        var maybeText = option[fields.text] ? 'data-text="' + option[fields.text] + '"' : '',                          // 3688
            maybeDisabled = option[fields.disabled] ? 'disabled ' : '';                                                // 3688
        html += '<div class="' + maybeDisabled + 'item" data-value="' + option[fields.value] + '"' + maybeText + '>';  // 3696
        html += option[fields.name];                                                                                   // 3697
        html += '</div>';                                                                                              // 3698
      });                                                                                                              // 3699
      return html;                                                                                                     // 3700
    },                                                                                                                 // 3701
    // generates label for multiselect                                                                                 // 3703
    label: function (value, text) {                                                                                    // 3704
      return text + '<i class="delete icon"></i>';                                                                     // 3705
    },                                                                                                                 // 3706
    // generates messages like "No results"                                                                            // 3709
    message: function (message) {                                                                                      // 3710
      return message;                                                                                                  // 3711
    },                                                                                                                 // 3712
    // generates user addition to selection menu                                                                       // 3714
    addition: function (choice) {                                                                                      // 3715
      return choice;                                                                                                   // 3716
    }                                                                                                                  // 3717
  };                                                                                                                   // 3654
})(jQuery, window, document);                                                                                          // 3721
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"embed.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/modules/embed.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Embed                                                                                            //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.embed = function (parameters) {                                                                                 // 26
    var $allModules = $(this),                                                                                         // 28
        moduleSelector = $allModules.selector || '',                                                                   // 28
        time = new Date().getTime(),                                                                                   // 28
        performance = [],                                                                                              // 28
        query = arguments[0],                                                                                          // 28
        methodInvoked = typeof query == 'string',                                                                      // 28
        queryArguments = [].slice.call(arguments, 1),                                                                  // 28
        returnedValue;                                                                                                 // 28
    $allModules.each(function () {                                                                                     // 43
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.embed.settings, parameters) : $.extend({}, $.fn.embed.settings),
          selector = settings.selector,                                                                                // 45
          className = settings.className,                                                                              // 45
          sources = settings.sources,                                                                                  // 45
          error = settings.error,                                                                                      // 45
          metadata = settings.metadata,                                                                                // 45
          namespace = settings.namespace,                                                                              // 45
          templates = settings.templates,                                                                              // 45
          eventNamespace = '.' + namespace,                                                                            // 45
          moduleNamespace = 'module-' + namespace,                                                                     // 45
          $window = $(window),                                                                                         // 45
          $module = $(this),                                                                                           // 45
          $placeholder = $module.find(selector.placeholder),                                                           // 45
          $icon = $module.find(selector.icon),                                                                         // 45
          $embed = $module.find(selector.embed),                                                                       // 45
          element = this,                                                                                              // 45
          instance = $module.data(moduleNamespace),                                                                    // 45
          module;                                                                                                      // 45
      module = {                                                                                                       // 72
        initialize: function () {                                                                                      // 74
          module.debug('Initializing embed');                                                                          // 75
          module.determine.autoplay();                                                                                 // 76
          module.create();                                                                                             // 77
          module.bind.events();                                                                                        // 78
          module.instantiate();                                                                                        // 79
        },                                                                                                             // 80
        instantiate: function () {                                                                                     // 82
          module.verbose('Storing instance of module', module);                                                        // 83
          instance = module;                                                                                           // 84
          $module.data(moduleNamespace, module);                                                                       // 85
        },                                                                                                             // 88
        destroy: function () {                                                                                         // 90
          module.verbose('Destroying previous instance of embed');                                                     // 91
          module.reset();                                                                                              // 92
          $module.removeData(moduleNamespace).off(eventNamespace);                                                     // 93
        },                                                                                                             // 97
        refresh: function () {                                                                                         // 99
          module.verbose('Refreshing selector cache');                                                                 // 100
          $placeholder = $module.find(selector.placeholder);                                                           // 101
          $icon = $module.find(selector.icon);                                                                         // 102
          $embed = $module.find(selector.embed);                                                                       // 103
        },                                                                                                             // 104
        bind: {                                                                                                        // 106
          events: function () {                                                                                        // 107
            if (module.has.placeholder()) {                                                                            // 108
              module.debug('Adding placeholder events');                                                               // 109
              $module.on('click' + eventNamespace, selector.placeholder, module.createAndShow).on('click' + eventNamespace, selector.icon, module.createAndShow);
            }                                                                                                          // 114
          }                                                                                                            // 115
        },                                                                                                             // 106
        create: function () {                                                                                          // 118
          var placeholder = module.get.placeholder();                                                                  // 119
                                                                                                                       //
          if (placeholder) {                                                                                           // 122
            module.createPlaceholder();                                                                                // 123
          } else {                                                                                                     // 124
            module.createAndShow();                                                                                    // 126
          }                                                                                                            // 127
        },                                                                                                             // 128
        createPlaceholder: function (placeholder) {                                                                    // 130
          var icon = module.get.icon(),                                                                                // 131
              url = module.get.url(),                                                                                  // 131
              embed = module.generate.embed(url);                                                                      // 131
          placeholder = placeholder || module.get.placeholder();                                                       // 136
          $module.html(templates.placeholder(placeholder, icon));                                                      // 137
          module.debug('Creating placeholder for embed', placeholder, icon);                                           // 138
        },                                                                                                             // 139
        createEmbed: function (url) {                                                                                  // 141
          module.refresh();                                                                                            // 142
          url = url || module.get.url();                                                                               // 143
          $embed = $('<div/>').addClass(className.embed).html(module.generate.embed(url)).appendTo($module);           // 144
          settings.onCreate.call(element, url);                                                                        // 149
          module.debug('Creating embed object', $embed);                                                               // 150
        },                                                                                                             // 151
        changeEmbed: function (url) {                                                                                  // 153
          $embed.html(module.generate.embed(url));                                                                     // 154
        },                                                                                                             // 157
        createAndShow: function () {                                                                                   // 159
          module.createEmbed();                                                                                        // 160
          module.show();                                                                                               // 161
        },                                                                                                             // 162
        // sets new embed                                                                                              // 164
        change: function (source, id, url) {                                                                           // 165
          module.debug('Changing video to ', source, id, url);                                                         // 166
          $module.data(metadata.source, source).data(metadata.id, id);                                                 // 167
                                                                                                                       //
          if (url) {                                                                                                   // 171
            $module.data(metadata.url, url);                                                                           // 172
          } else {                                                                                                     // 173
            $module.removeData(metadata.url);                                                                          // 175
          }                                                                                                            // 176
                                                                                                                       //
          if (module.has.embed()) {                                                                                    // 177
            module.changeEmbed();                                                                                      // 178
          } else {                                                                                                     // 179
            module.create();                                                                                           // 181
          }                                                                                                            // 182
        },                                                                                                             // 183
        // clears embed                                                                                                // 185
        reset: function () {                                                                                           // 186
          module.debug('Clearing embed and showing placeholder');                                                      // 187
          module.remove.active();                                                                                      // 188
          module.remove.embed();                                                                                       // 189
          module.showPlaceholder();                                                                                    // 190
          settings.onReset.call(element);                                                                              // 191
        },                                                                                                             // 192
        // shows current embed                                                                                         // 194
        show: function () {                                                                                            // 195
          module.debug('Showing embed');                                                                               // 196
          module.set.active();                                                                                         // 197
          settings.onDisplay.call(element);                                                                            // 198
        },                                                                                                             // 199
        hide: function () {                                                                                            // 201
          module.debug('Hiding embed');                                                                                // 202
          module.showPlaceholder();                                                                                    // 203
        },                                                                                                             // 204
        showPlaceholder: function () {                                                                                 // 206
          module.debug('Showing placeholder image');                                                                   // 207
          module.remove.active();                                                                                      // 208
          settings.onPlaceholderDisplay.call(element);                                                                 // 209
        },                                                                                                             // 210
        get: {                                                                                                         // 212
          id: function () {                                                                                            // 213
            return settings.id || $module.data(metadata.id);                                                           // 214
          },                                                                                                           // 215
          placeholder: function () {                                                                                   // 216
            return settings.placeholder || $module.data(metadata.placeholder);                                         // 217
          },                                                                                                           // 218
          icon: function () {                                                                                          // 219
            return settings.icon ? settings.icon : $module.data(metadata.icon) !== undefined ? $module.data(metadata.icon) : module.determine.icon();
          },                                                                                                           // 226
          source: function (url) {                                                                                     // 227
            return settings.source ? settings.source : $module.data(metadata.source) !== undefined ? $module.data(metadata.source) : module.determine.source();
          },                                                                                                           // 234
          type: function () {                                                                                          // 235
            var source = module.get.source();                                                                          // 236
            return sources[source] !== undefined ? sources[source].type : false;                                       // 237
          },                                                                                                           // 241
          url: function () {                                                                                           // 242
            return settings.url ? settings.url : $module.data(metadata.url) !== undefined ? $module.data(metadata.url) : module.determine.url();
          }                                                                                                            // 249
        },                                                                                                             // 212
        determine: {                                                                                                   // 252
          autoplay: function () {                                                                                      // 253
            if (module.should.autoplay()) {                                                                            // 254
              settings.autoplay = true;                                                                                // 255
            }                                                                                                          // 256
          },                                                                                                           // 257
          source: function (url) {                                                                                     // 258
            var matchedSource = false;                                                                                 // 259
            url = url || module.get.url();                                                                             // 262
                                                                                                                       //
            if (url) {                                                                                                 // 263
              $.each(sources, function (name, source) {                                                                // 264
                if (url.search(source.domain) !== -1) {                                                                // 265
                  matchedSource = name;                                                                                // 266
                  return false;                                                                                        // 267
                }                                                                                                      // 268
              });                                                                                                      // 269
            }                                                                                                          // 270
                                                                                                                       //
            return matchedSource;                                                                                      // 271
          },                                                                                                           // 272
          icon: function () {                                                                                          // 273
            var source = module.get.source();                                                                          // 274
            return sources[source] !== undefined ? sources[source].icon : false;                                       // 277
          },                                                                                                           // 281
          url: function () {                                                                                           // 282
            var id = settings.id || $module.data(metadata.id),                                                         // 283
                source = settings.source || $module.data(metadata.source),                                             // 283
                url;                                                                                                   // 283
            url = sources[source] !== undefined ? sources[source].url.replace('{id}', id) : false;                     // 288
                                                                                                                       //
            if (url) {                                                                                                 // 292
              $module.data(metadata.url, url);                                                                         // 293
            }                                                                                                          // 294
                                                                                                                       //
            return url;                                                                                                // 295
          }                                                                                                            // 296
        },                                                                                                             // 252
        set: {                                                                                                         // 300
          active: function () {                                                                                        // 301
            $module.addClass(className.active);                                                                        // 302
          }                                                                                                            // 303
        },                                                                                                             // 300
        remove: {                                                                                                      // 306
          active: function () {                                                                                        // 307
            $module.removeClass(className.active);                                                                     // 308
          },                                                                                                           // 309
          embed: function () {                                                                                         // 310
            $embed.empty();                                                                                            // 311
          }                                                                                                            // 312
        },                                                                                                             // 306
        encode: {                                                                                                      // 315
          parameters: function (parameters) {                                                                          // 316
            var urlString = [],                                                                                        // 317
                index;                                                                                                 // 317
                                                                                                                       //
            for (index in meteorBabelHelpers.sanitizeForInObject(parameters)) {                                        // 321
              urlString.push(encodeURIComponent(index) + '=' + encodeURIComponent(parameters[index]));                 // 322
            }                                                                                                          // 323
                                                                                                                       //
            return urlString.join('&amp;');                                                                            // 324
          }                                                                                                            // 325
        },                                                                                                             // 315
        generate: {                                                                                                    // 328
          embed: function (url) {                                                                                      // 329
            module.debug('Generating embed html');                                                                     // 330
            var source = module.get.source(),                                                                          // 331
                html,                                                                                                  // 331
                parameters;                                                                                            // 331
            url = module.get.url(url);                                                                                 // 336
                                                                                                                       //
            if (url) {                                                                                                 // 337
              parameters = module.generate.parameters(source);                                                         // 338
              html = templates.iframe(url, parameters);                                                                // 339
            } else {                                                                                                   // 340
              module.error(error.noURL, $module);                                                                      // 342
            }                                                                                                          // 343
                                                                                                                       //
            return html;                                                                                               // 344
          },                                                                                                           // 345
          parameters: function (source, extraParameters) {                                                             // 346
            var parameters = sources[source] && sources[source].parameters !== undefined ? sources[source].parameters(settings) : {};
            extraParameters = extraParameters || settings.parameters;                                                  // 352
                                                                                                                       //
            if (extraParameters) {                                                                                     // 353
              parameters = $.extend({}, parameters, extraParameters);                                                  // 354
            }                                                                                                          // 355
                                                                                                                       //
            parameters = settings.onEmbed(parameters);                                                                 // 356
            return module.encode.parameters(parameters);                                                               // 357
          }                                                                                                            // 358
        },                                                                                                             // 328
        has: {                                                                                                         // 361
          embed: function () {                                                                                         // 362
            return $embed.length > 0;                                                                                  // 363
          },                                                                                                           // 364
          placeholder: function () {                                                                                   // 365
            return settings.placeholder || $module.data(metadata.placeholder);                                         // 366
          }                                                                                                            // 367
        },                                                                                                             // 361
        should: {                                                                                                      // 370
          autoplay: function () {                                                                                      // 371
            return settings.autoplay === 'auto' ? settings.placeholder || $module.data(metadata.placeholder) !== undefined : settings.autoplay;
          }                                                                                                            // 376
        },                                                                                                             // 370
        is: {                                                                                                          // 379
          video: function () {                                                                                         // 380
            return module.get.type() == 'video';                                                                       // 381
          }                                                                                                            // 382
        },                                                                                                             // 379
        setting: function (name, value) {                                                                              // 385
          module.debug('Changing setting', name, value);                                                               // 386
                                                                                                                       //
          if ($.isPlainObject(name)) {                                                                                 // 387
            $.extend(true, settings, name);                                                                            // 388
          } else if (value !== undefined) {                                                                            // 389
            if ($.isPlainObject(settings[name])) {                                                                     // 391
              $.extend(true, settings[name], value);                                                                   // 392
            } else {                                                                                                   // 393
              settings[name] = value;                                                                                  // 395
            }                                                                                                          // 396
          } else {                                                                                                     // 397
            return settings[name];                                                                                     // 399
          }                                                                                                            // 400
        },                                                                                                             // 401
        internal: function (name, value) {                                                                             // 402
          if ($.isPlainObject(name)) {                                                                                 // 403
            $.extend(true, module, name);                                                                              // 404
          } else if (value !== undefined) {                                                                            // 405
            module[name] = value;                                                                                      // 407
          } else {                                                                                                     // 408
            return module[name];                                                                                       // 410
          }                                                                                                            // 411
        },                                                                                                             // 412
        debug: function () {                                                                                           // 413
          if (!settings.silent && settings.debug) {                                                                    // 414
            if (settings.performance) {                                                                                // 415
              module.performance.log(arguments);                                                                       // 416
            } else {                                                                                                   // 417
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 419
              module.debug.apply(console, arguments);                                                                  // 420
            }                                                                                                          // 421
          }                                                                                                            // 422
        },                                                                                                             // 423
        verbose: function () {                                                                                         // 424
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 425
            if (settings.performance) {                                                                                // 426
              module.performance.log(arguments);                                                                       // 427
            } else {                                                                                                   // 428
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 430
              module.verbose.apply(console, arguments);                                                                // 431
            }                                                                                                          // 432
          }                                                                                                            // 433
        },                                                                                                             // 434
        error: function () {                                                                                           // 435
          if (!settings.silent) {                                                                                      // 436
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 437
            module.error.apply(console, arguments);                                                                    // 438
          }                                                                                                            // 439
        },                                                                                                             // 440
        performance: {                                                                                                 // 441
          log: function (message) {                                                                                    // 442
            var currentTime, executionTime, previousTime;                                                              // 443
                                                                                                                       //
            if (settings.performance) {                                                                                // 448
              currentTime = new Date().getTime();                                                                      // 449
              previousTime = time || currentTime;                                                                      // 450
              executionTime = currentTime - previousTime;                                                              // 451
              time = currentTime;                                                                                      // 452
              performance.push({                                                                                       // 453
                'Name': message[0],                                                                                    // 454
                'Arguments': [].slice.call(message, 1) || '',                                                          // 455
                'Element': element,                                                                                    // 456
                'Execution Time': executionTime                                                                        // 457
              });                                                                                                      // 453
            }                                                                                                          // 459
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 460
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 461
          },                                                                                                           // 462
          display: function () {                                                                                       // 463
            var title = settings.name + ':',                                                                           // 464
                totalTime = 0;                                                                                         // 464
            time = false;                                                                                              // 468
            clearTimeout(module.performance.timer);                                                                    // 469
            $.each(performance, function (index, data) {                                                               // 470
              totalTime += data['Execution Time'];                                                                     // 471
            });                                                                                                        // 472
            title += ' ' + totalTime + 'ms';                                                                           // 473
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 474
              title += ' \'' + moduleSelector + '\'';                                                                  // 475
            }                                                                                                          // 476
                                                                                                                       //
            if ($allModules.length > 1) {                                                                              // 477
              title += ' ' + '(' + $allModules.length + ')';                                                           // 478
            }                                                                                                          // 479
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 480
              console.groupCollapsed(title);                                                                           // 481
                                                                                                                       //
              if (console.table) {                                                                                     // 482
                console.table(performance);                                                                            // 483
              } else {                                                                                                 // 484
                $.each(performance, function (index, data) {                                                           // 486
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 487
                });                                                                                                    // 488
              }                                                                                                        // 489
                                                                                                                       //
              console.groupEnd();                                                                                      // 490
            }                                                                                                          // 491
                                                                                                                       //
            performance = [];                                                                                          // 492
          }                                                                                                            // 493
        },                                                                                                             // 441
        invoke: function (query, passedArguments, context) {                                                           // 495
          var object = instance,                                                                                       // 496
              maxDepth,                                                                                                // 496
              found,                                                                                                   // 496
              response;                                                                                                // 496
          passedArguments = passedArguments || queryArguments;                                                         // 502
          context = element || context;                                                                                // 503
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 504
            query = query.split(/[\. ]/);                                                                              // 505
            maxDepth = query.length - 1;                                                                               // 506
            $.each(query, function (depth, value) {                                                                    // 507
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 512
                object = object[camelCaseValue];                                                                       // 513
              } else if (object[camelCaseValue] !== undefined) {                                                       // 514
                found = object[camelCaseValue];                                                                        // 516
                return false;                                                                                          // 517
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 518
                object = object[value];                                                                                // 520
              } else if (object[value] !== undefined) {                                                                // 521
                found = object[value];                                                                                 // 523
                return false;                                                                                          // 524
              } else {                                                                                                 // 525
                module.error(error.method, query);                                                                     // 527
                return false;                                                                                          // 528
              }                                                                                                        // 529
            });                                                                                                        // 530
          }                                                                                                            // 531
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 532
            response = found.apply(context, passedArguments);                                                          // 533
          } else if (found !== undefined) {                                                                            // 534
            response = found;                                                                                          // 536
          }                                                                                                            // 537
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 538
            returnedValue.push(response);                                                                              // 539
          } else if (returnedValue !== undefined) {                                                                    // 540
            returnedValue = [returnedValue, response];                                                                 // 542
          } else if (response !== undefined) {                                                                         // 543
            returnedValue = response;                                                                                  // 545
          }                                                                                                            // 546
                                                                                                                       //
          return found;                                                                                                // 547
        }                                                                                                              // 548
      };                                                                                                               // 72
                                                                                                                       //
      if (methodInvoked) {                                                                                             // 551
        if (instance === undefined) {                                                                                  // 552
          module.initialize();                                                                                         // 553
        }                                                                                                              // 554
                                                                                                                       //
        module.invoke(query);                                                                                          // 555
      } else {                                                                                                         // 556
        if (instance !== undefined) {                                                                                  // 558
          instance.invoke('destroy');                                                                                  // 559
        }                                                                                                              // 560
                                                                                                                       //
        module.initialize();                                                                                           // 561
      }                                                                                                                // 562
    });                                                                                                                // 563
    return returnedValue !== undefined ? returnedValue : this;                                                         // 565
  };                                                                                                                   // 569
                                                                                                                       //
  $.fn.embed.settings = {                                                                                              // 571
    name: 'Embed',                                                                                                     // 573
    namespace: 'embed',                                                                                                // 574
    silent: false,                                                                                                     // 576
    debug: false,                                                                                                      // 577
    verbose: false,                                                                                                    // 578
    performance: true,                                                                                                 // 579
    icon: false,                                                                                                       // 581
    source: false,                                                                                                     // 582
    url: false,                                                                                                        // 583
    id: false,                                                                                                         // 584
    // standard video settings                                                                                         // 586
    autoplay: 'auto',                                                                                                  // 587
    color: '#444444',                                                                                                  // 588
    hd: true,                                                                                                          // 589
    brandedUI: false,                                                                                                  // 590
    // additional parameters to include with the embed                                                                 // 592
    parameters: false,                                                                                                 // 593
    onDisplay: function () {},                                                                                         // 595
    onPlaceholderDisplay: function () {},                                                                              // 596
    onReset: function () {},                                                                                           // 597
    onCreate: function (url) {},                                                                                       // 598
    onEmbed: function (parameters) {                                                                                   // 599
      return parameters;                                                                                               // 600
    },                                                                                                                 // 601
    metadata: {                                                                                                        // 603
      id: 'id',                                                                                                        // 604
      icon: 'icon',                                                                                                    // 605
      placeholder: 'placeholder',                                                                                      // 606
      source: 'source',                                                                                                // 607
      url: 'url'                                                                                                       // 608
    },                                                                                                                 // 603
    error: {                                                                                                           // 611
      noURL: 'No URL specified',                                                                                       // 612
      method: 'The method you called is not defined'                                                                   // 613
    },                                                                                                                 // 611
    className: {                                                                                                       // 616
      active: 'active',                                                                                                // 617
      embed: 'embed'                                                                                                   // 618
    },                                                                                                                 // 616
    selector: {                                                                                                        // 621
      embed: '.embed',                                                                                                 // 622
      placeholder: '.placeholder',                                                                                     // 623
      icon: '.icon'                                                                                                    // 624
    },                                                                                                                 // 621
    sources: {                                                                                                         // 627
      youtube: {                                                                                                       // 628
        name: 'youtube',                                                                                               // 629
        type: 'video',                                                                                                 // 630
        icon: 'video play',                                                                                            // 631
        domain: 'youtube.com',                                                                                         // 632
        url: '//www.youtube.com/embed/{id}',                                                                           // 633
        parameters: function (settings) {                                                                              // 634
          return {                                                                                                     // 635
            autohide: !settings.brandedUI,                                                                             // 636
            autoplay: settings.autoplay,                                                                               // 637
            color: settings.color || undefined,                                                                        // 638
            hq: settings.hd,                                                                                           // 639
            jsapi: settings.api,                                                                                       // 640
            modestbranding: !settings.brandedUI                                                                        // 641
          };                                                                                                           // 635
        }                                                                                                              // 643
      },                                                                                                               // 628
      vimeo: {                                                                                                         // 645
        name: 'vimeo',                                                                                                 // 646
        type: 'video',                                                                                                 // 647
        icon: 'video play',                                                                                            // 648
        domain: 'vimeo.com',                                                                                           // 649
        url: '//player.vimeo.com/video/{id}',                                                                          // 650
        parameters: function (settings) {                                                                              // 651
          return {                                                                                                     // 652
            api: settings.api,                                                                                         // 653
            autoplay: settings.autoplay,                                                                               // 654
            byline: settings.brandedUI,                                                                                // 655
            color: settings.color || undefined,                                                                        // 656
            portrait: settings.brandedUI,                                                                              // 657
            title: settings.brandedUI                                                                                  // 658
          };                                                                                                           // 652
        }                                                                                                              // 660
      }                                                                                                                // 645
    },                                                                                                                 // 627
    templates: {                                                                                                       // 664
      iframe: function (url, parameters) {                                                                             // 665
        var src = url;                                                                                                 // 666
                                                                                                                       //
        if (parameters) {                                                                                              // 667
          src += '?' + parameters;                                                                                     // 668
        }                                                                                                              // 669
                                                                                                                       //
        return '' + '<iframe src="' + src + '"' + ' width="100%" height="100%"' + ' frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';
      },                                                                                                               // 675
      placeholder: function (image, icon) {                                                                            // 676
        var html = '';                                                                                                 // 677
                                                                                                                       //
        if (icon) {                                                                                                    // 680
          html += '<i class="' + icon + ' icon"></i>';                                                                 // 681
        }                                                                                                              // 682
                                                                                                                       //
        if (image) {                                                                                                   // 683
          html += '<img class="placeholder" src="' + image + '">';                                                     // 684
        }                                                                                                              // 685
                                                                                                                       //
        return html;                                                                                                   // 686
      }                                                                                                                // 687
    },                                                                                                                 // 664
    // NOT YET IMPLEMENTED                                                                                             // 690
    api: false,                                                                                                        // 691
    onPause: function () {},                                                                                           // 692
    onPlay: function () {},                                                                                            // 693
    onStop: function () {}                                                                                             // 694
  };                                                                                                                   // 571
})(jQuery, window, document);                                                                                          // 700
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"modal.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/modules/modal.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Modal                                                                                            //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.modal = function (parameters) {                                                                                 // 26
    var $allModules = $(this),                                                                                         // 27
        $window = $(window),                                                                                           // 27
        $document = $(document),                                                                                       // 27
        $body = $('body'),                                                                                             // 27
        moduleSelector = $allModules.selector || '',                                                                   // 27
        time = new Date().getTime(),                                                                                   // 27
        performance = [],                                                                                              // 27
        query = arguments[0],                                                                                          // 27
        methodInvoked = typeof query == 'string',                                                                      // 27
        queryArguments = [].slice.call(arguments, 1),                                                                  // 27
        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
      setTimeout(callback, 0);                                                                                         // 46
    },                                                                                                                 // 46
        returnedValue;                                                                                                 // 27
                                                                                                                       //
    $allModules.each(function () {                                                                                     // 51
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.modal.settings, parameters) : $.extend({}, $.fn.modal.settings),
          selector = settings.selector,                                                                                // 53
          className = settings.className,                                                                              // 53
          namespace = settings.namespace,                                                                              // 53
          error = settings.error,                                                                                      // 53
          eventNamespace = '.' + namespace,                                                                            // 53
          moduleNamespace = 'module-' + namespace,                                                                     // 53
          $module = $(this),                                                                                           // 53
          $context = $(settings.context),                                                                              // 53
          $close = $module.find(selector.close),                                                                       // 53
          $allModals,                                                                                                  // 53
          $otherModals,                                                                                                // 53
          $focusedElement,                                                                                             // 53
          $dimmable,                                                                                                   // 53
          $dimmer,                                                                                                     // 53
          element = this,                                                                                              // 53
          instance = $module.data(moduleNamespace),                                                                    // 53
          elementEventNamespace,                                                                                       // 53
          id,                                                                                                          // 53
          observer,                                                                                                    // 53
          module;                                                                                                      // 53
      module = {                                                                                                       // 84
        initialize: function () {                                                                                      // 86
          module.verbose('Initializing dimmer', $context);                                                             // 87
          module.create.id();                                                                                          // 89
          module.create.dimmer();                                                                                      // 90
          module.refreshModals();                                                                                      // 91
          module.bind.events();                                                                                        // 93
                                                                                                                       //
          if (settings.observeChanges) {                                                                               // 94
            module.observeChanges();                                                                                   // 95
          }                                                                                                            // 96
                                                                                                                       //
          module.instantiate();                                                                                        // 97
        },                                                                                                             // 98
        instantiate: function () {                                                                                     // 100
          module.verbose('Storing instance of modal');                                                                 // 101
          instance = module;                                                                                           // 102
          $module.data(moduleNamespace, instance);                                                                     // 103
        },                                                                                                             // 106
        create: {                                                                                                      // 108
          dimmer: function () {                                                                                        // 109
            var defaultSettings = {                                                                                    // 110
              debug: settings.debug,                                                                                   // 112
              dimmerName: 'modals',                                                                                    // 113
              duration: {                                                                                              // 114
                show: settings.duration,                                                                               // 115
                hide: settings.duration                                                                                // 116
              }                                                                                                        // 114
            },                                                                                                         // 111
                dimmerSettings = $.extend(true, defaultSettings, settings.dimmerSettings);                             // 110
                                                                                                                       //
            if (settings.inverted) {                                                                                   // 121
              dimmerSettings.variation = dimmerSettings.variation !== undefined ? dimmerSettings.variation + ' inverted' : 'inverted';
            }                                                                                                          // 126
                                                                                                                       //
            if ($.fn.dimmer === undefined) {                                                                           // 127
              module.error(error.dimmer);                                                                              // 128
              return;                                                                                                  // 129
            }                                                                                                          // 130
                                                                                                                       //
            module.debug('Creating dimmer with settings', dimmerSettings);                                             // 131
            $dimmable = $context.dimmer(dimmerSettings);                                                               // 132
                                                                                                                       //
            if (settings.detachable) {                                                                                 // 133
              module.verbose('Modal is detachable, moving content into dimmer');                                       // 134
              $dimmable.dimmer('add content', $module);                                                                // 135
            } else {                                                                                                   // 136
              module.set.undetached();                                                                                 // 138
            }                                                                                                          // 139
                                                                                                                       //
            if (settings.blurring) {                                                                                   // 140
              $dimmable.addClass(className.blurring);                                                                  // 141
            }                                                                                                          // 142
                                                                                                                       //
            $dimmer = $dimmable.dimmer('get dimmer');                                                                  // 143
          },                                                                                                           // 144
          id: function () {                                                                                            // 145
            id = (Math.random().toString(16) + '000000000').substr(2, 8);                                              // 146
            elementEventNamespace = '.' + id;                                                                          // 147
            module.verbose('Creating unique id for element', id);                                                      // 148
          }                                                                                                            // 149
        },                                                                                                             // 108
        destroy: function () {                                                                                         // 152
          module.verbose('Destroying previous modal');                                                                 // 153
          $module.removeData(moduleNamespace).off(eventNamespace);                                                     // 154
          $window.off(elementEventNamespace);                                                                          // 158
          $dimmer.off(elementEventNamespace);                                                                          // 159
          $close.off(eventNamespace);                                                                                  // 160
          $context.dimmer('destroy');                                                                                  // 161
        },                                                                                                             // 162
        observeChanges: function () {                                                                                  // 164
          if ('MutationObserver' in window) {                                                                          // 165
            observer = new MutationObserver(function (mutations) {                                                     // 166
              module.debug('DOM tree modified, refreshing');                                                           // 167
              module.refresh();                                                                                        // 168
            });                                                                                                        // 169
            observer.observe(element, {                                                                                // 170
              childList: true,                                                                                         // 171
              subtree: true                                                                                            // 172
            });                                                                                                        // 170
            module.debug('Setting up mutation observer', observer);                                                    // 174
          }                                                                                                            // 175
        },                                                                                                             // 176
        refresh: function () {                                                                                         // 178
          module.remove.scrolling();                                                                                   // 179
          module.cacheSizes();                                                                                         // 180
          module.set.screenHeight();                                                                                   // 181
          module.set.type();                                                                                           // 182
          module.set.position();                                                                                       // 183
        },                                                                                                             // 184
        refreshModals: function () {                                                                                   // 186
          $otherModals = $module.siblings(selector.modal);                                                             // 187
          $allModals = $otherModals.add($module);                                                                      // 188
        },                                                                                                             // 189
        attachEvents: function (selector, event) {                                                                     // 191
          var $toggle = $(selector);                                                                                   // 192
          event = $.isFunction(module[event]) ? module[event] : module.toggle;                                         // 195
                                                                                                                       //
          if ($toggle.length > 0) {                                                                                    // 199
            module.debug('Attaching modal events to element', selector, event);                                        // 200
            $toggle.off(eventNamespace).on('click' + eventNamespace, event);                                           // 201
          } else {                                                                                                     // 205
            module.error(error.notFound, selector);                                                                    // 207
          }                                                                                                            // 208
        },                                                                                                             // 209
        bind: {                                                                                                        // 211
          events: function () {                                                                                        // 212
            module.verbose('Attaching events');                                                                        // 213
            $module.on('click' + eventNamespace, selector.close, module.event.close).on('click' + eventNamespace, selector.approve, module.event.approve).on('click' + eventNamespace, selector.deny, module.event.deny);
            $window.on('resize' + elementEventNamespace, module.event.resize);                                         // 219
          }                                                                                                            // 222
        },                                                                                                             // 211
        get: {                                                                                                         // 225
          id: function () {                                                                                            // 226
            return (Math.random().toString(16) + '000000000').substr(2, 8);                                            // 227
          }                                                                                                            // 228
        },                                                                                                             // 225
        event: {                                                                                                       // 231
          approve: function () {                                                                                       // 232
            if (settings.onApprove.call(element, $(this)) === false) {                                                 // 233
              module.verbose('Approve callback returned false cancelling hide');                                       // 234
              return;                                                                                                  // 235
            }                                                                                                          // 236
                                                                                                                       //
            module.hide();                                                                                             // 237
          },                                                                                                           // 238
          deny: function () {                                                                                          // 239
            if (settings.onDeny.call(element, $(this)) === false) {                                                    // 240
              module.verbose('Deny callback returned false cancelling hide');                                          // 241
              return;                                                                                                  // 242
            }                                                                                                          // 243
                                                                                                                       //
            module.hide();                                                                                             // 244
          },                                                                                                           // 245
          close: function () {                                                                                         // 246
            module.hide();                                                                                             // 247
          },                                                                                                           // 248
          click: function (event) {                                                                                    // 249
            var $target = $(event.target),                                                                             // 250
                isInModal = $target.closest(selector.modal).length > 0,                                                // 250
                isInDOM = $.contains(document.documentElement, event.target);                                          // 250
                                                                                                                       //
            if (!isInModal && isInDOM) {                                                                               // 255
              module.debug('Dimmer clicked, hiding all modals');                                                       // 256
                                                                                                                       //
              if (module.is.active()) {                                                                                // 257
                module.remove.clickaway();                                                                             // 258
                                                                                                                       //
                if (settings.allowMultiple) {                                                                          // 259
                  module.hide();                                                                                       // 260
                } else {                                                                                               // 261
                  module.hideAll();                                                                                    // 263
                }                                                                                                      // 264
              }                                                                                                        // 265
            }                                                                                                          // 266
          },                                                                                                           // 267
          debounce: function (method, delay) {                                                                         // 268
            clearTimeout(module.timer);                                                                                // 269
            module.timer = setTimeout(method, delay);                                                                  // 270
          },                                                                                                           // 271
          keyboard: function (event) {                                                                                 // 272
            var keyCode = event.which,                                                                                 // 273
                escapeKey = 27;                                                                                        // 273
                                                                                                                       //
            if (keyCode == escapeKey) {                                                                                // 277
              if (settings.closable) {                                                                                 // 278
                module.debug('Escape key pressed hiding modal');                                                       // 279
                module.hide();                                                                                         // 280
              } else {                                                                                                 // 281
                module.debug('Escape key pressed, but closable is set to false');                                      // 283
              }                                                                                                        // 284
                                                                                                                       //
              event.preventDefault();                                                                                  // 285
            }                                                                                                          // 286
          },                                                                                                           // 287
          resize: function () {                                                                                        // 288
            if ($dimmable.dimmer('is active')) {                                                                       // 289
              requestAnimationFrame(module.refresh);                                                                   // 290
            }                                                                                                          // 291
          }                                                                                                            // 292
        },                                                                                                             // 231
        toggle: function () {                                                                                          // 295
          if (module.is.active() || module.is.animating()) {                                                           // 296
            module.hide();                                                                                             // 297
          } else {                                                                                                     // 298
            module.show();                                                                                             // 300
          }                                                                                                            // 301
        },                                                                                                             // 302
        show: function (callback) {                                                                                    // 304
          callback = $.isFunction(callback) ? callback : function () {};                                               // 305
          module.refreshModals();                                                                                      // 309
          module.showModal(callback);                                                                                  // 310
        },                                                                                                             // 311
        hide: function (callback) {                                                                                    // 313
          callback = $.isFunction(callback) ? callback : function () {};                                               // 314
          module.refreshModals();                                                                                      // 318
          module.hideModal(callback);                                                                                  // 319
        },                                                                                                             // 320
        showModal: function (callback) {                                                                               // 322
          callback = $.isFunction(callback) ? callback : function () {};                                               // 323
                                                                                                                       //
          if (module.is.animating() || !module.is.active()) {                                                          // 327
            module.showDimmer();                                                                                       // 329
            module.cacheSizes();                                                                                       // 330
            module.set.position();                                                                                     // 331
            module.set.screenHeight();                                                                                 // 332
            module.set.type();                                                                                         // 333
            module.set.clickaway();                                                                                    // 334
                                                                                                                       //
            if (!settings.allowMultiple && module.others.active()) {                                                   // 336
              module.hideOthers(module.showModal);                                                                     // 337
            } else {                                                                                                   // 338
              settings.onShow.call(element);                                                                           // 340
                                                                                                                       //
              if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {        // 341
                module.debug('Showing modal with css animations');                                                     // 342
                $module.transition({                                                                                   // 343
                  debug: settings.debug,                                                                               // 345
                  animation: settings.transition + ' in',                                                              // 346
                  queue: settings.queue,                                                                               // 347
                  duration: settings.duration,                                                                         // 348
                  useFailSafe: true,                                                                                   // 349
                  onComplete: function () {                                                                            // 350
                    settings.onVisible.apply(element);                                                                 // 351
                    module.add.keyboardShortcuts();                                                                    // 352
                    module.save.focus();                                                                               // 353
                    module.set.active();                                                                               // 354
                                                                                                                       //
                    if (settings.autofocus) {                                                                          // 355
                      module.set.autofocus();                                                                          // 356
                    }                                                                                                  // 357
                                                                                                                       //
                    callback();                                                                                        // 358
                  }                                                                                                    // 359
                });                                                                                                    // 344
              } else {                                                                                                 // 362
                module.error(error.noTransition);                                                                      // 364
              }                                                                                                        // 365
            }                                                                                                          // 366
          } else {                                                                                                     // 367
            module.debug('Modal is already visible');                                                                  // 369
          }                                                                                                            // 370
        },                                                                                                             // 371
        hideModal: function (callback, keepDimmed) {                                                                   // 373
          callback = $.isFunction(callback) ? callback : function () {};                                               // 374
          module.debug('Hiding modal');                                                                                // 378
                                                                                                                       //
          if (settings.onHide.call(element, $(this)) === false) {                                                      // 379
            module.verbose('Hide callback returned false cancelling hide');                                            // 380
            return;                                                                                                    // 381
          }                                                                                                            // 382
                                                                                                                       //
          if (module.is.animating() || module.is.active()) {                                                           // 384
            if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {          // 385
              module.remove.active();                                                                                  // 386
              $module.transition({                                                                                     // 387
                debug: settings.debug,                                                                                 // 389
                animation: settings.transition + ' out',                                                               // 390
                queue: settings.queue,                                                                                 // 391
                duration: settings.duration,                                                                           // 392
                useFailSafe: true,                                                                                     // 393
                onStart: function () {                                                                                 // 394
                  if (!module.others.active() && !keepDimmed) {                                                        // 395
                    module.hideDimmer();                                                                               // 396
                  }                                                                                                    // 397
                                                                                                                       //
                  module.remove.keyboardShortcuts();                                                                   // 398
                },                                                                                                     // 399
                onComplete: function () {                                                                              // 400
                  settings.onHidden.call(element);                                                                     // 401
                  module.restore.focus();                                                                              // 402
                  callback();                                                                                          // 403
                }                                                                                                      // 404
              });                                                                                                      // 388
            } else {                                                                                                   // 407
              module.error(error.noTransition);                                                                        // 409
            }                                                                                                          // 410
          }                                                                                                            // 411
        },                                                                                                             // 412
        showDimmer: function () {                                                                                      // 414
          if ($dimmable.dimmer('is animating') || !$dimmable.dimmer('is active')) {                                    // 415
            module.debug('Showing dimmer');                                                                            // 416
            $dimmable.dimmer('show');                                                                                  // 417
          } else {                                                                                                     // 418
            module.debug('Dimmer already visible');                                                                    // 420
          }                                                                                                            // 421
        },                                                                                                             // 422
        hideDimmer: function () {                                                                                      // 424
          if ($dimmable.dimmer('is animating') || $dimmable.dimmer('is active')) {                                     // 425
            $dimmable.dimmer('hide', function () {                                                                     // 426
              module.remove.clickaway();                                                                               // 427
              module.remove.screenHeight();                                                                            // 428
            });                                                                                                        // 429
          } else {                                                                                                     // 430
            module.debug('Dimmer is not visible cannot hide');                                                         // 432
            return;                                                                                                    // 433
          }                                                                                                            // 434
        },                                                                                                             // 435
        hideAll: function (callback) {                                                                                 // 437
          var $visibleModals = $allModals.filter('.' + className.active + ', .' + className.animating);                // 438
          callback = $.isFunction(callback) ? callback : function () {};                                               // 441
                                                                                                                       //
          if ($visibleModals.length > 0) {                                                                             // 445
            module.debug('Hiding all visible modals');                                                                 // 446
            module.hideDimmer();                                                                                       // 447
            $visibleModals.modal('hide modal', callback);                                                              // 448
          }                                                                                                            // 451
        },                                                                                                             // 452
        hideOthers: function (callback) {                                                                              // 454
          var $visibleModals = $otherModals.filter('.' + className.active + ', .' + className.animating);              // 455
          callback = $.isFunction(callback) ? callback : function () {};                                               // 458
                                                                                                                       //
          if ($visibleModals.length > 0) {                                                                             // 462
            module.debug('Hiding other modals', $otherModals);                                                         // 463
            $visibleModals.modal('hide modal', callback, true);                                                        // 464
          }                                                                                                            // 467
        },                                                                                                             // 468
        others: {                                                                                                      // 470
          active: function () {                                                                                        // 471
            return $otherModals.filter('.' + className.active).length > 0;                                             // 472
          },                                                                                                           // 473
          animating: function () {                                                                                     // 474
            return $otherModals.filter('.' + className.animating).length > 0;                                          // 475
          }                                                                                                            // 476
        },                                                                                                             // 470
        add: {                                                                                                         // 480
          keyboardShortcuts: function () {                                                                             // 481
            module.verbose('Adding keyboard shortcuts');                                                               // 482
            $document.on('keyup' + eventNamespace, module.event.keyboard);                                             // 483
          }                                                                                                            // 486
        },                                                                                                             // 480
        save: {                                                                                                        // 489
          focus: function () {                                                                                         // 490
            $focusedElement = $(document.activeElement).blur();                                                        // 491
          }                                                                                                            // 492
        },                                                                                                             // 489
        restore: {                                                                                                     // 495
          focus: function () {                                                                                         // 496
            if ($focusedElement && $focusedElement.length > 0) {                                                       // 497
              $focusedElement.focus();                                                                                 // 498
            }                                                                                                          // 499
          }                                                                                                            // 500
        },                                                                                                             // 495
        remove: {                                                                                                      // 503
          active: function () {                                                                                        // 504
            $module.removeClass(className.active);                                                                     // 505
          },                                                                                                           // 506
          clickaway: function () {                                                                                     // 507
            if (settings.closable) {                                                                                   // 508
              $dimmer.off('click' + elementEventNamespace);                                                            // 509
            }                                                                                                          // 512
          },                                                                                                           // 513
          bodyStyle: function () {                                                                                     // 514
            if ($body.attr('style') === '') {                                                                          // 515
              module.verbose('Removing style attribute');                                                              // 516
              $body.removeAttr('style');                                                                               // 517
            }                                                                                                          // 518
          },                                                                                                           // 519
          screenHeight: function () {                                                                                  // 520
            module.debug('Removing page height');                                                                      // 521
            $body.css('height', '');                                                                                   // 522
          },                                                                                                           // 525
          keyboardShortcuts: function () {                                                                             // 526
            module.verbose('Removing keyboard shortcuts');                                                             // 527
            $document.off('keyup' + eventNamespace);                                                                   // 528
          },                                                                                                           // 531
          scrolling: function () {                                                                                     // 532
            $dimmable.removeClass(className.scrolling);                                                                // 533
            $module.removeClass(className.scrolling);                                                                  // 534
          }                                                                                                            // 535
        },                                                                                                             // 503
        cacheSizes: function () {                                                                                      // 538
          var modalHeight = $module.outerHeight();                                                                     // 539
                                                                                                                       //
          if (module.cache === undefined || modalHeight !== 0) {                                                       // 542
            module.cache = {                                                                                           // 543
              pageHeight: $(document).outerHeight(),                                                                   // 544
              height: modalHeight + settings.offset,                                                                   // 545
              contextHeight: settings.context == 'body' ? $(window).height() : $dimmable.height()                      // 546
            };                                                                                                         // 543
          }                                                                                                            // 550
                                                                                                                       //
          module.debug('Caching modal and container sizes', module.cache);                                             // 551
        },                                                                                                             // 552
        can: {                                                                                                         // 554
          fit: function () {                                                                                           // 555
            return module.cache.height + settings.padding * 2 < module.cache.contextHeight;                            // 556
          }                                                                                                            // 557
        },                                                                                                             // 554
        is: {                                                                                                          // 560
          active: function () {                                                                                        // 561
            return $module.hasClass(className.active);                                                                 // 562
          },                                                                                                           // 563
          animating: function () {                                                                                     // 564
            return $module.transition('is supported') ? $module.transition('is animating') : $module.is(':visible');   // 565
          },                                                                                                           // 569
          scrolling: function () {                                                                                     // 570
            return $dimmable.hasClass(className.scrolling);                                                            // 571
          },                                                                                                           // 572
          modernBrowser: function () {                                                                                 // 573
            // appName for IE11 reports 'Netscape' can no longer use                                                   // 574
            return !(window.ActiveXObject || "ActiveXObject" in window);                                               // 575
          }                                                                                                            // 576
        },                                                                                                             // 560
        set: {                                                                                                         // 579
          autofocus: function () {                                                                                     // 580
            var $inputs = $module.find(':input').filter(':visible'),                                                   // 581
                $autofocus = $inputs.filter('[autofocus]'),                                                            // 581
                $input = $autofocus.length > 0 ? $autofocus.first() : $inputs.first();                                 // 581
                                                                                                                       //
            if ($input.length > 0) {                                                                                   // 588
              $input.focus();                                                                                          // 589
            }                                                                                                          // 590
          },                                                                                                           // 591
          clickaway: function () {                                                                                     // 592
            if (settings.closable) {                                                                                   // 593
              $dimmer.on('click' + elementEventNamespace, module.event.click);                                         // 594
            }                                                                                                          // 597
          },                                                                                                           // 598
          screenHeight: function () {                                                                                  // 599
            if (module.can.fit()) {                                                                                    // 600
              $body.css('height', '');                                                                                 // 601
            } else {                                                                                                   // 602
              module.debug('Modal is taller than page content, resizing page height');                                 // 604
              $body.css('height', module.cache.height + settings.padding * 2);                                         // 605
            }                                                                                                          // 608
          },                                                                                                           // 609
          active: function () {                                                                                        // 610
            $module.addClass(className.active);                                                                        // 611
          },                                                                                                           // 612
          scrolling: function () {                                                                                     // 613
            $dimmable.addClass(className.scrolling);                                                                   // 614
            $module.addClass(className.scrolling);                                                                     // 615
          },                                                                                                           // 616
          type: function () {                                                                                          // 617
            if (module.can.fit()) {                                                                                    // 618
              module.verbose('Modal fits on screen');                                                                  // 619
                                                                                                                       //
              if (!module.others.active() && !module.others.animating()) {                                             // 620
                module.remove.scrolling();                                                                             // 621
              }                                                                                                        // 622
            } else {                                                                                                   // 623
              module.verbose('Modal cannot fit on screen setting to scrolling');                                       // 625
              module.set.scrolling();                                                                                  // 626
            }                                                                                                          // 627
          },                                                                                                           // 628
          position: function () {                                                                                      // 629
            module.verbose('Centering modal on page', module.cache);                                                   // 630
                                                                                                                       //
            if (module.can.fit()) {                                                                                    // 631
              $module.css({                                                                                            // 632
                top: '',                                                                                               // 634
                marginTop: -(module.cache.height / 2)                                                                  // 635
              });                                                                                                      // 633
            } else {                                                                                                   // 638
              $module.css({                                                                                            // 640
                marginTop: '',                                                                                         // 642
                top: $document.scrollTop()                                                                             // 643
              });                                                                                                      // 641
            }                                                                                                          // 646
          },                                                                                                           // 647
          undetached: function () {                                                                                    // 648
            $dimmable.addClass(className.undetached);                                                                  // 649
          }                                                                                                            // 650
        },                                                                                                             // 579
        setting: function (name, value) {                                                                              // 653
          module.debug('Changing setting', name, value);                                                               // 654
                                                                                                                       //
          if ($.isPlainObject(name)) {                                                                                 // 655
            $.extend(true, settings, name);                                                                            // 656
          } else if (value !== undefined) {                                                                            // 657
            if ($.isPlainObject(settings[name])) {                                                                     // 659
              $.extend(true, settings[name], value);                                                                   // 660
            } else {                                                                                                   // 661
              settings[name] = value;                                                                                  // 663
            }                                                                                                          // 664
          } else {                                                                                                     // 665
            return settings[name];                                                                                     // 667
          }                                                                                                            // 668
        },                                                                                                             // 669
        internal: function (name, value) {                                                                             // 670
          if ($.isPlainObject(name)) {                                                                                 // 671
            $.extend(true, module, name);                                                                              // 672
          } else if (value !== undefined) {                                                                            // 673
            module[name] = value;                                                                                      // 675
          } else {                                                                                                     // 676
            return module[name];                                                                                       // 678
          }                                                                                                            // 679
        },                                                                                                             // 680
        debug: function () {                                                                                           // 681
          if (!settings.silent && settings.debug) {                                                                    // 682
            if (settings.performance) {                                                                                // 683
              module.performance.log(arguments);                                                                       // 684
            } else {                                                                                                   // 685
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 687
              module.debug.apply(console, arguments);                                                                  // 688
            }                                                                                                          // 689
          }                                                                                                            // 690
        },                                                                                                             // 691
        verbose: function () {                                                                                         // 692
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 693
            if (settings.performance) {                                                                                // 694
              module.performance.log(arguments);                                                                       // 695
            } else {                                                                                                   // 696
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 698
              module.verbose.apply(console, arguments);                                                                // 699
            }                                                                                                          // 700
          }                                                                                                            // 701
        },                                                                                                             // 702
        error: function () {                                                                                           // 703
          if (!settings.silent) {                                                                                      // 704
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 705
            module.error.apply(console, arguments);                                                                    // 706
          }                                                                                                            // 707
        },                                                                                                             // 708
        performance: {                                                                                                 // 709
          log: function (message) {                                                                                    // 710
            var currentTime, executionTime, previousTime;                                                              // 711
                                                                                                                       //
            if (settings.performance) {                                                                                // 716
              currentTime = new Date().getTime();                                                                      // 717
              previousTime = time || currentTime;                                                                      // 718
              executionTime = currentTime - previousTime;                                                              // 719
              time = currentTime;                                                                                      // 720
              performance.push({                                                                                       // 721
                'Name': message[0],                                                                                    // 722
                'Arguments': [].slice.call(message, 1) || '',                                                          // 723
                'Element': element,                                                                                    // 724
                'Execution Time': executionTime                                                                        // 725
              });                                                                                                      // 721
            }                                                                                                          // 727
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 728
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 729
          },                                                                                                           // 730
          display: function () {                                                                                       // 731
            var title = settings.name + ':',                                                                           // 732
                totalTime = 0;                                                                                         // 732
            time = false;                                                                                              // 736
            clearTimeout(module.performance.timer);                                                                    // 737
            $.each(performance, function (index, data) {                                                               // 738
              totalTime += data['Execution Time'];                                                                     // 739
            });                                                                                                        // 740
            title += ' ' + totalTime + 'ms';                                                                           // 741
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 742
              title += ' \'' + moduleSelector + '\'';                                                                  // 743
            }                                                                                                          // 744
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 745
              console.groupCollapsed(title);                                                                           // 746
                                                                                                                       //
              if (console.table) {                                                                                     // 747
                console.table(performance);                                                                            // 748
              } else {                                                                                                 // 749
                $.each(performance, function (index, data) {                                                           // 751
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 752
                });                                                                                                    // 753
              }                                                                                                        // 754
                                                                                                                       //
              console.groupEnd();                                                                                      // 755
            }                                                                                                          // 756
                                                                                                                       //
            performance = [];                                                                                          // 757
          }                                                                                                            // 758
        },                                                                                                             // 709
        invoke: function (query, passedArguments, context) {                                                           // 760
          var object = instance,                                                                                       // 761
              maxDepth,                                                                                                // 761
              found,                                                                                                   // 761
              response;                                                                                                // 761
          passedArguments = passedArguments || queryArguments;                                                         // 767
          context = element || context;                                                                                // 768
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 769
            query = query.split(/[\. ]/);                                                                              // 770
            maxDepth = query.length - 1;                                                                               // 771
            $.each(query, function (depth, value) {                                                                    // 772
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 777
                object = object[camelCaseValue];                                                                       // 778
              } else if (object[camelCaseValue] !== undefined) {                                                       // 779
                found = object[camelCaseValue];                                                                        // 781
                return false;                                                                                          // 782
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 783
                object = object[value];                                                                                // 785
              } else if (object[value] !== undefined) {                                                                // 786
                found = object[value];                                                                                 // 788
                return false;                                                                                          // 789
              } else {                                                                                                 // 790
                return false;                                                                                          // 792
              }                                                                                                        // 793
            });                                                                                                        // 794
          }                                                                                                            // 795
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 796
            response = found.apply(context, passedArguments);                                                          // 797
          } else if (found !== undefined) {                                                                            // 798
            response = found;                                                                                          // 800
          }                                                                                                            // 801
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 802
            returnedValue.push(response);                                                                              // 803
          } else if (returnedValue !== undefined) {                                                                    // 804
            returnedValue = [returnedValue, response];                                                                 // 806
          } else if (response !== undefined) {                                                                         // 807
            returnedValue = response;                                                                                  // 809
          }                                                                                                            // 810
                                                                                                                       //
          return found;                                                                                                // 811
        }                                                                                                              // 812
      };                                                                                                               // 84
                                                                                                                       //
      if (methodInvoked) {                                                                                             // 815
        if (instance === undefined) {                                                                                  // 816
          module.initialize();                                                                                         // 817
        }                                                                                                              // 818
                                                                                                                       //
        module.invoke(query);                                                                                          // 819
      } else {                                                                                                         // 820
        if (instance !== undefined) {                                                                                  // 822
          instance.invoke('destroy');                                                                                  // 823
        }                                                                                                              // 824
                                                                                                                       //
        module.initialize();                                                                                           // 825
      }                                                                                                                // 826
    });                                                                                                                // 827
    return returnedValue !== undefined ? returnedValue : this;                                                         // 830
  };                                                                                                                   // 834
                                                                                                                       //
  $.fn.modal.settings = {                                                                                              // 836
    name: 'Modal',                                                                                                     // 838
    namespace: 'modal',                                                                                                // 839
    silent: false,                                                                                                     // 841
    debug: false,                                                                                                      // 842
    verbose: false,                                                                                                    // 843
    performance: true,                                                                                                 // 844
    observeChanges: false,                                                                                             // 846
    allowMultiple: false,                                                                                              // 848
    detachable: true,                                                                                                  // 849
    closable: true,                                                                                                    // 850
    autofocus: true,                                                                                                   // 851
    inverted: false,                                                                                                   // 853
    blurring: false,                                                                                                   // 854
    dimmerSettings: {                                                                                                  // 856
      closable: false,                                                                                                 // 857
      useCSS: true                                                                                                     // 858
    },                                                                                                                 // 856
    context: 'body',                                                                                                   // 862
    queue: false,                                                                                                      // 864
    duration: 500,                                                                                                     // 865
    offset: 0,                                                                                                         // 866
    transition: 'scale',                                                                                               // 867
    // padding with edge of page                                                                                       // 869
    padding: 50,                                                                                                       // 870
    // called before show animation                                                                                    // 872
    onShow: function () {},                                                                                            // 873
    // called after show animation                                                                                     // 875
    onVisible: function () {},                                                                                         // 876
    // called before hide animation                                                                                    // 878
    onHide: function () {                                                                                              // 879
      return true;                                                                                                     // 879
    },                                                                                                                 // 879
    // called after hide animation                                                                                     // 881
    onHidden: function () {},                                                                                          // 882
    // called after approve selector match                                                                             // 884
    onApprove: function () {                                                                                           // 885
      return true;                                                                                                     // 885
    },                                                                                                                 // 885
    // called after deny selector match                                                                                // 887
    onDeny: function () {                                                                                              // 888
      return true;                                                                                                     // 888
    },                                                                                                                 // 888
    selector: {                                                                                                        // 890
      close: '> .close',                                                                                               // 891
      approve: '.actions .positive, .actions .approve, .actions .ok',                                                  // 892
      deny: '.actions .negative, .actions .deny, .actions .cancel',                                                    // 893
      modal: '.ui.modal'                                                                                               // 894
    },                                                                                                                 // 890
    error: {                                                                                                           // 896
      dimmer: 'UI Dimmer, a required component is not included in this page',                                          // 897
      method: 'The method you called is not defined.',                                                                 // 898
      notFound: 'The element you specified could not be found'                                                         // 899
    },                                                                                                                 // 896
    className: {                                                                                                       // 901
      active: 'active',                                                                                                // 902
      animating: 'animating',                                                                                          // 903
      blurring: 'blurring',                                                                                            // 904
      scrolling: 'scrolling',                                                                                          // 905
      undetached: 'undetached'                                                                                         // 906
    }                                                                                                                  // 901
  };                                                                                                                   // 836
})(jQuery, window, document);                                                                                          // 911
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"nag.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/modules/nag.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Nag                                                                                              //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.nag = function (parameters) {                                                                                   // 26
    var $allModules = $(this),                                                                                         // 27
        moduleSelector = $allModules.selector || '',                                                                   // 27
        time = new Date().getTime(),                                                                                   // 27
        performance = [],                                                                                              // 27
        query = arguments[0],                                                                                          // 27
        methodInvoked = typeof query == 'string',                                                                      // 27
        queryArguments = [].slice.call(arguments, 1),                                                                  // 27
        returnedValue;                                                                                                 // 27
    $allModules.each(function () {                                                                                     // 39
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.nag.settings, parameters) : $.extend({}, $.fn.nag.settings),
          className = settings.className,                                                                              // 41
          selector = settings.selector,                                                                                // 41
          error = settings.error,                                                                                      // 41
          namespace = settings.namespace,                                                                              // 41
          eventNamespace = '.' + namespace,                                                                            // 41
          moduleNamespace = namespace + '-module',                                                                     // 41
          $module = $(this),                                                                                           // 41
          $close = $module.find(selector.close),                                                                       // 41
          $context = settings.context ? $(settings.context) : $('body'),                                               // 41
          element = this,                                                                                              // 41
          instance = $module.data(moduleNamespace),                                                                    // 41
          moduleOffset,                                                                                                // 41
          moduleHeight,                                                                                                // 41
          contextWidth,                                                                                                // 41
          contextHeight,                                                                                               // 41
          contextOffset,                                                                                               // 41
          yOffset,                                                                                                     // 41
          yPosition,                                                                                                   // 41
          timer,                                                                                                       // 41
          module,                                                                                                      // 41
          requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
        setTimeout(callback, 0);                                                                                       // 81
      };                                                                                                               // 81
                                                                                                                       //
      module = {                                                                                                       // 83
        initialize: function () {                                                                                      // 85
          module.verbose('Initializing element');                                                                      // 86
          $module.on('click' + eventNamespace, selector.close, module.dismiss).data(moduleNamespace, module);          // 88
                                                                                                                       //
          if (settings.detachable && $module.parent()[0] !== $context[0]) {                                            // 93
            $module.detach().prependTo($context);                                                                      // 94
          }                                                                                                            // 98
                                                                                                                       //
          if (settings.displayTime > 0) {                                                                              // 100
            setTimeout(module.hide, settings.displayTime);                                                             // 101
          }                                                                                                            // 102
                                                                                                                       //
          module.show();                                                                                               // 103
        },                                                                                                             // 104
        destroy: function () {                                                                                         // 106
          module.verbose('Destroying instance');                                                                       // 107
          $module.removeData(moduleNamespace).off(eventNamespace);                                                     // 108
        },                                                                                                             // 112
        show: function () {                                                                                            // 114
          if (module.should.show() && !$module.is(':visible')) {                                                       // 115
            module.debug('Showing nag', settings.animation.show);                                                      // 116
                                                                                                                       //
            if (settings.animation.show == 'fade') {                                                                   // 117
              $module.fadeIn(settings.duration, settings.easing);                                                      // 118
            } else {                                                                                                   // 121
              $module.slideDown(settings.duration, settings.easing);                                                   // 123
            }                                                                                                          // 126
          }                                                                                                            // 127
        },                                                                                                             // 128
        hide: function () {                                                                                            // 130
          module.debug('Showing nag', settings.animation.hide);                                                        // 131
                                                                                                                       //
          if (settings.animation.show == 'fade') {                                                                     // 132
            $module.fadeIn(settings.duration, settings.easing);                                                        // 133
          } else {                                                                                                     // 136
            $module.slideUp(settings.duration, settings.easing);                                                       // 138
          }                                                                                                            // 141
        },                                                                                                             // 142
        onHide: function () {                                                                                          // 144
          module.debug('Removing nag', settings.animation.hide);                                                       // 145
          $module.remove();                                                                                            // 146
                                                                                                                       //
          if (settings.onHide) {                                                                                       // 147
            settings.onHide();                                                                                         // 148
          }                                                                                                            // 149
        },                                                                                                             // 150
        dismiss: function (event) {                                                                                    // 152
          if (settings.storageMethod) {                                                                                // 153
            module.storage.set(settings.key, settings.value);                                                          // 154
          }                                                                                                            // 155
                                                                                                                       //
          module.hide();                                                                                               // 156
          event.stopImmediatePropagation();                                                                            // 157
          event.preventDefault();                                                                                      // 158
        },                                                                                                             // 159
        should: {                                                                                                      // 161
          show: function () {                                                                                          // 162
            if (settings.persist) {                                                                                    // 163
              module.debug('Persistent nag is set, can show nag');                                                     // 164
              return true;                                                                                             // 165
            }                                                                                                          // 166
                                                                                                                       //
            if (module.storage.get(settings.key) != settings.value.toString()) {                                       // 167
              module.debug('Stored value is not set, can show nag', module.storage.get(settings.key));                 // 168
              return true;                                                                                             // 169
            }                                                                                                          // 170
                                                                                                                       //
            module.debug('Stored value is set, cannot show nag', module.storage.get(settings.key));                    // 171
            return false;                                                                                              // 172
          }                                                                                                            // 173
        },                                                                                                             // 161
        get: {                                                                                                         // 176
          storageOptions: function () {                                                                                // 177
            var options = {};                                                                                          // 178
                                                                                                                       //
            if (settings.expires) {                                                                                    // 181
              options.expires = settings.expires;                                                                      // 182
            }                                                                                                          // 183
                                                                                                                       //
            if (settings.domain) {                                                                                     // 184
              options.domain = settings.domain;                                                                        // 185
            }                                                                                                          // 186
                                                                                                                       //
            if (settings.path) {                                                                                       // 187
              options.path = settings.path;                                                                            // 188
            }                                                                                                          // 189
                                                                                                                       //
            return options;                                                                                            // 190
          }                                                                                                            // 191
        },                                                                                                             // 176
        clear: function () {                                                                                           // 194
          module.storage.remove(settings.key);                                                                         // 195
        },                                                                                                             // 196
        storage: {                                                                                                     // 198
          set: function (key, value) {                                                                                 // 199
            var options = module.get.storageOptions();                                                                 // 200
                                                                                                                       //
            if (settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {                       // 203
              window.localStorage.setItem(key, value);                                                                 // 204
              module.debug('Value stored using local storage', key, value);                                            // 205
            } else if (settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {            // 206
              window.sessionStorage.setItem(key, value);                                                               // 208
              module.debug('Value stored using session storage', key, value);                                          // 209
            } else if ($.cookie !== undefined) {                                                                       // 210
              $.cookie(key, value, options);                                                                           // 212
              module.debug('Value stored using cookie', key, value, options);                                          // 213
            } else {                                                                                                   // 214
              module.error(error.noCookieStorage);                                                                     // 216
              return;                                                                                                  // 217
            }                                                                                                          // 218
          },                                                                                                           // 219
          get: function (key, value) {                                                                                 // 220
            var storedValue;                                                                                           // 221
                                                                                                                       //
            if (settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {                       // 224
              storedValue = window.localStorage.getItem(key);                                                          // 225
            } else if (settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {            // 226
              storedValue = window.sessionStorage.getItem(key);                                                        // 228
            } // get by cookie                                                                                         // 229
            else if ($.cookie !== undefined) {                                                                         // 227
                storedValue = $.cookie(key);                                                                           // 232
              } else {                                                                                                 // 233
                module.error(error.noCookieStorage);                                                                   // 235
              }                                                                                                        // 236
                                                                                                                       //
            if (storedValue == 'undefined' || storedValue == 'null' || storedValue === undefined || storedValue === null) {
              storedValue = undefined;                                                                                 // 238
            }                                                                                                          // 239
                                                                                                                       //
            return storedValue;                                                                                        // 240
          },                                                                                                           // 241
          remove: function (key) {                                                                                     // 242
            var options = module.get.storageOptions();                                                                 // 243
                                                                                                                       //
            if (settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {                       // 246
              window.localStorage.removeItem(key);                                                                     // 247
            } else if (settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {            // 248
              window.sessionStorage.removeItem(key);                                                                   // 250
            } // store by cookie                                                                                       // 251
            else if ($.cookie !== undefined) {                                                                         // 249
                $.removeCookie(key, options);                                                                          // 254
              } else {                                                                                                 // 255
                module.error(error.noStorage);                                                                         // 257
              }                                                                                                        // 258
          }                                                                                                            // 259
        },                                                                                                             // 198
        setting: function (name, value) {                                                                              // 262
          module.debug('Changing setting', name, value);                                                               // 263
                                                                                                                       //
          if ($.isPlainObject(name)) {                                                                                 // 264
            $.extend(true, settings, name);                                                                            // 265
          } else if (value !== undefined) {                                                                            // 266
            if ($.isPlainObject(settings[name])) {                                                                     // 268
              $.extend(true, settings[name], value);                                                                   // 269
            } else {                                                                                                   // 270
              settings[name] = value;                                                                                  // 272
            }                                                                                                          // 273
          } else {                                                                                                     // 274
            return settings[name];                                                                                     // 276
          }                                                                                                            // 277
        },                                                                                                             // 278
        internal: function (name, value) {                                                                             // 279
          if ($.isPlainObject(name)) {                                                                                 // 280
            $.extend(true, module, name);                                                                              // 281
          } else if (value !== undefined) {                                                                            // 282
            module[name] = value;                                                                                      // 284
          } else {                                                                                                     // 285
            return module[name];                                                                                       // 287
          }                                                                                                            // 288
        },                                                                                                             // 289
        debug: function () {                                                                                           // 290
          if (!settings.silent && settings.debug) {                                                                    // 291
            if (settings.performance) {                                                                                // 292
              module.performance.log(arguments);                                                                       // 293
            } else {                                                                                                   // 294
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 296
              module.debug.apply(console, arguments);                                                                  // 297
            }                                                                                                          // 298
          }                                                                                                            // 299
        },                                                                                                             // 300
        verbose: function () {                                                                                         // 301
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 302
            if (settings.performance) {                                                                                // 303
              module.performance.log(arguments);                                                                       // 304
            } else {                                                                                                   // 305
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 307
              module.verbose.apply(console, arguments);                                                                // 308
            }                                                                                                          // 309
          }                                                                                                            // 310
        },                                                                                                             // 311
        error: function () {                                                                                           // 312
          if (!settings.silent) {                                                                                      // 313
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 314
            module.error.apply(console, arguments);                                                                    // 315
          }                                                                                                            // 316
        },                                                                                                             // 317
        performance: {                                                                                                 // 318
          log: function (message) {                                                                                    // 319
            var currentTime, executionTime, previousTime;                                                              // 320
                                                                                                                       //
            if (settings.performance) {                                                                                // 325
              currentTime = new Date().getTime();                                                                      // 326
              previousTime = time || currentTime;                                                                      // 327
              executionTime = currentTime - previousTime;                                                              // 328
              time = currentTime;                                                                                      // 329
              performance.push({                                                                                       // 330
                'Name': message[0],                                                                                    // 331
                'Arguments': [].slice.call(message, 1) || '',                                                          // 332
                'Element': element,                                                                                    // 333
                'Execution Time': executionTime                                                                        // 334
              });                                                                                                      // 330
            }                                                                                                          // 336
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 337
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 338
          },                                                                                                           // 339
          display: function () {                                                                                       // 340
            var title = settings.name + ':',                                                                           // 341
                totalTime = 0;                                                                                         // 341
            time = false;                                                                                              // 345
            clearTimeout(module.performance.timer);                                                                    // 346
            $.each(performance, function (index, data) {                                                               // 347
              totalTime += data['Execution Time'];                                                                     // 348
            });                                                                                                        // 349
            title += ' ' + totalTime + 'ms';                                                                           // 350
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 351
              title += ' \'' + moduleSelector + '\'';                                                                  // 352
            }                                                                                                          // 353
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 354
              console.groupCollapsed(title);                                                                           // 355
                                                                                                                       //
              if (console.table) {                                                                                     // 356
                console.table(performance);                                                                            // 357
              } else {                                                                                                 // 358
                $.each(performance, function (index, data) {                                                           // 360
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 361
                });                                                                                                    // 362
              }                                                                                                        // 363
                                                                                                                       //
              console.groupEnd();                                                                                      // 364
            }                                                                                                          // 365
                                                                                                                       //
            performance = [];                                                                                          // 366
          }                                                                                                            // 367
        },                                                                                                             // 318
        invoke: function (query, passedArguments, context) {                                                           // 369
          var object = instance,                                                                                       // 370
              maxDepth,                                                                                                // 370
              found,                                                                                                   // 370
              response;                                                                                                // 370
          passedArguments = passedArguments || queryArguments;                                                         // 376
          context = element || context;                                                                                // 377
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 378
            query = query.split(/[\. ]/);                                                                              // 379
            maxDepth = query.length - 1;                                                                               // 380
            $.each(query, function (depth, value) {                                                                    // 381
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 386
                object = object[camelCaseValue];                                                                       // 387
              } else if (object[camelCaseValue] !== undefined) {                                                       // 388
                found = object[camelCaseValue];                                                                        // 390
                return false;                                                                                          // 391
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 392
                object = object[value];                                                                                // 394
              } else if (object[value] !== undefined) {                                                                // 395
                found = object[value];                                                                                 // 397
                return false;                                                                                          // 398
              } else {                                                                                                 // 399
                module.error(error.method, query);                                                                     // 401
                return false;                                                                                          // 402
              }                                                                                                        // 403
            });                                                                                                        // 404
          }                                                                                                            // 405
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 406
            response = found.apply(context, passedArguments);                                                          // 407
          } else if (found !== undefined) {                                                                            // 408
            response = found;                                                                                          // 410
          }                                                                                                            // 411
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 412
            returnedValue.push(response);                                                                              // 413
          } else if (returnedValue !== undefined) {                                                                    // 414
            returnedValue = [returnedValue, response];                                                                 // 416
          } else if (response !== undefined) {                                                                         // 417
            returnedValue = response;                                                                                  // 419
          }                                                                                                            // 420
                                                                                                                       //
          return found;                                                                                                // 421
        }                                                                                                              // 422
      };                                                                                                               // 83
                                                                                                                       //
      if (methodInvoked) {                                                                                             // 425
        if (instance === undefined) {                                                                                  // 426
          module.initialize();                                                                                         // 427
        }                                                                                                              // 428
                                                                                                                       //
        module.invoke(query);                                                                                          // 429
      } else {                                                                                                         // 430
        if (instance !== undefined) {                                                                                  // 432
          instance.invoke('destroy');                                                                                  // 433
        }                                                                                                              // 434
                                                                                                                       //
        module.initialize();                                                                                           // 435
      }                                                                                                                // 436
    });                                                                                                                // 437
    return returnedValue !== undefined ? returnedValue : this;                                                         // 440
  };                                                                                                                   // 444
                                                                                                                       //
  $.fn.nag.settings = {                                                                                                // 446
    name: 'Nag',                                                                                                       // 448
    silent: false,                                                                                                     // 450
    debug: false,                                                                                                      // 451
    verbose: false,                                                                                                    // 452
    performance: true,                                                                                                 // 453
    namespace: 'Nag',                                                                                                  // 455
    // allows cookie to be overridden                                                                                  // 457
    persist: false,                                                                                                    // 458
    // set to zero to require manually dismissal, otherwise hides on its own                                           // 460
    displayTime: 0,                                                                                                    // 461
    animation: {                                                                                                       // 463
      show: 'slide',                                                                                                   // 464
      hide: 'slide'                                                                                                    // 465
    },                                                                                                                 // 463
    context: false,                                                                                                    // 468
    detachable: false,                                                                                                 // 469
    expires: 30,                                                                                                       // 471
    domain: false,                                                                                                     // 472
    path: '/',                                                                                                         // 473
    // type of storage to use                                                                                          // 475
    storageMethod: 'cookie',                                                                                           // 476
    // value to store in dismissed localstorage/cookie                                                                 // 478
    key: 'nag',                                                                                                        // 479
    value: 'dismiss',                                                                                                  // 480
    error: {                                                                                                           // 482
      noCookieStorage: '$.cookie is not included. A storage solution is required.',                                    // 483
      noStorage: 'Neither $.cookie or store is defined. A storage solution is required for storing state',             // 484
      method: 'The method you called is not defined.'                                                                  // 485
    },                                                                                                                 // 482
    className: {                                                                                                       // 488
      bottom: 'bottom',                                                                                                // 489
      fixed: 'fixed'                                                                                                   // 490
    },                                                                                                                 // 488
    selector: {                                                                                                        // 493
      close: '.close.icon'                                                                                             // 494
    },                                                                                                                 // 493
    speed: 500,                                                                                                        // 497
    easing: 'easeOutQuad',                                                                                             // 498
    onHide: function () {}                                                                                             // 500
  }; // Adds easing                                                                                                    // 446
                                                                                                                       //
  $.extend($.easing, {                                                                                                 // 505
    easeOutQuad: function (x, t, b, c, d) {                                                                            // 506
      return -c * (t /= d) * (t - 2) + b;                                                                              // 507
    }                                                                                                                  // 508
  });                                                                                                                  // 505
})(jQuery, window, document);                                                                                          // 511
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"popup.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/modules/popup.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof2 = require("babel-runtime/helpers/typeof");                                                                //
                                                                                                                       //
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Popup                                                                                            //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.popup = function (parameters) {                                                                                 // 26
    var $allModules = $(this),                                                                                         // 27
        $document = $(document),                                                                                       // 27
        $window = $(window),                                                                                           // 27
        $body = $('body'),                                                                                             // 27
        moduleSelector = $allModules.selector || '',                                                                   // 27
        hasTouch = true,                                                                                               // 27
        time = new Date().getTime(),                                                                                   // 27
        performance = [],                                                                                              // 27
        query = arguments[0],                                                                                          // 27
        methodInvoked = typeof query == 'string',                                                                      // 27
        queryArguments = [].slice.call(arguments, 1),                                                                  // 27
        returnedValue;                                                                                                 // 27
    $allModules.each(function () {                                                                                     // 45
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.popup.settings, parameters) : $.extend({}, $.fn.popup.settings),
          selector = settings.selector,                                                                                // 47
          className = settings.className,                                                                              // 47
          error = settings.error,                                                                                      // 47
          metadata = settings.metadata,                                                                                // 47
          namespace = settings.namespace,                                                                              // 47
          eventNamespace = '.' + settings.namespace,                                                                   // 47
          moduleNamespace = 'module-' + namespace,                                                                     // 47
          $module = $(this),                                                                                           // 47
          $context = $(settings.context),                                                                              // 47
          $scrollContext = $(settings.scrollContext),                                                                  // 47
          $boundary = $(settings.boundary),                                                                            // 47
          $target = settings.target ? $(settings.target) : $module,                                                    // 47
          $popup,                                                                                                      // 47
          $offsetParent,                                                                                               // 47
          searchDepth = 0,                                                                                             // 47
          triedPositions = false,                                                                                      // 47
          openedWithTouch = false,                                                                                     // 47
          element = this,                                                                                              // 47
          instance = $module.data(moduleNamespace),                                                                    // 47
          documentObserver,                                                                                            // 47
          elementNamespace,                                                                                            // 47
          id,                                                                                                          // 47
          module;                                                                                                      // 47
      module = {                                                                                                       // 85
        // binds events                                                                                                // 87
        initialize: function () {                                                                                      // 88
          module.debug('Initializing', $module);                                                                       // 89
          module.createID();                                                                                           // 90
          module.bind.events();                                                                                        // 91
                                                                                                                       //
          if (!module.exists() && settings.preserve) {                                                                 // 92
            module.create();                                                                                           // 93
          }                                                                                                            // 94
                                                                                                                       //
          module.observeChanges();                                                                                     // 95
          module.instantiate();                                                                                        // 96
        },                                                                                                             // 97
        instantiate: function () {                                                                                     // 99
          module.verbose('Storing instance', module);                                                                  // 100
          instance = module;                                                                                           // 101
          $module.data(moduleNamespace, instance);                                                                     // 102
        },                                                                                                             // 105
        observeChanges: function () {                                                                                  // 107
          if ('MutationObserver' in window) {                                                                          // 108
            documentObserver = new MutationObserver(module.event.documentChanged);                                     // 109
            documentObserver.observe(document, {                                                                       // 110
              childList: true,                                                                                         // 111
              subtree: true                                                                                            // 112
            });                                                                                                        // 110
            module.debug('Setting up mutation observer', documentObserver);                                            // 114
          }                                                                                                            // 115
        },                                                                                                             // 116
        refresh: function () {                                                                                         // 118
          if (settings.popup) {                                                                                        // 119
            $popup = $(settings.popup).eq(0);                                                                          // 120
          } else {                                                                                                     // 121
            if (settings.inline) {                                                                                     // 123
              $popup = $target.nextAll(selector.popup).eq(0);                                                          // 124
              settings.popup = $popup;                                                                                 // 125
            }                                                                                                          // 126
          }                                                                                                            // 127
                                                                                                                       //
          if (settings.popup) {                                                                                        // 128
            $popup.addClass(className.loading);                                                                        // 129
            $offsetParent = module.get.offsetParent();                                                                 // 130
            $popup.removeClass(className.loading);                                                                     // 131
                                                                                                                       //
            if (settings.movePopup && module.has.popup() && module.get.offsetParent($popup)[0] !== $offsetParent[0]) {
              module.debug('Moving popup to the same offset parent as activating element');                            // 133
              $popup.detach().appendTo($offsetParent);                                                                 // 134
            }                                                                                                          // 138
          } else {                                                                                                     // 139
            $offsetParent = settings.inline ? module.get.offsetParent($target) : module.has.popup() ? module.get.offsetParent($popup) : $body;
          }                                                                                                            // 147
                                                                                                                       //
          if ($offsetParent.is('html') && $offsetParent[0] !== $body[0]) {                                             // 148
            module.debug('Setting page as offset parent');                                                             // 149
            $offsetParent = $body;                                                                                     // 150
          }                                                                                                            // 151
                                                                                                                       //
          if (module.get.variation()) {                                                                                // 152
            module.set.variation();                                                                                    // 153
          }                                                                                                            // 154
        },                                                                                                             // 155
        reposition: function () {                                                                                      // 157
          module.refresh();                                                                                            // 158
          module.set.position();                                                                                       // 159
        },                                                                                                             // 160
        destroy: function () {                                                                                         // 162
          module.debug('Destroying previous module');                                                                  // 163
                                                                                                                       //
          if (documentObserver) {                                                                                      // 164
            documentObserver.disconnect();                                                                             // 165
          } // remove element only if was created dynamically                                                          // 166
                                                                                                                       //
                                                                                                                       //
          if ($popup && !settings.preserve) {                                                                          // 168
            module.removePopup();                                                                                      // 169
          } // clear all timeouts                                                                                      // 170
                                                                                                                       //
                                                                                                                       //
          clearTimeout(module.hideTimer);                                                                              // 172
          clearTimeout(module.showTimer); // remove events                                                             // 173
                                                                                                                       //
          module.unbind.close();                                                                                       // 175
          module.unbind.events();                                                                                      // 176
          $module.removeData(moduleNamespace);                                                                         // 177
        },                                                                                                             // 180
        event: {                                                                                                       // 182
          start: function (event) {                                                                                    // 183
            var delay = $.isPlainObject(settings.delay) ? settings.delay.show : settings.delay;                        // 184
            clearTimeout(module.hideTimer);                                                                            // 189
                                                                                                                       //
            if (!openedWithTouch) {                                                                                    // 190
              module.showTimer = setTimeout(module.show, delay);                                                       // 191
            }                                                                                                          // 192
          },                                                                                                           // 193
          end: function () {                                                                                           // 194
            var delay = $.isPlainObject(settings.delay) ? settings.delay.hide : settings.delay;                        // 195
            clearTimeout(module.showTimer);                                                                            // 200
            module.hideTimer = setTimeout(module.hide, delay);                                                         // 201
          },                                                                                                           // 202
          touchstart: function (event) {                                                                               // 203
            openedWithTouch = true;                                                                                    // 204
            module.show();                                                                                             // 205
          },                                                                                                           // 206
          resize: function () {                                                                                        // 207
            if (module.is.visible()) {                                                                                 // 208
              module.set.position();                                                                                   // 209
            }                                                                                                          // 210
          },                                                                                                           // 211
          documentChanged: function (mutations) {                                                                      // 212
            [].forEach.call(mutations, function (mutation) {                                                           // 213
              if (mutation.removedNodes) {                                                                             // 214
                [].forEach.call(mutation.removedNodes, function (node) {                                               // 215
                  if (node == element || $(node).find(element).length > 0) {                                           // 216
                    module.debug('Element removed from DOM, tearing down events');                                     // 217
                    module.destroy();                                                                                  // 218
                  }                                                                                                    // 219
                });                                                                                                    // 220
              }                                                                                                        // 221
            });                                                                                                        // 222
          },                                                                                                           // 223
          hideGracefully: function (event) {                                                                           // 224
            var $target = $(event.target),                                                                             // 225
                isInDOM = $.contains(document.documentElement, event.target),                                          // 225
                inPopup = $target.closest(selector.popup).length > 0; // don't close on clicks inside popup            // 225
                                                                                                                       //
            if (event && !inPopup && isInDOM) {                                                                        // 231
              module.debug('Click occurred outside popup hiding popup');                                               // 232
              module.hide();                                                                                           // 233
            } else {                                                                                                   // 234
              module.debug('Click was inside popup, keeping popup open');                                              // 236
            }                                                                                                          // 237
          }                                                                                                            // 238
        },                                                                                                             // 182
        // generates popup html from metadata                                                                          // 241
        create: function () {                                                                                          // 242
          var html = module.get.html(),                                                                                // 243
              title = module.get.title(),                                                                              // 243
              content = module.get.content();                                                                          // 243
                                                                                                                       //
          if (html || content || title) {                                                                              // 249
            module.debug('Creating pop-up html');                                                                      // 250
                                                                                                                       //
            if (!html) {                                                                                               // 251
              html = settings.templates.popup({                                                                        // 252
                title: title,                                                                                          // 253
                content: content                                                                                       // 254
              });                                                                                                      // 252
            }                                                                                                          // 256
                                                                                                                       //
            $popup = $('<div/>').addClass(className.popup).data(metadata.activator, $module).html(html);               // 257
                                                                                                                       //
            if (settings.inline) {                                                                                     // 262
              module.verbose('Inserting popup element inline', $popup);                                                // 263
              $popup.insertAfter($module);                                                                             // 264
            } else {                                                                                                   // 267
              module.verbose('Appending popup element to body', $popup);                                               // 269
              $popup.appendTo($context);                                                                               // 270
            }                                                                                                          // 273
                                                                                                                       //
            module.refresh();                                                                                          // 274
            module.set.variation();                                                                                    // 275
                                                                                                                       //
            if (settings.hoverable) {                                                                                  // 277
              module.bind.popup();                                                                                     // 278
            }                                                                                                          // 279
                                                                                                                       //
            settings.onCreate.call($popup, element);                                                                   // 280
          } else if ($target.next(selector.popup).length !== 0) {                                                      // 281
            module.verbose('Pre-existing popup found');                                                                // 283
            settings.inline = true;                                                                                    // 284
            settings.popup = $target.next(selector.popup).data(metadata.activator, $module);                           // 285
            module.refresh();                                                                                          // 286
                                                                                                                       //
            if (settings.hoverable) {                                                                                  // 287
              module.bind.popup();                                                                                     // 288
            }                                                                                                          // 289
          } else if (settings.popup) {                                                                                 // 290
            $(settings.popup).data(metadata.activator, $module);                                                       // 292
            module.verbose('Used popup specified in settings');                                                        // 293
            module.refresh();                                                                                          // 294
                                                                                                                       //
            if (settings.hoverable) {                                                                                  // 295
              module.bind.popup();                                                                                     // 296
            }                                                                                                          // 297
          } else {                                                                                                     // 298
            module.debug('No content specified skipping display', element);                                            // 300
          }                                                                                                            // 301
        },                                                                                                             // 302
        createID: function () {                                                                                        // 304
          id = (Math.random().toString(16) + '000000000').substr(2, 8);                                                // 305
          elementNamespace = '.' + id;                                                                                 // 306
          module.verbose('Creating unique id for element', id);                                                        // 307
        },                                                                                                             // 308
        // determines popup state                                                                                      // 310
        toggle: function () {                                                                                          // 311
          module.debug('Toggling pop-up');                                                                             // 312
                                                                                                                       //
          if (module.is.hidden()) {                                                                                    // 313
            module.debug('Popup is hidden, showing pop-up');                                                           // 314
            module.unbind.close();                                                                                     // 315
            module.show();                                                                                             // 316
          } else {                                                                                                     // 317
            module.debug('Popup is visible, hiding pop-up');                                                           // 319
            module.hide();                                                                                             // 320
          }                                                                                                            // 321
        },                                                                                                             // 322
        show: function (callback) {                                                                                    // 324
          callback = callback || function () {};                                                                       // 325
                                                                                                                       //
          module.debug('Showing pop-up', settings.transition);                                                         // 326
                                                                                                                       //
          if (module.is.hidden() && !(module.is.active() && module.is.dropdown())) {                                   // 327
            if (!module.exists()) {                                                                                    // 328
              module.create();                                                                                         // 329
            }                                                                                                          // 330
                                                                                                                       //
            if (settings.onShow.call($popup, element) === false) {                                                     // 331
              module.debug('onShow callback returned false, cancelling popup animation');                              // 332
              return;                                                                                                  // 333
            } else if (!settings.preserve && !settings.popup) {                                                        // 334
              module.refresh();                                                                                        // 336
            }                                                                                                          // 337
                                                                                                                       //
            if ($popup && module.set.position()) {                                                                     // 338
              module.save.conditions();                                                                                // 339
                                                                                                                       //
              if (settings.exclusive) {                                                                                // 340
                module.hideAll();                                                                                      // 341
              }                                                                                                        // 342
                                                                                                                       //
              module.animate.show(callback);                                                                           // 343
            }                                                                                                          // 344
          }                                                                                                            // 345
        },                                                                                                             // 346
        hide: function (callback) {                                                                                    // 349
          callback = callback || function () {};                                                                       // 350
                                                                                                                       //
          if (module.is.visible() || module.is.animating()) {                                                          // 351
            if (settings.onHide.call($popup, element) === false) {                                                     // 352
              module.debug('onHide callback returned false, cancelling popup animation');                              // 353
              return;                                                                                                  // 354
            }                                                                                                          // 355
                                                                                                                       //
            module.remove.visible();                                                                                   // 356
            module.unbind.close();                                                                                     // 357
            module.restore.conditions();                                                                               // 358
            module.animate.hide(callback);                                                                             // 359
          }                                                                                                            // 360
        },                                                                                                             // 361
        hideAll: function () {                                                                                         // 363
          $(selector.popup).filter('.' + className.visible).each(function () {                                         // 364
            $(this).data(metadata.activator).popup('hide');                                                            // 367
          });                                                                                                          // 371
        },                                                                                                             // 373
        exists: function () {                                                                                          // 374
          if (!$popup) {                                                                                               // 375
            return false;                                                                                              // 376
          }                                                                                                            // 377
                                                                                                                       //
          if (settings.inline || settings.popup) {                                                                     // 378
            return module.has.popup();                                                                                 // 379
          } else {                                                                                                     // 380
            return $popup.closest($context).length >= 1 ? true : false;                                                // 382
          }                                                                                                            // 386
        },                                                                                                             // 387
        removePopup: function () {                                                                                     // 389
          if (module.has.popup() && !settings.popup) {                                                                 // 390
            module.debug('Removing popup', $popup);                                                                    // 391
            $popup.remove();                                                                                           // 392
            $popup = undefined;                                                                                        // 393
            settings.onRemove.call($popup, element);                                                                   // 394
          }                                                                                                            // 395
        },                                                                                                             // 396
        save: {                                                                                                        // 398
          conditions: function () {                                                                                    // 399
            module.cache = {                                                                                           // 400
              title: $module.attr('title')                                                                             // 401
            };                                                                                                         // 400
                                                                                                                       //
            if (module.cache.title) {                                                                                  // 403
              $module.removeAttr('title');                                                                             // 404
            }                                                                                                          // 405
                                                                                                                       //
            module.verbose('Saving original attributes', module.cache.title);                                          // 406
          }                                                                                                            // 407
        },                                                                                                             // 398
        restore: {                                                                                                     // 409
          conditions: function () {                                                                                    // 410
            if (module.cache && module.cache.title) {                                                                  // 411
              $module.attr('title', module.cache.title);                                                               // 412
              module.verbose('Restoring original attributes', module.cache.title);                                     // 413
            }                                                                                                          // 414
                                                                                                                       //
            return true;                                                                                               // 415
          }                                                                                                            // 416
        },                                                                                                             // 409
        supports: {                                                                                                    // 418
          svg: function () {                                                                                           // 419
            return (typeof SVGGraphicsElement === "undefined" ? "undefined" : (0, _typeof3.default)(SVGGraphicsElement)) === undefined;
          }                                                                                                            // 421
        },                                                                                                             // 418
        animate: {                                                                                                     // 423
          show: function (callback) {                                                                                  // 424
            callback = $.isFunction(callback) ? callback : function () {};                                             // 425
                                                                                                                       //
            if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {          // 426
              module.set.visible();                                                                                    // 427
              $popup.transition({                                                                                      // 428
                animation: settings.transition + ' in',                                                                // 430
                queue: false,                                                                                          // 431
                debug: settings.debug,                                                                                 // 432
                verbose: settings.verbose,                                                                             // 433
                duration: settings.duration,                                                                           // 434
                onComplete: function () {                                                                              // 435
                  module.bind.close();                                                                                 // 436
                  callback.call($popup, element);                                                                      // 437
                  settings.onVisible.call($popup, element);                                                            // 438
                }                                                                                                      // 439
              });                                                                                                      // 429
            } else {                                                                                                   // 442
              module.error(error.noTransition);                                                                        // 444
            }                                                                                                          // 445
          },                                                                                                           // 446
          hide: function (callback) {                                                                                  // 447
            callback = $.isFunction(callback) ? callback : function () {};                                             // 448
            module.debug('Hiding pop-up');                                                                             // 449
                                                                                                                       //
            if (settings.onHide.call($popup, element) === false) {                                                     // 450
              module.debug('onHide callback returned false, cancelling popup animation');                              // 451
              return;                                                                                                  // 452
            }                                                                                                          // 453
                                                                                                                       //
            if (settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {          // 454
              $popup.transition({                                                                                      // 455
                animation: settings.transition + ' out',                                                               // 457
                queue: false,                                                                                          // 458
                duration: settings.duration,                                                                           // 459
                debug: settings.debug,                                                                                 // 460
                verbose: settings.verbose,                                                                             // 461
                onComplete: function () {                                                                              // 462
                  module.reset();                                                                                      // 463
                  callback.call($popup, element);                                                                      // 464
                  settings.onHidden.call($popup, element);                                                             // 465
                }                                                                                                      // 466
              });                                                                                                      // 456
            } else {                                                                                                   // 469
              module.error(error.noTransition);                                                                        // 471
            }                                                                                                          // 472
          }                                                                                                            // 473
        },                                                                                                             // 423
        change: {                                                                                                      // 476
          content: function (html) {                                                                                   // 477
            $popup.html(html);                                                                                         // 478
          }                                                                                                            // 479
        },                                                                                                             // 476
        get: {                                                                                                         // 482
          html: function () {                                                                                          // 483
            $module.removeData(metadata.html);                                                                         // 484
            return $module.data(metadata.html) || settings.html;                                                       // 485
          },                                                                                                           // 486
          title: function () {                                                                                         // 487
            $module.removeData(metadata.title);                                                                        // 488
            return $module.data(metadata.title) || settings.title;                                                     // 489
          },                                                                                                           // 490
          content: function () {                                                                                       // 491
            $module.removeData(metadata.content);                                                                      // 492
            return $module.data(metadata.content) || $module.attr('title') || settings.content;                        // 493
          },                                                                                                           // 494
          variation: function () {                                                                                     // 495
            $module.removeData(metadata.variation);                                                                    // 496
            return $module.data(metadata.variation) || settings.variation;                                             // 497
          },                                                                                                           // 498
          popup: function () {                                                                                         // 499
            return $popup;                                                                                             // 500
          },                                                                                                           // 501
          popupOffset: function () {                                                                                   // 502
            return $popup.offset();                                                                                    // 503
          },                                                                                                           // 504
          calculations: function () {                                                                                  // 505
            var targetElement = $target[0],                                                                            // 506
                isWindow = $boundary[0] == window,                                                                     // 506
                targetPosition = settings.inline || settings.popup && settings.movePopup ? $target.position() : $target.offset(),
                screenPosition = isWindow ? {                                                                          // 506
              top: 0,                                                                                                  // 513
              left: 0                                                                                                  // 513
            } : $boundary.offset(),                                                                                    // 513
                calculations = {},                                                                                     // 506
                scroll = isWindow ? {                                                                                  // 506
              top: $window.scrollTop(),                                                                                // 517
              left: $window.scrollLeft()                                                                               // 517
            } : {                                                                                                      // 517
              top: 0,                                                                                                  // 518
              left: 0                                                                                                  // 518
            },                                                                                                         // 518
                screen;                                                                                                // 506
            calculations = {                                                                                           // 521
              // element which is launching popup                                                                      // 522
              target: {                                                                                                // 523
                element: $target[0],                                                                                   // 524
                width: $target.outerWidth(),                                                                           // 525
                height: $target.outerHeight(),                                                                         // 526
                top: targetPosition.top,                                                                               // 527
                left: targetPosition.left,                                                                             // 528
                margin: {}                                                                                             // 529
              },                                                                                                       // 523
              // popup itself                                                                                          // 531
              popup: {                                                                                                 // 532
                width: $popup.outerWidth(),                                                                            // 533
                height: $popup.outerHeight()                                                                           // 534
              },                                                                                                       // 532
              // offset container (or 3d context)                                                                      // 536
              parent: {                                                                                                // 537
                width: $offsetParent.outerWidth(),                                                                     // 538
                height: $offsetParent.outerHeight()                                                                    // 539
              },                                                                                                       // 537
              // screen boundaries                                                                                     // 541
              screen: {                                                                                                // 542
                top: screenPosition.top,                                                                               // 543
                left: screenPosition.left,                                                                             // 544
                scroll: {                                                                                              // 545
                  top: scroll.top,                                                                                     // 546
                  left: scroll.left                                                                                    // 547
                },                                                                                                     // 545
                width: $boundary.width(),                                                                              // 549
                height: $boundary.height()                                                                             // 550
              }                                                                                                        // 542
            }; // add in container calcs if fluid                                                                      // 521
                                                                                                                       //
            if (settings.setFluidWidth && module.is.fluid()) {                                                         // 555
              calculations.container = {                                                                               // 556
                width: $popup.parent().outerWidth()                                                                    // 557
              };                                                                                                       // 556
              calculations.popup.width = calculations.container.width;                                                 // 559
            } // add in margins if inline                                                                              // 560
                                                                                                                       //
                                                                                                                       //
            calculations.target.margin.top = settings.inline ? parseInt(window.getComputedStyle(targetElement).getPropertyValue('margin-top'), 10) : 0;
            calculations.target.margin.left = settings.inline ? module.is.rtl() ? parseInt(window.getComputedStyle(targetElement).getPropertyValue('margin-right'), 10) : parseInt(window.getComputedStyle(targetElement).getPropertyValue('margin-left'), 10) : 0; // calculate screen boundaries
                                                                                                                       //
            screen = calculations.screen;                                                                              // 574
            calculations.boundary = {                                                                                  // 575
              top: screen.top + screen.scroll.top,                                                                     // 576
              bottom: screen.top + screen.scroll.top + screen.height,                                                  // 577
              left: screen.left + screen.scroll.left,                                                                  // 578
              right: screen.left + screen.scroll.left + screen.width                                                   // 579
            };                                                                                                         // 575
            return calculations;                                                                                       // 581
          },                                                                                                           // 582
          id: function () {                                                                                            // 583
            return id;                                                                                                 // 584
          },                                                                                                           // 585
          startEvent: function () {                                                                                    // 586
            if (settings.on == 'hover') {                                                                              // 587
              return 'mouseenter';                                                                                     // 588
            } else if (settings.on == 'focus') {                                                                       // 589
              return 'focus';                                                                                          // 591
            }                                                                                                          // 592
                                                                                                                       //
            return false;                                                                                              // 593
          },                                                                                                           // 594
          scrollEvent: function () {                                                                                   // 595
            return 'scroll';                                                                                           // 596
          },                                                                                                           // 597
          endEvent: function () {                                                                                      // 598
            if (settings.on == 'hover') {                                                                              // 599
              return 'mouseleave';                                                                                     // 600
            } else if (settings.on == 'focus') {                                                                       // 601
              return 'blur';                                                                                           // 603
            }                                                                                                          // 604
                                                                                                                       //
            return false;                                                                                              // 605
          },                                                                                                           // 606
          distanceFromBoundary: function (offset, calculations) {                                                      // 607
            var distanceFromBoundary = {},                                                                             // 608
                popup,                                                                                                 // 608
                boundary;                                                                                              // 608
            calculations = calculations || module.get.calculations(); // shorthand                                     // 613
                                                                                                                       //
            popup = calculations.popup;                                                                                // 616
            boundary = calculations.boundary;                                                                          // 617
                                                                                                                       //
            if (offset) {                                                                                              // 619
              distanceFromBoundary = {                                                                                 // 620
                top: offset.top - boundary.top,                                                                        // 621
                left: offset.left - boundary.left,                                                                     // 622
                right: boundary.right - (offset.left + popup.width),                                                   // 623
                bottom: boundary.bottom - (offset.top + popup.height)                                                  // 624
              };                                                                                                       // 620
              module.verbose('Distance from boundaries determined', offset, distanceFromBoundary);                     // 626
            }                                                                                                          // 627
                                                                                                                       //
            return distanceFromBoundary;                                                                               // 628
          },                                                                                                           // 629
          offsetParent: function ($target) {                                                                           // 630
            var element = $target !== undefined ? $target[0] : $module[0],                                             // 631
                parentNode = element.parentNode,                                                                       // 631
                $node = $(parentNode);                                                                                 // 631
                                                                                                                       //
            if (parentNode) {                                                                                          // 638
              var is2D = $node.css('transform') === 'none',                                                            // 639
                  isStatic = $node.css('position') === 'static',                                                       // 639
                  isHTML = $node.is('html');                                                                           // 639
                                                                                                                       //
              while (parentNode && !isHTML && isStatic && is2D) {                                                      // 644
                parentNode = parentNode.parentNode;                                                                    // 645
                $node = $(parentNode);                                                                                 // 646
                is2D = $node.css('transform') === 'none';                                                              // 647
                isStatic = $node.css('position') === 'static';                                                         // 648
                isHTML = $node.is('html');                                                                             // 649
              }                                                                                                        // 650
            }                                                                                                          // 651
                                                                                                                       //
            return $node && $node.length > 0 ? $node : $();                                                            // 652
          },                                                                                                           // 656
          positions: function () {                                                                                     // 657
            return {                                                                                                   // 658
              'top left': false,                                                                                       // 659
              'top center': false,                                                                                     // 660
              'top right': false,                                                                                      // 661
              'bottom left': false,                                                                                    // 662
              'bottom center': false,                                                                                  // 663
              'bottom right': false,                                                                                   // 664
              'left center': false,                                                                                    // 665
              'right center': false                                                                                    // 666
            };                                                                                                         // 658
          },                                                                                                           // 668
          nextPosition: function (position) {                                                                          // 669
            var positions = position.split(' '),                                                                       // 670
                verticalPosition = positions[0],                                                                       // 670
                horizontalPosition = positions[1],                                                                     // 670
                opposite = {                                                                                           // 670
              top: 'bottom',                                                                                           // 675
              bottom: 'top',                                                                                           // 676
              left: 'right',                                                                                           // 677
              right: 'left'                                                                                            // 678
            },                                                                                                         // 674
                adjacent = {                                                                                           // 670
              left: 'center',                                                                                          // 681
              center: 'right',                                                                                         // 682
              right: 'left'                                                                                            // 683
            },                                                                                                         // 680
                backup = {                                                                                             // 670
              'top left': 'top center',                                                                                // 686
              'top center': 'top right',                                                                               // 687
              'top right': 'right center',                                                                             // 688
              'right center': 'bottom right',                                                                          // 689
              'bottom right': 'bottom center',                                                                         // 690
              'bottom center': 'bottom left',                                                                          // 691
              'bottom left': 'left center',                                                                            // 692
              'left center': 'top left'                                                                                // 693
            },                                                                                                         // 685
                adjacentsAvailable = verticalPosition == 'top' || verticalPosition == 'bottom',                        // 670
                oppositeTried = false,                                                                                 // 670
                adjacentTried = false,                                                                                 // 670
                nextPosition = false;                                                                                  // 670
                                                                                                                       //
            if (!triedPositions) {                                                                                     // 700
              module.verbose('All available positions available');                                                     // 701
              triedPositions = module.get.positions();                                                                 // 702
            }                                                                                                          // 703
                                                                                                                       //
            module.debug('Recording last position tried', position);                                                   // 705
            triedPositions[position] = true;                                                                           // 706
                                                                                                                       //
            if (settings.prefer === 'opposite') {                                                                      // 708
              nextPosition = [opposite[verticalPosition], horizontalPosition];                                         // 709
              nextPosition = nextPosition.join(' ');                                                                   // 710
              oppositeTried = triedPositions[nextPosition] === true;                                                   // 711
              module.debug('Trying opposite strategy', nextPosition);                                                  // 712
            }                                                                                                          // 713
                                                                                                                       //
            if (settings.prefer === 'adjacent' && adjacentsAvailable) {                                                // 714
              nextPosition = [verticalPosition, adjacent[horizontalPosition]];                                         // 715
              nextPosition = nextPosition.join(' ');                                                                   // 716
              adjacentTried = triedPositions[nextPosition] === true;                                                   // 717
              module.debug('Trying adjacent strategy', nextPosition);                                                  // 718
            }                                                                                                          // 719
                                                                                                                       //
            if (adjacentTried || oppositeTried) {                                                                      // 720
              module.debug('Using backup position', nextPosition);                                                     // 721
              nextPosition = backup[position];                                                                         // 722
            }                                                                                                          // 723
                                                                                                                       //
            return nextPosition;                                                                                       // 724
          }                                                                                                            // 725
        },                                                                                                             // 482
        set: {                                                                                                         // 728
          position: function (position, calculations) {                                                                // 729
            // exit conditions                                                                                         // 731
            if ($target.length === 0 || $popup.length === 0) {                                                         // 732
              module.error(error.notFound);                                                                            // 733
              return;                                                                                                  // 734
            }                                                                                                          // 735
                                                                                                                       //
            var offset, distanceAway, target, popup, parent, positioning, popupOffset, distanceFromBoundary;           // 736
            calculations = calculations || module.get.calculations();                                                  // 747
            position = position || $module.data(metadata.position) || settings.position;                               // 748
            offset = $module.data(metadata.offset) || settings.offset;                                                 // 750
            distanceAway = settings.distanceAway; // shorthand                                                         // 751
                                                                                                                       //
            target = calculations.target;                                                                              // 754
            popup = calculations.popup;                                                                                // 755
            parent = calculations.parent;                                                                              // 756
                                                                                                                       //
            if (target.width === 0 && target.height === 0 && !module.is.svg(target.element)) {                         // 758
              module.debug('Popup target is hidden, no action taken');                                                 // 759
              return false;                                                                                            // 760
            }                                                                                                          // 761
                                                                                                                       //
            if (settings.inline) {                                                                                     // 763
              module.debug('Adding margin to calculation', target.margin);                                             // 764
                                                                                                                       //
              if (position == 'left center' || position == 'right center') {                                           // 765
                offset += target.margin.top;                                                                           // 766
                distanceAway += -target.margin.left;                                                                   // 767
              } else if (position == 'top left' || position == 'top center' || position == 'top right') {              // 768
                offset += target.margin.left;                                                                          // 770
                distanceAway -= target.margin.top;                                                                     // 771
              } else {                                                                                                 // 772
                offset += target.margin.left;                                                                          // 774
                distanceAway += target.margin.top;                                                                     // 775
              }                                                                                                        // 776
            }                                                                                                          // 777
                                                                                                                       //
            module.debug('Determining popup position from calculations', position, calculations);                      // 779
                                                                                                                       //
            if (module.is.rtl()) {                                                                                     // 781
              position = position.replace(/left|right/g, function (match) {                                            // 782
                return match == 'left' ? 'right' : 'left';                                                             // 783
              });                                                                                                      // 787
              module.debug('RTL: Popup position updated', position);                                                   // 788
            } // if last attempt use specified last resort position                                                    // 789
                                                                                                                       //
                                                                                                                       //
            if (searchDepth == settings.maxSearchDepth && typeof settings.lastResort === 'string') {                   // 792
              position = settings.lastResort;                                                                          // 793
            }                                                                                                          // 794
                                                                                                                       //
            switch (position) {                                                                                        // 796
              case 'top left':                                                                                         // 797
                positioning = {                                                                                        // 798
                  top: 'auto',                                                                                         // 799
                  bottom: parent.height - target.top + distanceAway,                                                   // 800
                  left: target.left + offset,                                                                          // 801
                  right: 'auto'                                                                                        // 802
                };                                                                                                     // 798
                break;                                                                                                 // 804
                                                                                                                       //
              case 'top center':                                                                                       // 805
                positioning = {                                                                                        // 806
                  bottom: parent.height - target.top + distanceAway,                                                   // 807
                  left: target.left + target.width / 2 - popup.width / 2 + offset,                                     // 808
                  top: 'auto',                                                                                         // 809
                  right: 'auto'                                                                                        // 810
                };                                                                                                     // 806
                break;                                                                                                 // 812
                                                                                                                       //
              case 'top right':                                                                                        // 813
                positioning = {                                                                                        // 814
                  bottom: parent.height - target.top + distanceAway,                                                   // 815
                  right: parent.width - target.left - target.width - offset,                                           // 816
                  top: 'auto',                                                                                         // 817
                  left: 'auto'                                                                                         // 818
                };                                                                                                     // 814
                break;                                                                                                 // 820
                                                                                                                       //
              case 'left center':                                                                                      // 821
                positioning = {                                                                                        // 822
                  top: target.top + target.height / 2 - popup.height / 2 + offset,                                     // 823
                  right: parent.width - target.left + distanceAway,                                                    // 824
                  left: 'auto',                                                                                        // 825
                  bottom: 'auto'                                                                                       // 826
                };                                                                                                     // 822
                break;                                                                                                 // 828
                                                                                                                       //
              case 'right center':                                                                                     // 829
                positioning = {                                                                                        // 830
                  top: target.top + target.height / 2 - popup.height / 2 + offset,                                     // 831
                  left: target.left + target.width + distanceAway,                                                     // 832
                  bottom: 'auto',                                                                                      // 833
                  right: 'auto'                                                                                        // 834
                };                                                                                                     // 830
                break;                                                                                                 // 836
                                                                                                                       //
              case 'bottom left':                                                                                      // 837
                positioning = {                                                                                        // 838
                  top: target.top + target.height + distanceAway,                                                      // 839
                  left: target.left + offset,                                                                          // 840
                  bottom: 'auto',                                                                                      // 841
                  right: 'auto'                                                                                        // 842
                };                                                                                                     // 838
                break;                                                                                                 // 844
                                                                                                                       //
              case 'bottom center':                                                                                    // 845
                positioning = {                                                                                        // 846
                  top: target.top + target.height + distanceAway,                                                      // 847
                  left: target.left + target.width / 2 - popup.width / 2 + offset,                                     // 848
                  bottom: 'auto',                                                                                      // 849
                  right: 'auto'                                                                                        // 850
                };                                                                                                     // 846
                break;                                                                                                 // 852
                                                                                                                       //
              case 'bottom right':                                                                                     // 853
                positioning = {                                                                                        // 854
                  top: target.top + target.height + distanceAway,                                                      // 855
                  right: parent.width - target.left - target.width - offset,                                           // 856
                  left: 'auto',                                                                                        // 857
                  bottom: 'auto'                                                                                       // 858
                };                                                                                                     // 854
                break;                                                                                                 // 860
            }                                                                                                          // 796
                                                                                                                       //
            if (positioning === undefined) {                                                                           // 862
              module.error(error.invalidPosition, position);                                                           // 863
            }                                                                                                          // 864
                                                                                                                       //
            module.debug('Calculated popup positioning values', positioning); // tentatively place on stage            // 866
                                                                                                                       //
            $popup.css(positioning).removeClass(className.position).addClass(position).addClass(className.loading);    // 869
            popupOffset = module.get.popupOffset(); // see if any boundaries are surpassed with this tentative position
                                                                                                                       //
            distanceFromBoundary = module.get.distanceFromBoundary(popupOffset, calculations);                         // 879
                                                                                                                       //
            if (module.is.offstage(distanceFromBoundary, position)) {                                                  // 881
              module.debug('Position is outside viewport', position);                                                  // 882
                                                                                                                       //
              if (searchDepth < settings.maxSearchDepth) {                                                             // 883
                searchDepth++;                                                                                         // 884
                position = module.get.nextPosition(position);                                                          // 885
                module.debug('Trying new position', position);                                                         // 886
                return $popup ? module.set.position(position, calculations) : false;                                   // 887
              } else {                                                                                                 // 891
                if (settings.lastResort) {                                                                             // 893
                  module.debug('No position found, showing with last position');                                       // 894
                } else {                                                                                               // 895
                  module.debug('Popup could not find a position to display', $popup);                                  // 897
                  module.error(error.cannotPlace, element);                                                            // 898
                  module.remove.attempts();                                                                            // 899
                  module.remove.loading();                                                                             // 900
                  module.reset();                                                                                      // 901
                  settings.onUnplaceable.call($popup, element);                                                        // 902
                  return false;                                                                                        // 903
                }                                                                                                      // 904
              }                                                                                                        // 905
            }                                                                                                          // 906
                                                                                                                       //
            module.debug('Position is on stage', position);                                                            // 907
            module.remove.attempts();                                                                                  // 908
            module.remove.loading();                                                                                   // 909
                                                                                                                       //
            if (settings.setFluidWidth && module.is.fluid()) {                                                         // 910
              module.set.fluidWidth(calculations);                                                                     // 911
            }                                                                                                          // 912
                                                                                                                       //
            return true;                                                                                               // 913
          },                                                                                                           // 914
          fluidWidth: function (calculations) {                                                                        // 916
            calculations = calculations || module.get.calculations();                                                  // 917
            module.debug('Automatically setting element width to parent width', calculations.parent.width);            // 918
            $popup.css('width', calculations.container.width);                                                         // 919
          },                                                                                                           // 920
          variation: function (variation) {                                                                            // 922
            variation = variation || module.get.variation();                                                           // 923
                                                                                                                       //
            if (variation && module.has.popup()) {                                                                     // 924
              module.verbose('Adding variation to popup', variation);                                                  // 925
              $popup.addClass(variation);                                                                              // 926
            }                                                                                                          // 927
          },                                                                                                           // 928
          visible: function () {                                                                                       // 930
            $module.addClass(className.visible);                                                                       // 931
          }                                                                                                            // 932
        },                                                                                                             // 728
        remove: {                                                                                                      // 935
          loading: function () {                                                                                       // 936
            $popup.removeClass(className.loading);                                                                     // 937
          },                                                                                                           // 938
          variation: function (variation) {                                                                            // 939
            variation = variation || module.get.variation();                                                           // 940
                                                                                                                       //
            if (variation) {                                                                                           // 941
              module.verbose('Removing variation', variation);                                                         // 942
              $popup.removeClass(variation);                                                                           // 943
            }                                                                                                          // 944
          },                                                                                                           // 945
          visible: function () {                                                                                       // 946
            $module.removeClass(className.visible);                                                                    // 947
          },                                                                                                           // 948
          attempts: function () {                                                                                      // 949
            module.verbose('Resetting all searched positions');                                                        // 950
            searchDepth = 0;                                                                                           // 951
            triedPositions = false;                                                                                    // 952
          }                                                                                                            // 953
        },                                                                                                             // 935
        bind: {                                                                                                        // 956
          events: function () {                                                                                        // 957
            module.debug('Binding popup events to module');                                                            // 958
                                                                                                                       //
            if (settings.on == 'click') {                                                                              // 959
              $module.on('click' + eventNamespace, module.toggle);                                                     // 960
            }                                                                                                          // 963
                                                                                                                       //
            if (settings.on == 'hover' && hasTouch) {                                                                  // 964
              $module.on('touchstart' + eventNamespace, module.event.touchstart);                                      // 965
            }                                                                                                          // 968
                                                                                                                       //
            if (module.get.startEvent()) {                                                                             // 969
              $module.on(module.get.startEvent() + eventNamespace, module.event.start).on(module.get.endEvent() + eventNamespace, module.event.end);
            }                                                                                                          // 974
                                                                                                                       //
            if (settings.target) {                                                                                     // 975
              module.debug('Target set to element', $target);                                                          // 976
            }                                                                                                          // 977
                                                                                                                       //
            $window.on('resize' + elementNamespace, module.event.resize);                                              // 978
          },                                                                                                           // 979
          popup: function () {                                                                                         // 980
            module.verbose('Allowing hover events on popup to prevent closing');                                       // 981
                                                                                                                       //
            if ($popup && module.has.popup()) {                                                                        // 982
              $popup.on('mouseenter' + eventNamespace, module.event.start).on('mouseleave' + eventNamespace, module.event.end);
            }                                                                                                          // 987
          },                                                                                                           // 988
          close: function () {                                                                                         // 989
            if (settings.hideOnScroll === true || settings.hideOnScroll == 'auto' && settings.on != 'click') {         // 990
              $scrollContext.one(module.get.scrollEvent() + elementNamespace, module.event.hideGracefully);            // 991
            }                                                                                                          // 994
                                                                                                                       //
            if (settings.on == 'hover' && openedWithTouch) {                                                           // 995
              module.verbose('Binding popup close event to document');                                                 // 996
              $document.on('touchstart' + elementNamespace, function (event) {                                         // 997
                module.verbose('Touched away from popup');                                                             // 999
                module.event.hideGracefully.call(element, event);                                                      // 1000
              });                                                                                                      // 1001
            }                                                                                                          // 1003
                                                                                                                       //
            if (settings.on == 'click' && settings.closable) {                                                         // 1004
              module.verbose('Binding popup close event to document');                                                 // 1005
              $document.on('click' + elementNamespace, function (event) {                                              // 1006
                module.verbose('Clicked away from popup');                                                             // 1008
                module.event.hideGracefully.call(element, event);                                                      // 1009
              });                                                                                                      // 1010
            }                                                                                                          // 1012
          }                                                                                                            // 1013
        },                                                                                                             // 956
        unbind: {                                                                                                      // 1016
          events: function () {                                                                                        // 1017
            $window.off(elementNamespace);                                                                             // 1018
            $module.off(eventNamespace);                                                                               // 1021
          },                                                                                                           // 1024
          close: function () {                                                                                         // 1025
            $document.off(elementNamespace);                                                                           // 1026
            $scrollContext.off(elementNamespace);                                                                      // 1029
          }                                                                                                            // 1032
        },                                                                                                             // 1016
        has: {                                                                                                         // 1035
          popup: function () {                                                                                         // 1036
            return $popup && $popup.length > 0;                                                                        // 1037
          }                                                                                                            // 1038
        },                                                                                                             // 1035
        is: {                                                                                                          // 1041
          offstage: function (distanceFromBoundary, position) {                                                        // 1042
            var offstage = []; // return boundaries that have been surpassed                                           // 1043
                                                                                                                       //
            $.each(distanceFromBoundary, function (direction, distance) {                                              // 1047
              if (distance < -settings.jitter) {                                                                       // 1048
                module.debug('Position exceeds allowable distance from edge', direction, distance, position);          // 1049
                offstage.push(direction);                                                                              // 1050
              }                                                                                                        // 1051
            });                                                                                                        // 1052
                                                                                                                       //
            if (offstage.length > 0) {                                                                                 // 1053
              return true;                                                                                             // 1054
            } else {                                                                                                   // 1055
              return false;                                                                                            // 1057
            }                                                                                                          // 1058
          },                                                                                                           // 1059
          svg: function (element) {                                                                                    // 1060
            return module.supports.svg() && element instanceof SVGGraphicsElement;                                     // 1061
          },                                                                                                           // 1062
          active: function () {                                                                                        // 1063
            return $module.hasClass(className.active);                                                                 // 1064
          },                                                                                                           // 1065
          animating: function () {                                                                                     // 1066
            return $popup !== undefined && $popup.hasClass(className.animating);                                       // 1067
          },                                                                                                           // 1068
          fluid: function () {                                                                                         // 1069
            return $popup !== undefined && $popup.hasClass(className.fluid);                                           // 1070
          },                                                                                                           // 1071
          visible: function () {                                                                                       // 1072
            return $popup !== undefined && $popup.hasClass(className.visible);                                         // 1073
          },                                                                                                           // 1074
          dropdown: function () {                                                                                      // 1075
            return $module.hasClass(className.dropdown);                                                               // 1076
          },                                                                                                           // 1077
          hidden: function () {                                                                                        // 1078
            return !module.is.visible();                                                                               // 1079
          },                                                                                                           // 1080
          rtl: function () {                                                                                           // 1081
            return $module.css('direction') == 'rtl';                                                                  // 1082
          }                                                                                                            // 1083
        },                                                                                                             // 1041
        reset: function () {                                                                                           // 1086
          module.remove.visible();                                                                                     // 1087
                                                                                                                       //
          if (settings.preserve) {                                                                                     // 1088
            if ($.fn.transition !== undefined) {                                                                       // 1089
              $popup.transition('remove transition');                                                                  // 1090
            }                                                                                                          // 1093
          } else {                                                                                                     // 1094
            module.removePopup();                                                                                      // 1096
          }                                                                                                            // 1097
        },                                                                                                             // 1098
        setting: function (name, value) {                                                                              // 1100
          if ($.isPlainObject(name)) {                                                                                 // 1101
            $.extend(true, settings, name);                                                                            // 1102
          } else if (value !== undefined) {                                                                            // 1103
            settings[name] = value;                                                                                    // 1105
          } else {                                                                                                     // 1106
            return settings[name];                                                                                     // 1108
          }                                                                                                            // 1109
        },                                                                                                             // 1110
        internal: function (name, value) {                                                                             // 1111
          if ($.isPlainObject(name)) {                                                                                 // 1112
            $.extend(true, module, name);                                                                              // 1113
          } else if (value !== undefined) {                                                                            // 1114
            module[name] = value;                                                                                      // 1116
          } else {                                                                                                     // 1117
            return module[name];                                                                                       // 1119
          }                                                                                                            // 1120
        },                                                                                                             // 1121
        debug: function () {                                                                                           // 1122
          if (!settings.silent && settings.debug) {                                                                    // 1123
            if (settings.performance) {                                                                                // 1124
              module.performance.log(arguments);                                                                       // 1125
            } else {                                                                                                   // 1126
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 1128
              module.debug.apply(console, arguments);                                                                  // 1129
            }                                                                                                          // 1130
          }                                                                                                            // 1131
        },                                                                                                             // 1132
        verbose: function () {                                                                                         // 1133
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 1134
            if (settings.performance) {                                                                                // 1135
              module.performance.log(arguments);                                                                       // 1136
            } else {                                                                                                   // 1137
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 1139
              module.verbose.apply(console, arguments);                                                                // 1140
            }                                                                                                          // 1141
          }                                                                                                            // 1142
        },                                                                                                             // 1143
        error: function () {                                                                                           // 1144
          if (!settings.silent) {                                                                                      // 1145
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 1146
            module.error.apply(console, arguments);                                                                    // 1147
          }                                                                                                            // 1148
        },                                                                                                             // 1149
        performance: {                                                                                                 // 1150
          log: function (message) {                                                                                    // 1151
            var currentTime, executionTime, previousTime;                                                              // 1152
                                                                                                                       //
            if (settings.performance) {                                                                                // 1157
              currentTime = new Date().getTime();                                                                      // 1158
              previousTime = time || currentTime;                                                                      // 1159
              executionTime = currentTime - previousTime;                                                              // 1160
              time = currentTime;                                                                                      // 1161
              performance.push({                                                                                       // 1162
                'Name': message[0],                                                                                    // 1163
                'Arguments': [].slice.call(message, 1) || '',                                                          // 1164
                'Element': element,                                                                                    // 1165
                'Execution Time': executionTime                                                                        // 1166
              });                                                                                                      // 1162
            }                                                                                                          // 1168
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 1169
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 1170
          },                                                                                                           // 1171
          display: function () {                                                                                       // 1172
            var title = settings.name + ':',                                                                           // 1173
                totalTime = 0;                                                                                         // 1173
            time = false;                                                                                              // 1177
            clearTimeout(module.performance.timer);                                                                    // 1178
            $.each(performance, function (index, data) {                                                               // 1179
              totalTime += data['Execution Time'];                                                                     // 1180
            });                                                                                                        // 1181
            title += ' ' + totalTime + 'ms';                                                                           // 1182
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 1183
              title += ' \'' + moduleSelector + '\'';                                                                  // 1184
            }                                                                                                          // 1185
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 1186
              console.groupCollapsed(title);                                                                           // 1187
                                                                                                                       //
              if (console.table) {                                                                                     // 1188
                console.table(performance);                                                                            // 1189
              } else {                                                                                                 // 1190
                $.each(performance, function (index, data) {                                                           // 1192
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 1193
                });                                                                                                    // 1194
              }                                                                                                        // 1195
                                                                                                                       //
              console.groupEnd();                                                                                      // 1196
            }                                                                                                          // 1197
                                                                                                                       //
            performance = [];                                                                                          // 1198
          }                                                                                                            // 1199
        },                                                                                                             // 1150
        invoke: function (query, passedArguments, context) {                                                           // 1201
          var object = instance,                                                                                       // 1202
              maxDepth,                                                                                                // 1202
              found,                                                                                                   // 1202
              response;                                                                                                // 1202
          passedArguments = passedArguments || queryArguments;                                                         // 1208
          context = element || context;                                                                                // 1209
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 1210
            query = query.split(/[\. ]/);                                                                              // 1211
            maxDepth = query.length - 1;                                                                               // 1212
            $.each(query, function (depth, value) {                                                                    // 1213
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 1218
                object = object[camelCaseValue];                                                                       // 1219
              } else if (object[camelCaseValue] !== undefined) {                                                       // 1220
                found = object[camelCaseValue];                                                                        // 1222
                return false;                                                                                          // 1223
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 1224
                object = object[value];                                                                                // 1226
              } else if (object[value] !== undefined) {                                                                // 1227
                found = object[value];                                                                                 // 1229
                return false;                                                                                          // 1230
              } else {                                                                                                 // 1231
                return false;                                                                                          // 1233
              }                                                                                                        // 1234
            });                                                                                                        // 1235
          }                                                                                                            // 1236
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 1237
            response = found.apply(context, passedArguments);                                                          // 1238
          } else if (found !== undefined) {                                                                            // 1239
            response = found;                                                                                          // 1241
          }                                                                                                            // 1242
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 1243
            returnedValue.push(response);                                                                              // 1244
          } else if (returnedValue !== undefined) {                                                                    // 1245
            returnedValue = [returnedValue, response];                                                                 // 1247
          } else if (response !== undefined) {                                                                         // 1248
            returnedValue = response;                                                                                  // 1250
          }                                                                                                            // 1251
                                                                                                                       //
          return found;                                                                                                // 1252
        }                                                                                                              // 1253
      };                                                                                                               // 85
                                                                                                                       //
      if (methodInvoked) {                                                                                             // 1256
        if (instance === undefined) {                                                                                  // 1257
          module.initialize();                                                                                         // 1258
        }                                                                                                              // 1259
                                                                                                                       //
        module.invoke(query);                                                                                          // 1260
      } else {                                                                                                         // 1261
        if (instance !== undefined) {                                                                                  // 1263
          instance.invoke('destroy');                                                                                  // 1264
        }                                                                                                              // 1265
                                                                                                                       //
        module.initialize();                                                                                           // 1266
      }                                                                                                                // 1267
    });                                                                                                                // 1268
    return returnedValue !== undefined ? returnedValue : this;                                                         // 1271
  };                                                                                                                   // 1275
                                                                                                                       //
  $.fn.popup.settings = {                                                                                              // 1277
    name: 'Popup',                                                                                                     // 1279
    // module settings                                                                                                 // 1281
    silent: false,                                                                                                     // 1282
    debug: false,                                                                                                      // 1283
    verbose: false,                                                                                                    // 1284
    performance: true,                                                                                                 // 1285
    namespace: 'popup',                                                                                                // 1286
    // whether it should use dom mutation observers                                                                    // 1288
    observeChanges: true,                                                                                              // 1289
    // callback only when element added to dom                                                                         // 1291
    onCreate: function () {},                                                                                          // 1292
    // callback before element removed from dom                                                                        // 1294
    onRemove: function () {},                                                                                          // 1295
    // callback before show animation                                                                                  // 1297
    onShow: function () {},                                                                                            // 1298
    // callback after show animation                                                                                   // 1300
    onVisible: function () {},                                                                                         // 1301
    // callback before hide animation                                                                                  // 1303
    onHide: function () {},                                                                                            // 1304
    // callback when popup cannot be positioned in visible screen                                                      // 1306
    onUnplaceable: function () {},                                                                                     // 1307
    // callback after hide animation                                                                                   // 1309
    onHidden: function () {},                                                                                          // 1310
    // when to show popup                                                                                              // 1312
    on: 'hover',                                                                                                       // 1313
    // element to use to determine if popup is out of boundary                                                         // 1315
    boundary: window,                                                                                                  // 1316
    // whether to add touchstart events when using hover                                                               // 1318
    addTouchEvents: true,                                                                                              // 1319
    // default position relative to element                                                                            // 1321
    position: 'top left',                                                                                              // 1322
    // name of variation to use                                                                                        // 1324
    variation: '',                                                                                                     // 1325
    // whether popup should be moved to context                                                                        // 1327
    movePopup: true,                                                                                                   // 1328
    // element which popup should be relative to                                                                       // 1330
    target: false,                                                                                                     // 1331
    // jq selector or element that should be used as popup                                                             // 1333
    popup: false,                                                                                                      // 1334
    // popup should remain inline next to activator                                                                    // 1336
    inline: false,                                                                                                     // 1337
    // popup should be removed from page on hide                                                                       // 1339
    preserve: false,                                                                                                   // 1340
    // popup should not close when being hovered on                                                                    // 1342
    hoverable: false,                                                                                                  // 1343
    // explicitly set content                                                                                          // 1345
    content: false,                                                                                                    // 1346
    // explicitly set html                                                                                             // 1348
    html: false,                                                                                                       // 1349
    // explicitly set title                                                                                            // 1351
    title: false,                                                                                                      // 1352
    // whether automatically close on clickaway when on click                                                          // 1354
    closable: true,                                                                                                    // 1355
    // automatically hide on scroll                                                                                    // 1357
    hideOnScroll: 'auto',                                                                                              // 1358
    // hide other popups on show                                                                                       // 1360
    exclusive: false,                                                                                                  // 1361
    // context to attach popups                                                                                        // 1363
    context: 'body',                                                                                                   // 1364
    // context for binding scroll events                                                                               // 1366
    scrollContext: window,                                                                                             // 1367
    // position to prefer when calculating new position                                                                // 1369
    prefer: 'opposite',                                                                                                // 1370
    // specify position to appear even if it doesn't fit                                                               // 1372
    lastResort: false,                                                                                                 // 1373
    // delay used to prevent accidental refiring of animations due to user error                                       // 1375
    delay: {                                                                                                           // 1376
      show: 50,                                                                                                        // 1377
      hide: 70                                                                                                         // 1378
    },                                                                                                                 // 1376
    // whether fluid variation should assign width explicitly                                                          // 1381
    setFluidWidth: true,                                                                                               // 1382
    // transition settings                                                                                             // 1384
    duration: 200,                                                                                                     // 1385
    transition: 'scale',                                                                                               // 1386
    // distance away from activating element in px                                                                     // 1388
    distanceAway: 0,                                                                                                   // 1389
    // number of pixels an element is allowed to be "offstage" for a position to be chosen (allows for rounding)       // 1391
    jitter: 2,                                                                                                         // 1392
    // offset on aligning axis from calculated position                                                                // 1394
    offset: 0,                                                                                                         // 1395
    // maximum times to look for a position before failing (9 positions total)                                         // 1397
    maxSearchDepth: 15,                                                                                                // 1398
    error: {                                                                                                           // 1400
      invalidPosition: 'The position you specified is not a valid position',                                           // 1401
      cannotPlace: 'Popup does not fit within the boundaries of the viewport',                                         // 1402
      method: 'The method you called is not defined.',                                                                 // 1403
      noTransition: 'This module requires ui transitions <https://github.com/Semantic-Org/UI-Transition>',             // 1404
      notFound: 'The target or popup you specified does not exist on the page'                                         // 1405
    },                                                                                                                 // 1400
    metadata: {                                                                                                        // 1408
      activator: 'activator',                                                                                          // 1409
      content: 'content',                                                                                              // 1410
      html: 'html',                                                                                                    // 1411
      offset: 'offset',                                                                                                // 1412
      position: 'position',                                                                                            // 1413
      title: 'title',                                                                                                  // 1414
      variation: 'variation'                                                                                           // 1415
    },                                                                                                                 // 1408
    className: {                                                                                                       // 1418
      active: 'active',                                                                                                // 1419
      animating: 'animating',                                                                                          // 1420
      dropdown: 'dropdown',                                                                                            // 1421
      fluid: 'fluid',                                                                                                  // 1422
      loading: 'loading',                                                                                              // 1423
      popup: 'ui popup',                                                                                               // 1424
      position: 'top left center bottom right',                                                                        // 1425
      visible: 'visible'                                                                                               // 1426
    },                                                                                                                 // 1418
    selector: {                                                                                                        // 1429
      popup: '.ui.popup'                                                                                               // 1430
    },                                                                                                                 // 1429
    templates: {                                                                                                       // 1433
      escape: function (string) {                                                                                      // 1434
        var badChars = /[&<>"'`]/g,                                                                                    // 1435
            shouldEscape = /[&<>"'`]/,                                                                                 // 1435
            escape = {                                                                                                 // 1435
          "&": "&amp;",                                                                                                // 1439
          "<": "&lt;",                                                                                                 // 1440
          ">": "&gt;",                                                                                                 // 1441
          '"': "&quot;",                                                                                               // 1442
          "'": "&#x27;",                                                                                               // 1443
          "`": "&#x60;"                                                                                                // 1444
        },                                                                                                             // 1438
            escapedChar = function (chr) {                                                                             // 1435
          return escape[chr];                                                                                          // 1447
        };                                                                                                             // 1448
                                                                                                                       //
        if (shouldEscape.test(string)) {                                                                               // 1450
          return string.replace(badChars, escapedChar);                                                                // 1451
        }                                                                                                              // 1452
                                                                                                                       //
        return string;                                                                                                 // 1453
      },                                                                                                               // 1454
      popup: function (text) {                                                                                         // 1455
        var html = '',                                                                                                 // 1456
            escape = $.fn.popup.settings.templates.escape;                                                             // 1456
                                                                                                                       //
        if ((typeof text === "undefined" ? "undefined" : (0, _typeof3.default)(text)) !== undefined) {                 // 1460
          if ((0, _typeof3.default)(text.title) !== undefined && text.title) {                                         // 1461
            text.title = escape(text.title);                                                                           // 1462
            html += '<div class="header">' + text.title + '</div>';                                                    // 1463
          }                                                                                                            // 1464
                                                                                                                       //
          if ((0, _typeof3.default)(text.content) !== undefined && text.content) {                                     // 1465
            text.content = escape(text.content);                                                                       // 1466
            html += '<div class="content">' + text.content + '</div>';                                                 // 1467
          }                                                                                                            // 1468
        }                                                                                                              // 1469
                                                                                                                       //
        return html;                                                                                                   // 1470
      }                                                                                                                // 1471
    }                                                                                                                  // 1433
  };                                                                                                                   // 1277
})(jQuery, window, document);                                                                                          // 1477
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"progress.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/modules/progress.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Progress                                                                                         //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
  var global = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.progress = function (parameters) {                                                                              // 34
    var $allModules = $(this),                                                                                         // 35
        moduleSelector = $allModules.selector || '',                                                                   // 35
        time = new Date().getTime(),                                                                                   // 35
        performance = [],                                                                                              // 35
        query = arguments[0],                                                                                          // 35
        methodInvoked = typeof query == 'string',                                                                      // 35
        queryArguments = [].slice.call(arguments, 1),                                                                  // 35
        returnedValue;                                                                                                 // 35
    $allModules.each(function () {                                                                                     // 50
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.progress.settings, parameters) : $.extend({}, $.fn.progress.settings),
          className = settings.className,                                                                              // 52
          metadata = settings.metadata,                                                                                // 52
          namespace = settings.namespace,                                                                              // 52
          selector = settings.selector,                                                                                // 52
          error = settings.error,                                                                                      // 52
          eventNamespace = '.' + namespace,                                                                            // 52
          moduleNamespace = 'module-' + namespace,                                                                     // 52
          $module = $(this),                                                                                           // 52
          $bar = $(this).find(selector.bar),                                                                           // 52
          $progress = $(this).find(selector.progress),                                                                 // 52
          $label = $(this).find(selector.label),                                                                       // 52
          element = this,                                                                                              // 52
          instance = $module.data(moduleNamespace),                                                                    // 52
          animating = false,                                                                                           // 52
          transitionEnd,                                                                                               // 52
          module;                                                                                                      // 52
      module = {                                                                                                       // 79
        initialize: function () {                                                                                      // 81
          module.debug('Initializing progress bar', settings);                                                         // 82
          module.set.duration();                                                                                       // 84
          module.set.transitionEvent();                                                                                // 85
          module.read.metadata();                                                                                      // 87
          module.read.settings();                                                                                      // 88
          module.instantiate();                                                                                        // 90
        },                                                                                                             // 91
        instantiate: function () {                                                                                     // 93
          module.verbose('Storing instance of progress', module);                                                      // 94
          instance = module;                                                                                           // 95
          $module.data(moduleNamespace, module);                                                                       // 96
        },                                                                                                             // 99
        destroy: function () {                                                                                         // 100
          module.verbose('Destroying previous progress for', $module);                                                 // 101
          clearInterval(instance.interval);                                                                            // 102
          module.remove.state();                                                                                       // 103
          $module.removeData(moduleNamespace);                                                                         // 104
          instance = undefined;                                                                                        // 105
        },                                                                                                             // 106
        reset: function () {                                                                                           // 108
          module.remove.nextValue();                                                                                   // 109
          module.update.progress(0);                                                                                   // 110
        },                                                                                                             // 111
        complete: function () {                                                                                        // 113
          if (module.percent === undefined || module.percent < 100) {                                                  // 114
            module.remove.progressPoll();                                                                              // 115
            module.set.percent(100);                                                                                   // 116
          }                                                                                                            // 117
        },                                                                                                             // 118
        read: {                                                                                                        // 120
          metadata: function () {                                                                                      // 121
            var data = {                                                                                               // 122
              percent: $module.data(metadata.percent),                                                                 // 124
              total: $module.data(metadata.total),                                                                     // 125
              value: $module.data(metadata.value)                                                                      // 126
            };                                                                                                         // 123
                                                                                                                       //
            if (data.percent) {                                                                                        // 129
              module.debug('Current percent value set from metadata', data.percent);                                   // 130
              module.set.percent(data.percent);                                                                        // 131
            }                                                                                                          // 132
                                                                                                                       //
            if (data.total) {                                                                                          // 133
              module.debug('Total value set from metadata', data.total);                                               // 134
              module.set.total(data.total);                                                                            // 135
            }                                                                                                          // 136
                                                                                                                       //
            if (data.value) {                                                                                          // 137
              module.debug('Current value set from metadata', data.value);                                             // 138
              module.set.value(data.value);                                                                            // 139
              module.set.progress(data.value);                                                                         // 140
            }                                                                                                          // 141
          },                                                                                                           // 142
          settings: function () {                                                                                      // 143
            if (settings.total !== false) {                                                                            // 144
              module.debug('Current total set in settings', settings.total);                                           // 145
              module.set.total(settings.total);                                                                        // 146
            }                                                                                                          // 147
                                                                                                                       //
            if (settings.value !== false) {                                                                            // 148
              module.debug('Current value set in settings', settings.value);                                           // 149
              module.set.value(settings.value);                                                                        // 150
              module.set.progress(module.value);                                                                       // 151
            }                                                                                                          // 152
                                                                                                                       //
            if (settings.percent !== false) {                                                                          // 153
              module.debug('Current percent set in settings', settings.percent);                                       // 154
              module.set.percent(settings.percent);                                                                    // 155
            }                                                                                                          // 156
          }                                                                                                            // 157
        },                                                                                                             // 120
        increment: function (incrementValue) {                                                                         // 160
          var maxValue, startValue, newValue;                                                                          // 161
                                                                                                                       //
          if (module.has.total()) {                                                                                    // 166
            startValue = module.get.value();                                                                           // 167
            incrementValue = incrementValue || 1;                                                                      // 168
            newValue = startValue + incrementValue;                                                                    // 169
          } else {                                                                                                     // 170
            startValue = module.get.percent();                                                                         // 172
            incrementValue = incrementValue || module.get.randomValue();                                               // 173
            newValue = startValue + incrementValue;                                                                    // 175
            maxValue = 100;                                                                                            // 176
            module.debug('Incrementing percentage by', startValue, newValue);                                          // 177
          }                                                                                                            // 178
                                                                                                                       //
          newValue = module.get.normalizedValue(newValue);                                                             // 179
          module.set.progress(newValue);                                                                               // 180
        },                                                                                                             // 181
        decrement: function (decrementValue) {                                                                         // 182
          var total = module.get.total(),                                                                              // 183
              startValue,                                                                                              // 183
              newValue;                                                                                                // 183
                                                                                                                       //
          if (total) {                                                                                                 // 188
            startValue = module.get.value();                                                                           // 189
            decrementValue = decrementValue || 1;                                                                      // 190
            newValue = startValue - decrementValue;                                                                    // 191
            module.debug('Decrementing value by', decrementValue, startValue);                                         // 192
          } else {                                                                                                     // 193
            startValue = module.get.percent();                                                                         // 195
            decrementValue = decrementValue || module.get.randomValue();                                               // 196
            newValue = startValue - decrementValue;                                                                    // 197
            module.debug('Decrementing percentage by', decrementValue, startValue);                                    // 198
          }                                                                                                            // 199
                                                                                                                       //
          newValue = module.get.normalizedValue(newValue);                                                             // 200
          module.set.progress(newValue);                                                                               // 201
        },                                                                                                             // 202
        has: {                                                                                                         // 204
          progressPoll: function () {                                                                                  // 205
            return module.progressPoll;                                                                                // 206
          },                                                                                                           // 207
          total: function () {                                                                                         // 208
            return module.get.total() !== false;                                                                       // 209
          }                                                                                                            // 210
        },                                                                                                             // 204
        get: {                                                                                                         // 213
          text: function (templateText) {                                                                              // 214
            var value = module.value || 0,                                                                             // 215
                total = module.total || 0,                                                                             // 215
                percent = animating ? module.get.displayPercent() : module.percent || 0,                               // 215
                left = module.total > 0 ? total - value : 100 - percent;                                               // 215
            templateText = templateText || '';                                                                         // 225
            templateText = templateText.replace('{value}', value).replace('{total}', total).replace('{left}', left).replace('{percent}', percent);
            module.verbose('Adding variables to progress bar text', templateText);                                     // 232
            return templateText;                                                                                       // 233
          },                                                                                                           // 234
          normalizedValue: function (value) {                                                                          // 236
            if (value < 0) {                                                                                           // 237
              module.debug('Value cannot decrement below 0');                                                          // 238
              return 0;                                                                                                // 239
            }                                                                                                          // 240
                                                                                                                       //
            if (module.has.total()) {                                                                                  // 241
              if (value > module.total) {                                                                              // 242
                module.debug('Value cannot increment above total', module.total);                                      // 243
                return module.total;                                                                                   // 244
              }                                                                                                        // 245
            } else if (value > 100) {                                                                                  // 246
              module.debug('Value cannot increment above 100 percent');                                                // 248
              return 100;                                                                                              // 249
            }                                                                                                          // 250
                                                                                                                       //
            return value;                                                                                              // 251
          },                                                                                                           // 252
          updateInterval: function () {                                                                                // 254
            if (settings.updateInterval == 'auto') {                                                                   // 255
              return settings.duration;                                                                                // 256
            }                                                                                                          // 257
                                                                                                                       //
            return settings.updateInterval;                                                                            // 258
          },                                                                                                           // 259
          randomValue: function () {                                                                                   // 261
            module.debug('Generating random increment percentage');                                                    // 262
            return Math.floor(Math.random() * settings.random.max + settings.random.min);                              // 263
          },                                                                                                           // 264
          numericValue: function (value) {                                                                             // 266
            return typeof value === 'string' ? value.replace(/[^\d.]/g, '') !== '' ? +value.replace(/[^\d.]/g, '') : false : value;
          },                                                                                                           // 273
          transitionEnd: function () {                                                                                 // 275
            var element = document.createElement('element'),                                                           // 276
                transitions = {                                                                                        // 276
              'transition': 'transitionend',                                                                           // 279
              'OTransition': 'oTransitionEnd',                                                                         // 280
              'MozTransition': 'transitionend',                                                                        // 281
              'WebkitTransition': 'webkitTransitionEnd'                                                                // 282
            },                                                                                                         // 278
                transition;                                                                                            // 276
                                                                                                                       //
            for (transition in meteorBabelHelpers.sanitizeForInObject(transitions)) {                                  // 286
              if (element.style[transition] !== undefined) {                                                           // 287
                return transitions[transition];                                                                        // 288
              }                                                                                                        // 289
            }                                                                                                          // 290
          },                                                                                                           // 291
          // gets current displayed percentage (if animating values this is the intermediary value)                    // 293
          displayPercent: function () {                                                                                // 294
            var barWidth = $bar.width(),                                                                               // 295
                totalWidth = $module.width(),                                                                          // 295
                minDisplay = parseInt($bar.css('min-width'), 10),                                                      // 295
                displayPercent = barWidth > minDisplay ? barWidth / totalWidth * 100 : module.percent;                 // 295
            return settings.precision > 0 ? Math.round(displayPercent * (10 * settings.precision)) / (10 * settings.precision) : Math.round(displayPercent);
          },                                                                                                           // 307
          percent: function () {                                                                                       // 309
            return module.percent || 0;                                                                                // 310
          },                                                                                                           // 311
          value: function () {                                                                                         // 312
            return module.nextValue || module.value || 0;                                                              // 313
          },                                                                                                           // 314
          total: function () {                                                                                         // 315
            return module.total || false;                                                                              // 316
          }                                                                                                            // 317
        },                                                                                                             // 213
        create: {                                                                                                      // 320
          progressPoll: function () {                                                                                  // 321
            module.progressPoll = setTimeout(function () {                                                             // 322
              module.update.toNextValue();                                                                             // 323
              module.remove.progressPoll();                                                                            // 324
            }, module.get.updateInterval());                                                                           // 325
          }                                                                                                            // 326
        },                                                                                                             // 320
        is: {                                                                                                          // 329
          complete: function () {                                                                                      // 330
            return module.is.success() || module.is.warning() || module.is.error();                                    // 331
          },                                                                                                           // 332
          success: function () {                                                                                       // 333
            return $module.hasClass(className.success);                                                                // 334
          },                                                                                                           // 335
          warning: function () {                                                                                       // 336
            return $module.hasClass(className.warning);                                                                // 337
          },                                                                                                           // 338
          error: function () {                                                                                         // 339
            return $module.hasClass(className.error);                                                                  // 340
          },                                                                                                           // 341
          active: function () {                                                                                        // 342
            return $module.hasClass(className.active);                                                                 // 343
          },                                                                                                           // 344
          visible: function () {                                                                                       // 345
            return $module.is(':visible');                                                                             // 346
          }                                                                                                            // 347
        },                                                                                                             // 329
        remove: {                                                                                                      // 350
          progressPoll: function () {                                                                                  // 351
            module.verbose('Removing progress poll timer');                                                            // 352
                                                                                                                       //
            if (module.progressPoll) {                                                                                 // 353
              clearTimeout(module.progressPoll);                                                                       // 354
              delete module.progressPoll;                                                                              // 355
            }                                                                                                          // 356
          },                                                                                                           // 357
          nextValue: function () {                                                                                     // 358
            module.verbose('Removing progress value stored for next update');                                          // 359
            delete module.nextValue;                                                                                   // 360
          },                                                                                                           // 361
          state: function () {                                                                                         // 362
            module.verbose('Removing stored state');                                                                   // 363
            delete module.total;                                                                                       // 364
            delete module.percent;                                                                                     // 365
            delete module.value;                                                                                       // 366
          },                                                                                                           // 367
          active: function () {                                                                                        // 368
            module.verbose('Removing active state');                                                                   // 369
            $module.removeClass(className.active);                                                                     // 370
          },                                                                                                           // 371
          success: function () {                                                                                       // 372
            module.verbose('Removing success state');                                                                  // 373
            $module.removeClass(className.success);                                                                    // 374
          },                                                                                                           // 375
          warning: function () {                                                                                       // 376
            module.verbose('Removing warning state');                                                                  // 377
            $module.removeClass(className.warning);                                                                    // 378
          },                                                                                                           // 379
          error: function () {                                                                                         // 380
            module.verbose('Removing error state');                                                                    // 381
            $module.removeClass(className.error);                                                                      // 382
          }                                                                                                            // 383
        },                                                                                                             // 350
        set: {                                                                                                         // 386
          barWidth: function (value) {                                                                                 // 387
            if (value > 100) {                                                                                         // 388
              module.error(error.tooHigh, value);                                                                      // 389
            } else if (value < 0) {                                                                                    // 390
              module.error(error.tooLow, value);                                                                       // 392
            } else {                                                                                                   // 393
              $bar.css('width', value + '%');                                                                          // 395
              $module.attr('data-percent', parseInt(value, 10));                                                       // 398
            }                                                                                                          // 401
          },                                                                                                           // 402
          duration: function (duration) {                                                                              // 403
            duration = duration || settings.duration;                                                                  // 404
            duration = typeof duration == 'number' ? duration + 'ms' : duration;                                       // 405
            module.verbose('Setting progress bar transition duration', duration);                                      // 409
            $bar.css({                                                                                                 // 410
              'transition-duration': duration                                                                          // 412
            });                                                                                                        // 411
          },                                                                                                           // 415
          percent: function (percent) {                                                                                // 416
            percent = typeof percent == 'string' ? +percent.replace('%', '') : percent; // round display percentage    // 417
                                                                                                                       //
            percent = settings.precision > 0 ? Math.round(percent * (10 * settings.precision)) / (10 * settings.precision) : Math.round(percent);
            module.percent = percent;                                                                                  // 426
                                                                                                                       //
            if (!module.has.total()) {                                                                                 // 427
              module.value = settings.precision > 0 ? Math.round(percent / 100 * module.total * (10 * settings.precision)) / (10 * settings.precision) : Math.round(percent / 100 * module.total * 10) / 10;
                                                                                                                       //
              if (settings.limitValues) {                                                                              // 432
                module.value = module.value > 100 ? 100 : module.value < 0 ? 0 : module.value;                         // 433
              }                                                                                                        // 439
            }                                                                                                          // 440
                                                                                                                       //
            module.set.barWidth(percent);                                                                              // 441
            module.set.labelInterval();                                                                                // 442
            module.set.labels();                                                                                       // 443
            settings.onChange.call(element, percent, module.value, module.total);                                      // 444
          },                                                                                                           // 445
          labelInterval: function () {                                                                                 // 446
            var animationCallback = function () {                                                                      // 447
              module.verbose('Bar finished animating, removing continuous label updates');                             // 449
              clearInterval(module.interval);                                                                          // 450
              animating = false;                                                                                       // 451
              module.set.labels();                                                                                     // 452
            };                                                                                                         // 453
                                                                                                                       //
            clearInterval(module.interval);                                                                            // 455
            $bar.one(transitionEnd + eventNamespace, animationCallback);                                               // 456
            animating = true;                                                                                          // 457
            module.interval = setInterval(function () {                                                                // 458
              var isInDOM = $.contains(document.documentElement, element);                                             // 459
                                                                                                                       //
              if (!isInDOM) {                                                                                          // 462
                clearInterval(module.interval);                                                                        // 463
                animating = false;                                                                                     // 464
              }                                                                                                        // 465
                                                                                                                       //
              module.set.labels();                                                                                     // 466
            }, settings.framerate);                                                                                    // 467
          },                                                                                                           // 468
          labels: function () {                                                                                        // 469
            module.verbose('Setting both bar progress and outer label text');                                          // 470
            module.set.barLabel();                                                                                     // 471
            module.set.state();                                                                                        // 472
          },                                                                                                           // 473
          label: function (text) {                                                                                     // 474
            text = text || '';                                                                                         // 475
                                                                                                                       //
            if (text) {                                                                                                // 476
              text = module.get.text(text);                                                                            // 477
              module.verbose('Setting label to text', text);                                                           // 478
              $label.text(text);                                                                                       // 479
            }                                                                                                          // 480
          },                                                                                                           // 481
          state: function (percent) {                                                                                  // 482
            percent = percent !== undefined ? percent : module.percent;                                                // 483
                                                                                                                       //
            if (percent === 100) {                                                                                     // 487
              if (settings.autoSuccess && !(module.is.warning() || module.is.error() || module.is.success())) {        // 488
                module.set.success();                                                                                  // 489
                module.debug('Automatically triggering success at 100%');                                              // 490
              } else {                                                                                                 // 491
                module.verbose('Reached 100% removing active state');                                                  // 493
                module.remove.active();                                                                                // 494
                module.remove.progressPoll();                                                                          // 495
              }                                                                                                        // 496
            } else if (percent > 0) {                                                                                  // 497
              module.verbose('Adjusting active progress bar label', percent);                                          // 499
              module.set.active();                                                                                     // 500
            } else {                                                                                                   // 501
              module.remove.active();                                                                                  // 503
              module.set.label(settings.text.active);                                                                  // 504
            }                                                                                                          // 505
          },                                                                                                           // 506
          barLabel: function (text) {                                                                                  // 507
            if (text !== undefined) {                                                                                  // 508
              $progress.text(module.get.text(text));                                                                   // 509
            } else if (settings.label == 'ratio' && module.total) {                                                    // 510
              module.verbose('Adding ratio to bar label');                                                             // 512
              $progress.text(module.get.text(settings.text.ratio));                                                    // 513
            } else if (settings.label == 'percent') {                                                                  // 514
              module.verbose('Adding percentage to bar label');                                                        // 516
              $progress.text(module.get.text(settings.text.percent));                                                  // 517
            }                                                                                                          // 518
          },                                                                                                           // 519
          active: function (text) {                                                                                    // 520
            text = text || settings.text.active;                                                                       // 521
            module.debug('Setting active state');                                                                      // 522
                                                                                                                       //
            if (settings.showActivity && !module.is.active()) {                                                        // 523
              $module.addClass(className.active);                                                                      // 524
            }                                                                                                          // 525
                                                                                                                       //
            module.remove.warning();                                                                                   // 526
            module.remove.error();                                                                                     // 527
            module.remove.success();                                                                                   // 528
            text = settings.onLabelUpdate('active', text, module.value, module.total);                                 // 529
                                                                                                                       //
            if (text) {                                                                                                // 530
              module.set.label(text);                                                                                  // 531
            }                                                                                                          // 532
                                                                                                                       //
            $bar.one(transitionEnd + eventNamespace, function () {                                                     // 533
              settings.onActive.call(element, module.value, module.total);                                             // 534
            });                                                                                                        // 535
          },                                                                                                           // 536
          success: function (text) {                                                                                   // 537
            text = text || settings.text.success || settings.text.active;                                              // 538
            module.debug('Setting success state');                                                                     // 539
            $module.addClass(className.success);                                                                       // 540
            module.remove.active();                                                                                    // 541
            module.remove.warning();                                                                                   // 542
            module.remove.error();                                                                                     // 543
            module.complete();                                                                                         // 544
                                                                                                                       //
            if (settings.text.success) {                                                                               // 545
              text = settings.onLabelUpdate('success', text, module.value, module.total);                              // 546
              module.set.label(text);                                                                                  // 547
            } else {                                                                                                   // 548
              text = settings.onLabelUpdate('active', text, module.value, module.total);                               // 550
              module.set.label(text);                                                                                  // 551
            }                                                                                                          // 552
                                                                                                                       //
            $bar.one(transitionEnd + eventNamespace, function () {                                                     // 553
              settings.onSuccess.call(element, module.total);                                                          // 554
            });                                                                                                        // 555
          },                                                                                                           // 556
          warning: function (text) {                                                                                   // 557
            text = text || settings.text.warning;                                                                      // 558
            module.debug('Setting warning state');                                                                     // 559
            $module.addClass(className.warning);                                                                       // 560
            module.remove.active();                                                                                    // 561
            module.remove.success();                                                                                   // 562
            module.remove.error();                                                                                     // 563
            module.complete();                                                                                         // 564
            text = settings.onLabelUpdate('warning', text, module.value, module.total);                                // 565
                                                                                                                       //
            if (text) {                                                                                                // 566
              module.set.label(text);                                                                                  // 567
            }                                                                                                          // 568
                                                                                                                       //
            $bar.one(transitionEnd + eventNamespace, function () {                                                     // 569
              settings.onWarning.call(element, module.value, module.total);                                            // 570
            });                                                                                                        // 571
          },                                                                                                           // 572
          error: function (text) {                                                                                     // 573
            text = text || settings.text.error;                                                                        // 574
            module.debug('Setting error state');                                                                       // 575
            $module.addClass(className.error);                                                                         // 576
            module.remove.active();                                                                                    // 577
            module.remove.success();                                                                                   // 578
            module.remove.warning();                                                                                   // 579
            module.complete();                                                                                         // 580
            text = settings.onLabelUpdate('error', text, module.value, module.total);                                  // 581
                                                                                                                       //
            if (text) {                                                                                                // 582
              module.set.label(text);                                                                                  // 583
            }                                                                                                          // 584
                                                                                                                       //
            $bar.one(transitionEnd + eventNamespace, function () {                                                     // 585
              settings.onError.call(element, module.value, module.total);                                              // 586
            });                                                                                                        // 587
          },                                                                                                           // 588
          transitionEvent: function () {                                                                               // 589
            transitionEnd = module.get.transitionEnd();                                                                // 590
          },                                                                                                           // 591
          total: function (totalValue) {                                                                               // 592
            module.total = totalValue;                                                                                 // 593
          },                                                                                                           // 594
          value: function (value) {                                                                                    // 595
            module.value = value;                                                                                      // 596
          },                                                                                                           // 597
          progress: function (value) {                                                                                 // 598
            if (!module.has.progressPoll()) {                                                                          // 599
              module.debug('First update in progress update interval, immediately updating', value);                   // 600
              module.update.progress(value);                                                                           // 601
              module.create.progressPoll();                                                                            // 602
            } else {                                                                                                   // 603
              module.debug('Updated within interval, setting next update to use new value', value);                    // 605
              module.set.nextValue(value);                                                                             // 606
            }                                                                                                          // 607
          },                                                                                                           // 608
          nextValue: function (value) {                                                                                // 609
            module.nextValue = value;                                                                                  // 610
          }                                                                                                            // 611
        },                                                                                                             // 386
        update: {                                                                                                      // 614
          toNextValue: function () {                                                                                   // 615
            var nextValue = module.nextValue;                                                                          // 616
                                                                                                                       //
            if (nextValue) {                                                                                           // 619
              module.debug('Update interval complete using last updated value', nextValue);                            // 620
              module.update.progress(nextValue);                                                                       // 621
              module.remove.nextValue();                                                                               // 622
            }                                                                                                          // 623
          },                                                                                                           // 624
          progress: function (value) {                                                                                 // 625
            var percentComplete;                                                                                       // 626
            value = module.get.numericValue(value);                                                                    // 629
                                                                                                                       //
            if (value === false) {                                                                                     // 630
              module.error(error.nonNumeric, value);                                                                   // 631
            }                                                                                                          // 632
                                                                                                                       //
            value = module.get.normalizedValue(value);                                                                 // 633
                                                                                                                       //
            if (module.has.total()) {                                                                                  // 634
              module.set.value(value);                                                                                 // 635
              percentComplete = value / module.total * 100;                                                            // 636
              module.debug('Calculating percent complete from total', percentComplete);                                // 637
              module.set.percent(percentComplete);                                                                     // 638
            } else {                                                                                                   // 639
              percentComplete = value;                                                                                 // 641
              module.debug('Setting value to exact percentage value', percentComplete);                                // 642
              module.set.percent(percentComplete);                                                                     // 643
            }                                                                                                          // 644
          }                                                                                                            // 645
        },                                                                                                             // 614
        setting: function (name, value) {                                                                              // 648
          module.debug('Changing setting', name, value);                                                               // 649
                                                                                                                       //
          if ($.isPlainObject(name)) {                                                                                 // 650
            $.extend(true, settings, name);                                                                            // 651
          } else if (value !== undefined) {                                                                            // 652
            if ($.isPlainObject(settings[name])) {                                                                     // 654
              $.extend(true, settings[name], value);                                                                   // 655
            } else {                                                                                                   // 656
              settings[name] = value;                                                                                  // 658
            }                                                                                                          // 659
          } else {                                                                                                     // 660
            return settings[name];                                                                                     // 662
          }                                                                                                            // 663
        },                                                                                                             // 664
        internal: function (name, value) {                                                                             // 665
          if ($.isPlainObject(name)) {                                                                                 // 666
            $.extend(true, module, name);                                                                              // 667
          } else if (value !== undefined) {                                                                            // 668
            module[name] = value;                                                                                      // 670
          } else {                                                                                                     // 671
            return module[name];                                                                                       // 673
          }                                                                                                            // 674
        },                                                                                                             // 675
        debug: function () {                                                                                           // 676
          if (!settings.silent && settings.debug) {                                                                    // 677
            if (settings.performance) {                                                                                // 678
              module.performance.log(arguments);                                                                       // 679
            } else {                                                                                                   // 680
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 682
              module.debug.apply(console, arguments);                                                                  // 683
            }                                                                                                          // 684
          }                                                                                                            // 685
        },                                                                                                             // 686
        verbose: function () {                                                                                         // 687
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 688
            if (settings.performance) {                                                                                // 689
              module.performance.log(arguments);                                                                       // 690
            } else {                                                                                                   // 691
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 693
              module.verbose.apply(console, arguments);                                                                // 694
            }                                                                                                          // 695
          }                                                                                                            // 696
        },                                                                                                             // 697
        error: function () {                                                                                           // 698
          if (!settings.silent) {                                                                                      // 699
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 700
            module.error.apply(console, arguments);                                                                    // 701
          }                                                                                                            // 702
        },                                                                                                             // 703
        performance: {                                                                                                 // 704
          log: function (message) {                                                                                    // 705
            var currentTime, executionTime, previousTime;                                                              // 706
                                                                                                                       //
            if (settings.performance) {                                                                                // 711
              currentTime = new Date().getTime();                                                                      // 712
              previousTime = time || currentTime;                                                                      // 713
              executionTime = currentTime - previousTime;                                                              // 714
              time = currentTime;                                                                                      // 715
              performance.push({                                                                                       // 716
                'Name': message[0],                                                                                    // 717
                'Arguments': [].slice.call(message, 1) || '',                                                          // 718
                'Element': element,                                                                                    // 719
                'Execution Time': executionTime                                                                        // 720
              });                                                                                                      // 716
            }                                                                                                          // 722
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 723
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 724
          },                                                                                                           // 725
          display: function () {                                                                                       // 726
            var title = settings.name + ':',                                                                           // 727
                totalTime = 0;                                                                                         // 727
            time = false;                                                                                              // 731
            clearTimeout(module.performance.timer);                                                                    // 732
            $.each(performance, function (index, data) {                                                               // 733
              totalTime += data['Execution Time'];                                                                     // 734
            });                                                                                                        // 735
            title += ' ' + totalTime + 'ms';                                                                           // 736
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 737
              title += ' \'' + moduleSelector + '\'';                                                                  // 738
            }                                                                                                          // 739
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 740
              console.groupCollapsed(title);                                                                           // 741
                                                                                                                       //
              if (console.table) {                                                                                     // 742
                console.table(performance);                                                                            // 743
              } else {                                                                                                 // 744
                $.each(performance, function (index, data) {                                                           // 746
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 747
                });                                                                                                    // 748
              }                                                                                                        // 749
                                                                                                                       //
              console.groupEnd();                                                                                      // 750
            }                                                                                                          // 751
                                                                                                                       //
            performance = [];                                                                                          // 752
          }                                                                                                            // 753
        },                                                                                                             // 704
        invoke: function (query, passedArguments, context) {                                                           // 755
          var object = instance,                                                                                       // 756
              maxDepth,                                                                                                // 756
              found,                                                                                                   // 756
              response;                                                                                                // 756
          passedArguments = passedArguments || queryArguments;                                                         // 762
          context = element || context;                                                                                // 763
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 764
            query = query.split(/[\. ]/);                                                                              // 765
            maxDepth = query.length - 1;                                                                               // 766
            $.each(query, function (depth, value) {                                                                    // 767
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 772
                object = object[camelCaseValue];                                                                       // 773
              } else if (object[camelCaseValue] !== undefined) {                                                       // 774
                found = object[camelCaseValue];                                                                        // 776
                return false;                                                                                          // 777
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 778
                object = object[value];                                                                                // 780
              } else if (object[value] !== undefined) {                                                                // 781
                found = object[value];                                                                                 // 783
                return false;                                                                                          // 784
              } else {                                                                                                 // 785
                module.error(error.method, query);                                                                     // 787
                return false;                                                                                          // 788
              }                                                                                                        // 789
            });                                                                                                        // 790
          }                                                                                                            // 791
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 792
            response = found.apply(context, passedArguments);                                                          // 793
          } else if (found !== undefined) {                                                                            // 794
            response = found;                                                                                          // 796
          }                                                                                                            // 797
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 798
            returnedValue.push(response);                                                                              // 799
          } else if (returnedValue !== undefined) {                                                                    // 800
            returnedValue = [returnedValue, response];                                                                 // 802
          } else if (response !== undefined) {                                                                         // 803
            returnedValue = response;                                                                                  // 805
          }                                                                                                            // 806
                                                                                                                       //
          return found;                                                                                                // 807
        }                                                                                                              // 808
      };                                                                                                               // 79
                                                                                                                       //
      if (methodInvoked) {                                                                                             // 811
        if (instance === undefined) {                                                                                  // 812
          module.initialize();                                                                                         // 813
        }                                                                                                              // 814
                                                                                                                       //
        module.invoke(query);                                                                                          // 815
      } else {                                                                                                         // 816
        if (instance !== undefined) {                                                                                  // 818
          instance.invoke('destroy');                                                                                  // 819
        }                                                                                                              // 820
                                                                                                                       //
        module.initialize();                                                                                           // 821
      }                                                                                                                // 822
    });                                                                                                                // 823
    return returnedValue !== undefined ? returnedValue : this;                                                         // 826
  };                                                                                                                   // 830
                                                                                                                       //
  $.fn.progress.settings = {                                                                                           // 832
    name: 'Progress',                                                                                                  // 834
    namespace: 'progress',                                                                                             // 835
    silent: false,                                                                                                     // 837
    debug: false,                                                                                                      // 838
    verbose: false,                                                                                                    // 839
    performance: true,                                                                                                 // 840
    random: {                                                                                                          // 842
      min: 2,                                                                                                          // 843
      max: 5                                                                                                           // 844
    },                                                                                                                 // 842
    duration: 300,                                                                                                     // 847
    updateInterval: 'auto',                                                                                            // 849
    autoSuccess: true,                                                                                                 // 851
    showActivity: true,                                                                                                // 852
    limitValues: true,                                                                                                 // 853
    label: 'percent',                                                                                                  // 855
    precision: 0,                                                                                                      // 856
    framerate: 1000 / 30,                                                                                              // 857
    /// 30 fps                                                                                                         // 857
    percent: false,                                                                                                    // 859
    total: false,                                                                                                      // 860
    value: false,                                                                                                      // 861
    onLabelUpdate: function (state, text, value, total) {                                                              // 863
      return text;                                                                                                     // 864
    },                                                                                                                 // 865
    onChange: function (percent, value, total) {},                                                                     // 866
    onSuccess: function (total) {},                                                                                    // 867
    onActive: function (value, total) {},                                                                              // 868
    onError: function (value, total) {},                                                                               // 869
    onWarning: function (value, total) {},                                                                             // 870
    error: {                                                                                                           // 872
      method: 'The method you called is not defined.',                                                                 // 873
      nonNumeric: 'Progress value is non numeric',                                                                     // 874
      tooHigh: 'Value specified is above 100%',                                                                        // 875
      tooLow: 'Value specified is below 0%'                                                                            // 876
    },                                                                                                                 // 872
    regExp: {                                                                                                          // 879
      variable: /\{\$*[A-z0-9]+\}/g                                                                                    // 880
    },                                                                                                                 // 879
    metadata: {                                                                                                        // 883
      percent: 'percent',                                                                                              // 884
      total: 'total',                                                                                                  // 885
      value: 'value'                                                                                                   // 886
    },                                                                                                                 // 883
    selector: {                                                                                                        // 889
      bar: '> .bar',                                                                                                   // 890
      label: '> .label',                                                                                               // 891
      progress: '.bar > .progress'                                                                                     // 892
    },                                                                                                                 // 889
    text: {                                                                                                            // 895
      active: false,                                                                                                   // 896
      error: false,                                                                                                    // 897
      success: false,                                                                                                  // 898
      warning: false,                                                                                                  // 899
      percent: '{percent}%',                                                                                           // 900
      ratio: '{value} of {total}'                                                                                      // 901
    },                                                                                                                 // 895
    className: {                                                                                                       // 904
      active: 'active',                                                                                                // 905
      error: 'error',                                                                                                  // 906
      success: 'success',                                                                                              // 907
      warning: 'warning'                                                                                               // 908
    }                                                                                                                  // 904
  };                                                                                                                   // 832
})(jQuery, window, document);                                                                                          // 914
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"rating.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/modules/rating.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Rating                                                                                           //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.rating = function (parameters) {                                                                                // 26
    var $allModules = $(this),                                                                                         // 27
        moduleSelector = $allModules.selector || '',                                                                   // 27
        time = new Date().getTime(),                                                                                   // 27
        performance = [],                                                                                              // 27
        query = arguments[0],                                                                                          // 27
        methodInvoked = typeof query == 'string',                                                                      // 27
        queryArguments = [].slice.call(arguments, 1),                                                                  // 27
        returnedValue;                                                                                                 // 27
    $allModules.each(function () {                                                                                     // 39
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.rating.settings, parameters) : $.extend({}, $.fn.rating.settings),
          namespace = settings.namespace,                                                                              // 41
          className = settings.className,                                                                              // 41
          metadata = settings.metadata,                                                                                // 41
          selector = settings.selector,                                                                                // 41
          error = settings.error,                                                                                      // 41
          eventNamespace = '.' + namespace,                                                                            // 41
          moduleNamespace = 'module-' + namespace,                                                                     // 41
          element = this,                                                                                              // 41
          instance = $(this).data(moduleNamespace),                                                                    // 41
          $module = $(this),                                                                                           // 41
          $icon = $module.find(selector.icon),                                                                         // 41
          initialLoad,                                                                                                 // 41
          module;                                                                                                      // 41
      module = {                                                                                                       // 65
        initialize: function () {                                                                                      // 67
          module.verbose('Initializing rating module', settings);                                                      // 68
                                                                                                                       //
          if ($icon.length === 0) {                                                                                    // 70
            module.setup.layout();                                                                                     // 71
          }                                                                                                            // 72
                                                                                                                       //
          if (settings.interactive) {                                                                                  // 74
            module.enable();                                                                                           // 75
          } else {                                                                                                     // 76
            module.disable();                                                                                          // 78
          }                                                                                                            // 79
                                                                                                                       //
          module.set.initialLoad();                                                                                    // 80
          module.set.rating(module.get.initialRating());                                                               // 81
          module.remove.initialLoad();                                                                                 // 82
          module.instantiate();                                                                                        // 83
        },                                                                                                             // 84
        instantiate: function () {                                                                                     // 86
          module.verbose('Instantiating module', settings);                                                            // 87
          instance = module;                                                                                           // 88
          $module.data(moduleNamespace, module);                                                                       // 89
        },                                                                                                             // 92
        destroy: function () {                                                                                         // 94
          module.verbose('Destroying previous instance', instance);                                                    // 95
          module.remove.events();                                                                                      // 96
          $module.removeData(moduleNamespace);                                                                         // 97
        },                                                                                                             // 100
        refresh: function () {                                                                                         // 102
          $icon = $module.find(selector.icon);                                                                         // 103
        },                                                                                                             // 104
        setup: {                                                                                                       // 106
          layout: function () {                                                                                        // 107
            var maxRating = module.get.maxRating(),                                                                    // 108
                html = $.fn.rating.settings.templates.icon(maxRating);                                                 // 108
            module.debug('Generating icon html dynamically');                                                          // 112
            $module.html(html);                                                                                        // 113
            module.refresh();                                                                                          // 116
          }                                                                                                            // 117
        },                                                                                                             // 106
        event: {                                                                                                       // 120
          mouseenter: function () {                                                                                    // 121
            var $activeIcon = $(this);                                                                                 // 122
            $activeIcon.nextAll().removeClass(className.selected);                                                     // 125
            $module.addClass(className.selected);                                                                      // 129
            $activeIcon.addClass(className.selected).prevAll().addClass(className.selected);                           // 132
          },                                                                                                           // 137
          mouseleave: function () {                                                                                    // 138
            $module.removeClass(className.selected);                                                                   // 139
            $icon.removeClass(className.selected);                                                                     // 142
          },                                                                                                           // 145
          click: function () {                                                                                         // 146
            var $activeIcon = $(this),                                                                                 // 147
                currentRating = module.get.rating(),                                                                   // 147
                rating = $icon.index($activeIcon) + 1,                                                                 // 147
                canClear = settings.clearable == 'auto' ? $icon.length === 1 : settings.clearable;                     // 147
                                                                                                                       //
            if (canClear && currentRating == rating) {                                                                 // 155
              module.clearRating();                                                                                    // 156
            } else {                                                                                                   // 157
              module.set.rating(rating);                                                                               // 159
            }                                                                                                          // 160
          }                                                                                                            // 161
        },                                                                                                             // 120
        clearRating: function () {                                                                                     // 164
          module.debug('Clearing current rating');                                                                     // 165
          module.set.rating(0);                                                                                        // 166
        },                                                                                                             // 167
        bind: {                                                                                                        // 169
          events: function () {                                                                                        // 170
            module.verbose('Binding events');                                                                          // 171
            $module.on('mouseenter' + eventNamespace, selector.icon, module.event.mouseenter).on('mouseleave' + eventNamespace, selector.icon, module.event.mouseleave).on('click' + eventNamespace, selector.icon, module.event.click);
          }                                                                                                            // 177
        },                                                                                                             // 169
        remove: {                                                                                                      // 180
          events: function () {                                                                                        // 181
            module.verbose('Removing events');                                                                         // 182
            $module.off(eventNamespace);                                                                               // 183
          },                                                                                                           // 186
          initialLoad: function () {                                                                                   // 187
            initialLoad = false;                                                                                       // 188
          }                                                                                                            // 189
        },                                                                                                             // 180
        enable: function () {                                                                                          // 192
          module.debug('Setting rating to interactive mode');                                                          // 193
          module.bind.events();                                                                                        // 194
          $module.removeClass(className.disabled);                                                                     // 195
        },                                                                                                             // 198
        disable: function () {                                                                                         // 200
          module.debug('Setting rating to read-only mode');                                                            // 201
          module.remove.events();                                                                                      // 202
          $module.addClass(className.disabled);                                                                        // 203
        },                                                                                                             // 206
        is: {                                                                                                          // 208
          initialLoad: function () {                                                                                   // 209
            return initialLoad;                                                                                        // 210
          }                                                                                                            // 211
        },                                                                                                             // 208
        get: {                                                                                                         // 214
          initialRating: function () {                                                                                 // 215
            if ($module.data(metadata.rating) !== undefined) {                                                         // 216
              $module.removeData(metadata.rating);                                                                     // 217
              return $module.data(metadata.rating);                                                                    // 218
            }                                                                                                          // 219
                                                                                                                       //
            return settings.initialRating;                                                                             // 220
          },                                                                                                           // 221
          maxRating: function () {                                                                                     // 222
            if ($module.data(metadata.maxRating) !== undefined) {                                                      // 223
              $module.removeData(metadata.maxRating);                                                                  // 224
              return $module.data(metadata.maxRating);                                                                 // 225
            }                                                                                                          // 226
                                                                                                                       //
            return settings.maxRating;                                                                                 // 227
          },                                                                                                           // 228
          rating: function () {                                                                                        // 229
            var currentRating = $icon.filter('.' + className.active).length;                                           // 230
            module.verbose('Current rating retrieved', currentRating);                                                 // 233
            return currentRating;                                                                                      // 234
          }                                                                                                            // 235
        },                                                                                                             // 214
        set: {                                                                                                         // 238
          rating: function (rating) {                                                                                  // 239
            var ratingIndex = rating - 1 >= 0 ? rating - 1 : 0,                                                        // 240
                $activeIcon = $icon.eq(ratingIndex);                                                                   // 240
            $module.removeClass(className.selected);                                                                   // 246
            $icon.removeClass(className.selected).removeClass(className.active);                                       // 249
                                                                                                                       //
            if (rating > 0) {                                                                                          // 253
              module.verbose('Setting current rating to', rating);                                                     // 254
              $activeIcon.prevAll().addBack().addClass(className.active);                                              // 255
            }                                                                                                          // 260
                                                                                                                       //
            if (!module.is.initialLoad()) {                                                                            // 261
              settings.onRate.call(element, rating);                                                                   // 262
            }                                                                                                          // 263
          },                                                                                                           // 264
          initialLoad: function () {                                                                                   // 265
            initialLoad = true;                                                                                        // 266
          }                                                                                                            // 267
        },                                                                                                             // 238
        setting: function (name, value) {                                                                              // 270
          module.debug('Changing setting', name, value);                                                               // 271
                                                                                                                       //
          if ($.isPlainObject(name)) {                                                                                 // 272
            $.extend(true, settings, name);                                                                            // 273
          } else if (value !== undefined) {                                                                            // 274
            if ($.isPlainObject(settings[name])) {                                                                     // 276
              $.extend(true, settings[name], value);                                                                   // 277
            } else {                                                                                                   // 278
              settings[name] = value;                                                                                  // 280
            }                                                                                                          // 281
          } else {                                                                                                     // 282
            return settings[name];                                                                                     // 284
          }                                                                                                            // 285
        },                                                                                                             // 286
        internal: function (name, value) {                                                                             // 287
          if ($.isPlainObject(name)) {                                                                                 // 288
            $.extend(true, module, name);                                                                              // 289
          } else if (value !== undefined) {                                                                            // 290
            module[name] = value;                                                                                      // 292
          } else {                                                                                                     // 293
            return module[name];                                                                                       // 295
          }                                                                                                            // 296
        },                                                                                                             // 297
        debug: function () {                                                                                           // 298
          if (!settings.silent && settings.debug) {                                                                    // 299
            if (settings.performance) {                                                                                // 300
              module.performance.log(arguments);                                                                       // 301
            } else {                                                                                                   // 302
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 304
              module.debug.apply(console, arguments);                                                                  // 305
            }                                                                                                          // 306
          }                                                                                                            // 307
        },                                                                                                             // 308
        verbose: function () {                                                                                         // 309
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 310
            if (settings.performance) {                                                                                // 311
              module.performance.log(arguments);                                                                       // 312
            } else {                                                                                                   // 313
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 315
              module.verbose.apply(console, arguments);                                                                // 316
            }                                                                                                          // 317
          }                                                                                                            // 318
        },                                                                                                             // 319
        error: function () {                                                                                           // 320
          if (!settings.silent) {                                                                                      // 321
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 322
            module.error.apply(console, arguments);                                                                    // 323
          }                                                                                                            // 324
        },                                                                                                             // 325
        performance: {                                                                                                 // 326
          log: function (message) {                                                                                    // 327
            var currentTime, executionTime, previousTime;                                                              // 328
                                                                                                                       //
            if (settings.performance) {                                                                                // 333
              currentTime = new Date().getTime();                                                                      // 334
              previousTime = time || currentTime;                                                                      // 335
              executionTime = currentTime - previousTime;                                                              // 336
              time = currentTime;                                                                                      // 337
              performance.push({                                                                                       // 338
                'Name': message[0],                                                                                    // 339
                'Arguments': [].slice.call(message, 1) || '',                                                          // 340
                'Element': element,                                                                                    // 341
                'Execution Time': executionTime                                                                        // 342
              });                                                                                                      // 338
            }                                                                                                          // 344
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 345
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 346
          },                                                                                                           // 347
          display: function () {                                                                                       // 348
            var title = settings.name + ':',                                                                           // 349
                totalTime = 0;                                                                                         // 349
            time = false;                                                                                              // 353
            clearTimeout(module.performance.timer);                                                                    // 354
            $.each(performance, function (index, data) {                                                               // 355
              totalTime += data['Execution Time'];                                                                     // 356
            });                                                                                                        // 357
            title += ' ' + totalTime + 'ms';                                                                           // 358
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 359
              title += ' \'' + moduleSelector + '\'';                                                                  // 360
            }                                                                                                          // 361
                                                                                                                       //
            if ($allModules.length > 1) {                                                                              // 362
              title += ' ' + '(' + $allModules.length + ')';                                                           // 363
            }                                                                                                          // 364
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 365
              console.groupCollapsed(title);                                                                           // 366
                                                                                                                       //
              if (console.table) {                                                                                     // 367
                console.table(performance);                                                                            // 368
              } else {                                                                                                 // 369
                $.each(performance, function (index, data) {                                                           // 371
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 372
                });                                                                                                    // 373
              }                                                                                                        // 374
                                                                                                                       //
              console.groupEnd();                                                                                      // 375
            }                                                                                                          // 376
                                                                                                                       //
            performance = [];                                                                                          // 377
          }                                                                                                            // 378
        },                                                                                                             // 326
        invoke: function (query, passedArguments, context) {                                                           // 380
          var object = instance,                                                                                       // 381
              maxDepth,                                                                                                // 381
              found,                                                                                                   // 381
              response;                                                                                                // 381
          passedArguments = passedArguments || queryArguments;                                                         // 387
          context = element || context;                                                                                // 388
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 389
            query = query.split(/[\. ]/);                                                                              // 390
            maxDepth = query.length - 1;                                                                               // 391
            $.each(query, function (depth, value) {                                                                    // 392
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 397
                object = object[camelCaseValue];                                                                       // 398
              } else if (object[camelCaseValue] !== undefined) {                                                       // 399
                found = object[camelCaseValue];                                                                        // 401
                return false;                                                                                          // 402
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 403
                object = object[value];                                                                                // 405
              } else if (object[value] !== undefined) {                                                                // 406
                found = object[value];                                                                                 // 408
                return false;                                                                                          // 409
              } else {                                                                                                 // 410
                return false;                                                                                          // 412
              }                                                                                                        // 413
            });                                                                                                        // 414
          }                                                                                                            // 415
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 416
            response = found.apply(context, passedArguments);                                                          // 417
          } else if (found !== undefined) {                                                                            // 418
            response = found;                                                                                          // 420
          }                                                                                                            // 421
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 422
            returnedValue.push(response);                                                                              // 423
          } else if (returnedValue !== undefined) {                                                                    // 424
            returnedValue = [returnedValue, response];                                                                 // 426
          } else if (response !== undefined) {                                                                         // 427
            returnedValue = response;                                                                                  // 429
          }                                                                                                            // 430
                                                                                                                       //
          return found;                                                                                                // 431
        }                                                                                                              // 432
      };                                                                                                               // 65
                                                                                                                       //
      if (methodInvoked) {                                                                                             // 434
        if (instance === undefined) {                                                                                  // 435
          module.initialize();                                                                                         // 436
        }                                                                                                              // 437
                                                                                                                       //
        module.invoke(query);                                                                                          // 438
      } else {                                                                                                         // 439
        if (instance !== undefined) {                                                                                  // 441
          instance.invoke('destroy');                                                                                  // 442
        }                                                                                                              // 443
                                                                                                                       //
        module.initialize();                                                                                           // 444
      }                                                                                                                // 445
    });                                                                                                                // 446
    return returnedValue !== undefined ? returnedValue : this;                                                         // 449
  };                                                                                                                   // 453
                                                                                                                       //
  $.fn.rating.settings = {                                                                                             // 455
    name: 'Rating',                                                                                                    // 457
    namespace: 'rating',                                                                                               // 458
    slent: false,                                                                                                      // 460
    debug: false,                                                                                                      // 461
    verbose: false,                                                                                                    // 462
    performance: true,                                                                                                 // 463
    initialRating: 0,                                                                                                  // 465
    interactive: true,                                                                                                 // 466
    maxRating: 4,                                                                                                      // 467
    clearable: 'auto',                                                                                                 // 468
    fireOnInit: false,                                                                                                 // 470
    onRate: function (rating) {},                                                                                      // 472
    error: {                                                                                                           // 474
      method: 'The method you called is not defined',                                                                  // 475
      noMaximum: 'No maximum rating specified. Cannot generate HTML automatically'                                     // 476
    },                                                                                                                 // 474
    metadata: {                                                                                                        // 480
      rating: 'rating',                                                                                                // 481
      maxRating: 'maxRating'                                                                                           // 482
    },                                                                                                                 // 480
    className: {                                                                                                       // 485
      active: 'active',                                                                                                // 486
      disabled: 'disabled',                                                                                            // 487
      selected: 'selected',                                                                                            // 488
      loading: 'loading'                                                                                               // 489
    },                                                                                                                 // 485
    selector: {                                                                                                        // 492
      icon: '.icon'                                                                                                    // 493
    },                                                                                                                 // 492
    templates: {                                                                                                       // 496
      icon: function (maxRating) {                                                                                     // 497
        var icon = 1,                                                                                                  // 498
            html = '';                                                                                                 // 498
                                                                                                                       //
        while (icon <= maxRating) {                                                                                    // 502
          html += '<i class="icon"></i>';                                                                              // 503
          icon++;                                                                                                      // 504
        }                                                                                                              // 505
                                                                                                                       //
        return html;                                                                                                   // 506
      }                                                                                                                // 507
    }                                                                                                                  // 496
  };                                                                                                                   // 455
})(jQuery, window, document);                                                                                          // 512
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"search.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/modules/search.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof2 = require("babel-runtime/helpers/typeof");                                                                //
                                                                                                                       //
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Search                                                                                           //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.search = function (parameters) {                                                                                // 26
    var $allModules = $(this),                                                                                         // 27
        moduleSelector = $allModules.selector || '',                                                                   // 27
        time = new Date().getTime(),                                                                                   // 27
        performance = [],                                                                                              // 27
        query = arguments[0],                                                                                          // 27
        methodInvoked = typeof query == 'string',                                                                      // 27
        queryArguments = [].slice.call(arguments, 1),                                                                  // 27
        returnedValue;                                                                                                 // 27
    $(this).each(function () {                                                                                         // 39
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.search.settings, parameters) : $.extend({}, $.fn.search.settings),
          className = settings.className,                                                                              // 41
          metadata = settings.metadata,                                                                                // 41
          regExp = settings.regExp,                                                                                    // 41
          fields = settings.fields,                                                                                    // 41
          selector = settings.selector,                                                                                // 41
          error = settings.error,                                                                                      // 41
          namespace = settings.namespace,                                                                              // 41
          eventNamespace = '.' + namespace,                                                                            // 41
          moduleNamespace = namespace + '-module',                                                                     // 41
          $module = $(this),                                                                                           // 41
          $prompt = $module.find(selector.prompt),                                                                     // 41
          $searchButton = $module.find(selector.searchButton),                                                         // 41
          $results = $module.find(selector.results),                                                                   // 41
          $result = $module.find(selector.result),                                                                     // 41
          $category = $module.find(selector.category),                                                                 // 41
          element = this,                                                                                              // 41
          instance = $module.data(moduleNamespace),                                                                    // 41
          disabledBubbled = false,                                                                                     // 41
          module;                                                                                                      // 41
      module = {                                                                                                       // 72
        initialize: function () {                                                                                      // 74
          module.verbose('Initializing module');                                                                       // 75
          module.determine.searchFields();                                                                             // 76
          module.bind.events();                                                                                        // 77
          module.set.type();                                                                                           // 78
          module.create.results();                                                                                     // 79
          module.instantiate();                                                                                        // 80
        },                                                                                                             // 81
        instantiate: function () {                                                                                     // 82
          module.verbose('Storing instance of module', module);                                                        // 83
          instance = module;                                                                                           // 84
          $module.data(moduleNamespace, module);                                                                       // 85
        },                                                                                                             // 88
        destroy: function () {                                                                                         // 89
          module.verbose('Destroying instance');                                                                       // 90
          $module.off(eventNamespace).removeData(moduleNamespace);                                                     // 91
        },                                                                                                             // 95
        refresh: function () {                                                                                         // 97
          module.debug('Refreshing selector cache');                                                                   // 98
          $prompt = $module.find(selector.prompt);                                                                     // 99
          $searchButton = $module.find(selector.searchButton);                                                         // 100
          $category = $module.find(selector.category);                                                                 // 101
          $results = $module.find(selector.results);                                                                   // 102
          $result = $module.find(selector.result);                                                                     // 103
        },                                                                                                             // 104
        refreshResults: function () {                                                                                  // 106
          $results = $module.find(selector.results);                                                                   // 107
          $result = $module.find(selector.result);                                                                     // 108
        },                                                                                                             // 109
        bind: {                                                                                                        // 111
          events: function () {                                                                                        // 112
            module.verbose('Binding events to search');                                                                // 113
                                                                                                                       //
            if (settings.automatic) {                                                                                  // 114
              $module.on(module.get.inputEvent() + eventNamespace, selector.prompt, module.event.input);               // 115
              $prompt.attr('autocomplete', 'off');                                                                     // 118
            }                                                                                                          // 121
                                                                                                                       //
            $module // prompt                                                                                          // 122
            .on('focus' + eventNamespace, selector.prompt, module.event.focus).on('blur' + eventNamespace, selector.prompt, module.event.blur).on('keydown' + eventNamespace, selector.prompt, module.handleKeyboard) // search button
            .on('click' + eventNamespace, selector.searchButton, module.query) // results                              // 122
            .on('mousedown' + eventNamespace, selector.results, module.event.result.mousedown).on('mouseup' + eventNamespace, selector.results, module.event.result.mouseup).on('click' + eventNamespace, selector.result, module.event.result.click);
          }                                                                                                            // 134
        },                                                                                                             // 111
        determine: {                                                                                                   // 137
          searchFields: function () {                                                                                  // 138
            // this makes sure $.extend does not add specified search fields to default fields                         // 139
            // this is the only setting which should not extend defaults                                               // 140
            if (parameters && parameters.searchFields !== undefined) {                                                 // 141
              settings.searchFields = parameters.searchFields;                                                         // 142
            }                                                                                                          // 143
          }                                                                                                            // 144
        },                                                                                                             // 137
        event: {                                                                                                       // 147
          input: function () {                                                                                         // 148
            clearTimeout(module.timer);                                                                                // 149
            module.timer = setTimeout(module.query, settings.searchDelay);                                             // 150
          },                                                                                                           // 151
          focus: function () {                                                                                         // 152
            module.set.focus();                                                                                        // 153
                                                                                                                       //
            if (module.has.minimumCharacters()) {                                                                      // 154
              module.query();                                                                                          // 155
                                                                                                                       //
              if (module.can.show()) {                                                                                 // 156
                module.showResults();                                                                                  // 157
              }                                                                                                        // 158
            }                                                                                                          // 159
          },                                                                                                           // 160
          blur: function (event) {                                                                                     // 161
            var pageLostFocus = document.activeElement === this,                                                       // 162
                callback = function () {                                                                               // 162
              module.cancel.query();                                                                                   // 165
              module.remove.focus();                                                                                   // 166
              module.timer = setTimeout(module.hideResults, settings.hideDelay);                                       // 167
            };                                                                                                         // 168
                                                                                                                       //
            if (pageLostFocus) {                                                                                       // 170
              return;                                                                                                  // 171
            }                                                                                                          // 172
                                                                                                                       //
            if (module.resultsClicked) {                                                                               // 173
              module.debug('Determining if user action caused search to close');                                       // 174
              $module.one('click.close' + eventNamespace, selector.results, function (event) {                         // 175
                if (module.is.inMessage(event) || disabledBubbled) {                                                   // 177
                  $prompt.focus();                                                                                     // 178
                  return;                                                                                              // 179
                }                                                                                                      // 180
                                                                                                                       //
                disabledBubbled = false;                                                                               // 181
                                                                                                                       //
                if (!module.is.animating() && !module.is.hidden()) {                                                   // 182
                  callback();                                                                                          // 183
                }                                                                                                      // 184
              });                                                                                                      // 185
            } else {                                                                                                   // 187
              module.debug('Input blurred without user action, closing results');                                      // 189
              callback();                                                                                              // 190
            }                                                                                                          // 191
          },                                                                                                           // 192
          result: {                                                                                                    // 193
            mousedown: function () {                                                                                   // 194
              module.resultsClicked = true;                                                                            // 195
            },                                                                                                         // 196
            mouseup: function () {                                                                                     // 197
              module.resultsClicked = false;                                                                           // 198
            },                                                                                                         // 199
            click: function (event) {                                                                                  // 200
              module.debug('Search result selected');                                                                  // 201
              var $result = $(this),                                                                                   // 202
                  $title = $result.find(selector.title).eq(0),                                                         // 202
                  $link = $result.is('a[href]') ? $result : $result.find('a[href]').eq(0),                             // 202
                  href = $link.attr('href') || false,                                                                  // 202
                  target = $link.attr('target') || false,                                                              // 202
                  title = $title.html(),                                                                               // 202
                  // title is used for result lookup                                                                   // 202
              value = $title.length > 0 ? $title.text() : false,                                                       // 212
                  results = module.get.results(),                                                                      // 202
                  result = $result.data(metadata.result) || module.get.result(value, results),                         // 202
                  returnedValue;                                                                                       // 202
                                                                                                                       //
              if ($.isFunction(settings.onSelect)) {                                                                   // 219
                if (settings.onSelect.call(element, result, results) === false) {                                      // 220
                  module.debug('Custom onSelect callback cancelled default select action');                            // 221
                  disabledBubbled = true;                                                                              // 222
                  return;                                                                                              // 223
                }                                                                                                      // 224
              }                                                                                                        // 225
                                                                                                                       //
              module.hideResults();                                                                                    // 226
                                                                                                                       //
              if (value) {                                                                                             // 227
                module.set.value(value);                                                                               // 228
              }                                                                                                        // 229
                                                                                                                       //
              if (href) {                                                                                              // 230
                module.verbose('Opening search link found in result', $link);                                          // 231
                                                                                                                       //
                if (target == '_blank' || event.ctrlKey) {                                                             // 232
                  window.open(href);                                                                                   // 233
                } else {                                                                                               // 234
                  window.location.href = href;                                                                         // 236
                }                                                                                                      // 237
              }                                                                                                        // 238
            }                                                                                                          // 239
          }                                                                                                            // 193
        },                                                                                                             // 147
        handleKeyboard: function (event) {                                                                             // 242
          var // force selector refresh                                                                                // 243
          $result = $module.find(selector.result),                                                                     // 245
              $category = $module.find(selector.category),                                                             // 243
              currentIndex = $result.index($result.filter('.' + className.active)),                                    // 243
              resultSize = $result.length,                                                                             // 243
              keyCode = event.which,                                                                                   // 243
              keys = {                                                                                                 // 243
            backspace: 8,                                                                                              // 252
            enter: 13,                                                                                                 // 253
            escape: 27,                                                                                                // 254
            upArrow: 38,                                                                                               // 255
            downArrow: 40                                                                                              // 256
          },                                                                                                           // 251
              newIndex; // search shortcuts                                                                            // 243
                                                                                                                       //
          if (keyCode == keys.escape) {                                                                                // 261
            module.verbose('Escape key pressed, blurring search field');                                               // 262
            module.trigger.blur();                                                                                     // 263
          }                                                                                                            // 264
                                                                                                                       //
          if (module.is.visible()) {                                                                                   // 265
            if (keyCode == keys.enter) {                                                                               // 266
              module.verbose('Enter key pressed, selecting active result');                                            // 267
                                                                                                                       //
              if ($result.filter('.' + className.active).length > 0) {                                                 // 268
                module.event.result.click.call($result.filter('.' + className.active), event);                         // 269
                event.preventDefault();                                                                                // 270
                return false;                                                                                          // 271
              }                                                                                                        // 272
            } else if (keyCode == keys.upArrow) {                                                                      // 273
              module.verbose('Up key pressed, changing active result');                                                // 275
              newIndex = currentIndex - 1 < 0 ? currentIndex : currentIndex - 1;                                       // 276
              $category.removeClass(className.active);                                                                 // 280
              $result.removeClass(className.active).eq(newIndex).addClass(className.active).closest($category).addClass(className.active);
              event.preventDefault();                                                                                  // 290
            } else if (keyCode == keys.downArrow) {                                                                    // 291
              module.verbose('Down key pressed, changing active result');                                              // 293
              newIndex = currentIndex + 1 >= resultSize ? currentIndex : currentIndex + 1;                             // 294
              $category.removeClass(className.active);                                                                 // 298
              $result.removeClass(className.active).eq(newIndex).addClass(className.active).closest($category).addClass(className.active);
              event.preventDefault();                                                                                  // 308
            }                                                                                                          // 309
          } else {                                                                                                     // 310
            // query shortcuts                                                                                         // 312
            if (keyCode == keys.enter) {                                                                               // 313
              module.verbose('Enter key pressed, executing query');                                                    // 314
              module.query();                                                                                          // 315
              module.set.buttonPressed();                                                                              // 316
              $prompt.one('keyup', module.remove.buttonFocus);                                                         // 317
            }                                                                                                          // 318
          }                                                                                                            // 319
        },                                                                                                             // 320
        setup: {                                                                                                       // 322
          api: function (searchTerm) {                                                                                 // 323
            var apiSettings = {                                                                                        // 324
              debug: settings.debug,                                                                                   // 326
              on: false,                                                                                               // 327
              cache: true,                                                                                             // 328
              action: 'search',                                                                                        // 329
              urlData: {                                                                                               // 330
                query: searchTerm                                                                                      // 331
              },                                                                                                       // 330
              onSuccess: function (response) {                                                                         // 333
                module.parse.response.call(element, response, searchTerm);                                             // 334
              },                                                                                                       // 335
              onAbort: function (response) {},                                                                         // 336
              onFailure: function () {                                                                                 // 338
                module.displayMessage(error.serverError);                                                              // 339
              },                                                                                                       // 340
              onError: module.error                                                                                    // 341
            },                                                                                                         // 325
                searchHTML;                                                                                            // 324
            $.extend(true, apiSettings, settings.apiSettings);                                                         // 345
            module.verbose('Setting up API request', apiSettings);                                                     // 346
            $module.api(apiSettings);                                                                                  // 347
          }                                                                                                            // 348
        },                                                                                                             // 322
        can: {                                                                                                         // 351
          useAPI: function () {                                                                                        // 352
            return $.fn.api !== undefined;                                                                             // 353
          },                                                                                                           // 354
          show: function () {                                                                                          // 355
            return module.is.focused() && !module.is.visible() && !module.is.empty();                                  // 356
          },                                                                                                           // 357
          transition: function () {                                                                                    // 358
            return settings.transition && $.fn.transition !== undefined && $module.transition('is supported');         // 359
          }                                                                                                            // 360
        },                                                                                                             // 351
        is: {                                                                                                          // 363
          animating: function () {                                                                                     // 364
            return $results.hasClass(className.animating);                                                             // 365
          },                                                                                                           // 366
          hidden: function () {                                                                                        // 367
            return $results.hasClass(className.hidden);                                                                // 368
          },                                                                                                           // 369
          inMessage: function (event) {                                                                                // 370
            return event.target && $(event.target).closest(selector.message).length > 0;                               // 371
          },                                                                                                           // 372
          empty: function () {                                                                                         // 373
            return $results.html() === '';                                                                             // 374
          },                                                                                                           // 375
          visible: function () {                                                                                       // 376
            return $results.filter(':visible').length > 0;                                                             // 377
          },                                                                                                           // 378
          focused: function () {                                                                                       // 379
            return $prompt.filter(':focus').length > 0;                                                                // 380
          }                                                                                                            // 381
        },                                                                                                             // 363
        trigger: {                                                                                                     // 384
          blur: function () {                                                                                          // 385
            var events = document.createEvent('HTMLEvents'),                                                           // 386
                promptElement = $prompt[0];                                                                            // 386
                                                                                                                       //
            if (promptElement) {                                                                                       // 390
              module.verbose('Triggering native blur event');                                                          // 391
              events.initEvent('blur', false, false);                                                                  // 392
              promptElement.dispatchEvent(events);                                                                     // 393
            }                                                                                                          // 394
          }                                                                                                            // 395
        },                                                                                                             // 384
        get: {                                                                                                         // 398
          inputEvent: function () {                                                                                    // 399
            var prompt = $prompt[0],                                                                                   // 400
                inputEvent = prompt !== undefined && prompt.oninput !== undefined ? 'input' : prompt !== undefined && prompt.onpropertychange !== undefined ? 'propertychange' : 'keyup';
            return inputEvent;                                                                                         // 408
          },                                                                                                           // 409
          value: function () {                                                                                         // 410
            return $prompt.val();                                                                                      // 411
          },                                                                                                           // 412
          results: function () {                                                                                       // 413
            var results = $module.data(metadata.results);                                                              // 414
            return results;                                                                                            // 417
          },                                                                                                           // 418
          result: function (value, results) {                                                                          // 419
            var lookupFields = ['title', 'id'],                                                                        // 420
                result = false;                                                                                        // 420
            value = value !== undefined ? value : module.get.value();                                                  // 424
            results = results !== undefined ? results : module.get.results();                                          // 428
                                                                                                                       //
            if (settings.type === 'category') {                                                                        // 432
              module.debug('Finding result that matches', value);                                                      // 433
              $.each(results, function (index, category) {                                                             // 434
                if ($.isArray(category.results)) {                                                                     // 435
                  result = module.search.object(value, category.results, lookupFields)[0]; // don't continue searching if a result is found
                                                                                                                       //
                  if (result) {                                                                                        // 438
                    return false;                                                                                      // 439
                  }                                                                                                    // 440
                }                                                                                                      // 441
              });                                                                                                      // 442
            } else {                                                                                                   // 443
              module.debug('Finding result in results object', value);                                                 // 445
              result = module.search.object(value, results, lookupFields)[0];                                          // 446
            }                                                                                                          // 447
                                                                                                                       //
            return result || false;                                                                                    // 448
          }                                                                                                            // 449
        },                                                                                                             // 398
        select: {                                                                                                      // 452
          firstResult: function () {                                                                                   // 453
            module.verbose('Selecting first result');                                                                  // 454
            $result.first().addClass(className.active);                                                                // 455
          }                                                                                                            // 456
        },                                                                                                             // 452
        set: {                                                                                                         // 459
          focus: function () {                                                                                         // 460
            $module.addClass(className.focus);                                                                         // 461
          },                                                                                                           // 462
          loading: function () {                                                                                       // 463
            $module.addClass(className.loading);                                                                       // 464
          },                                                                                                           // 465
          value: function (value) {                                                                                    // 466
            module.verbose('Setting search input value', value);                                                       // 467
            $prompt.val(value);                                                                                        // 468
          },                                                                                                           // 471
          type: function (type) {                                                                                      // 472
            type = type || settings.type;                                                                              // 473
                                                                                                                       //
            if (settings.type == 'category') {                                                                         // 474
              $module.addClass(settings.type);                                                                         // 475
            }                                                                                                          // 476
          },                                                                                                           // 477
          buttonPressed: function () {                                                                                 // 478
            $searchButton.addClass(className.pressed);                                                                 // 479
          }                                                                                                            // 480
        },                                                                                                             // 459
        remove: {                                                                                                      // 483
          loading: function () {                                                                                       // 484
            $module.removeClass(className.loading);                                                                    // 485
          },                                                                                                           // 486
          focus: function () {                                                                                         // 487
            $module.removeClass(className.focus);                                                                      // 488
          },                                                                                                           // 489
          buttonPressed: function () {                                                                                 // 490
            $searchButton.removeClass(className.pressed);                                                              // 491
          }                                                                                                            // 492
        },                                                                                                             // 483
        query: function () {                                                                                           // 495
          var searchTerm = module.get.value(),                                                                         // 496
              cache = module.read.cache(searchTerm);                                                                   // 496
                                                                                                                       //
          if (module.has.minimumCharacters()) {                                                                        // 500
            if (cache) {                                                                                               // 501
              module.debug('Reading result from cache', searchTerm);                                                   // 502
              module.save.results(cache.results);                                                                      // 503
              module.addResults(cache.html);                                                                           // 504
              module.inject.id(cache.results);                                                                         // 505
            } else {                                                                                                   // 506
              module.debug('Querying for', searchTerm);                                                                // 508
                                                                                                                       //
              if ($.isPlainObject(settings.source) || $.isArray(settings.source)) {                                    // 509
                module.search.local(searchTerm);                                                                       // 510
              } else if (module.can.useAPI()) {                                                                        // 511
                module.search.remote(searchTerm);                                                                      // 513
              } else {                                                                                                 // 514
                module.error(error.source);                                                                            // 516
              }                                                                                                        // 517
            }                                                                                                          // 518
                                                                                                                       //
            settings.onSearchQuery.call(element, searchTerm);                                                          // 519
          } else {                                                                                                     // 520
            module.hideResults();                                                                                      // 522
          }                                                                                                            // 523
        },                                                                                                             // 524
        search: {                                                                                                      // 526
          local: function (searchTerm) {                                                                               // 527
            var results = module.search.object(searchTerm, settings.content),                                          // 528
                searchHTML;                                                                                            // 528
            module.set.loading();                                                                                      // 532
            module.save.results(results);                                                                              // 533
            module.debug('Returned local search results', results);                                                    // 534
            searchHTML = module.generateResults({                                                                      // 536
              results: results                                                                                         // 537
            });                                                                                                        // 536
            module.remove.loading();                                                                                   // 539
            module.addResults(searchHTML);                                                                             // 540
            module.inject.id(results);                                                                                 // 541
            module.write.cache(searchTerm, {                                                                           // 542
              html: searchHTML,                                                                                        // 543
              results: results                                                                                         // 544
            });                                                                                                        // 542
          },                                                                                                           // 546
          remote: function (searchTerm) {                                                                              // 547
            if ($module.api('is loading')) {                                                                           // 548
              $module.api('abort');                                                                                    // 549
            }                                                                                                          // 550
                                                                                                                       //
            module.setup.api(searchTerm);                                                                              // 551
            $module.api('query');                                                                                      // 552
          },                                                                                                           // 555
          object: function (searchTerm, source, searchFields) {                                                        // 556
            var results = [],                                                                                          // 557
                fuzzyResults = [],                                                                                     // 557
                searchExp = searchTerm.toString().replace(regExp.escape, '\\$&'),                                      // 557
                matchRegExp = new RegExp(regExp.beginsWith + searchExp, 'i'),                                          // 557
                // avoid duplicates when pushing results                                                               // 557
            addResult = function (array, result) {                                                                     // 564
              var notResult = $.inArray(result, results) == -1,                                                        // 565
                  notFuzzyResult = $.inArray(result, fuzzyResults) == -1;                                              // 565
                                                                                                                       //
              if (notResult && notFuzzyResult) {                                                                       // 569
                array.push(result);                                                                                    // 570
              }                                                                                                        // 571
            };                                                                                                         // 572
                                                                                                                       //
            source = source || settings.source;                                                                        // 574
            searchFields = searchFields !== undefined ? searchFields : settings.searchFields; // search fields should be array to loop correctly
                                                                                                                       //
            if (!$.isArray(searchFields)) {                                                                            // 581
              searchFields = [searchFields];                                                                           // 582
            } // exit conditions if no source                                                                          // 583
                                                                                                                       //
                                                                                                                       //
            if (source === undefined || source === false) {                                                            // 586
              module.error(error.source);                                                                              // 587
              return [];                                                                                               // 588
            } // iterate through search fields looking for matches                                                     // 589
                                                                                                                       //
                                                                                                                       //
            $.each(searchFields, function (index, field) {                                                             // 592
              $.each(source, function (label, content) {                                                               // 593
                var fieldExists = typeof content[field] == 'string';                                                   // 594
                                                                                                                       //
                if (fieldExists) {                                                                                     // 597
                  if (content[field].search(matchRegExp) !== -1) {                                                     // 598
                    // content starts with value (first in results)                                                    // 599
                    addResult(results, content);                                                                       // 600
                  } else if (settings.searchFullText && module.fuzzySearch(searchTerm, content[field])) {              // 601
                    // content fuzzy matches (last in results)                                                         // 603
                    addResult(fuzzyResults, content);                                                                  // 604
                  }                                                                                                    // 605
                }                                                                                                      // 606
              });                                                                                                      // 607
            });                                                                                                        // 608
            return $.merge(results, fuzzyResults);                                                                     // 609
          }                                                                                                            // 610
        },                                                                                                             // 526
        fuzzySearch: function (query, term) {                                                                          // 613
          var termLength = term.length,                                                                                // 614
              queryLength = query.length;                                                                              // 614
                                                                                                                       //
          if (typeof query !== 'string') {                                                                             // 618
            return false;                                                                                              // 619
          }                                                                                                            // 620
                                                                                                                       //
          query = query.toLowerCase();                                                                                 // 621
          term = term.toLowerCase();                                                                                   // 622
                                                                                                                       //
          if (queryLength > termLength) {                                                                              // 623
            return false;                                                                                              // 624
          }                                                                                                            // 625
                                                                                                                       //
          if (queryLength === termLength) {                                                                            // 626
            return query === term;                                                                                     // 627
          }                                                                                                            // 628
                                                                                                                       //
          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {
            var queryCharacter = query.charCodeAt(characterIndex);                                                     // 630
                                                                                                                       //
            while (nextCharacterIndex < termLength) {                                                                  // 633
              if (term.charCodeAt(nextCharacterIndex++) === queryCharacter) {                                          // 634
                continue search;                                                                                       // 635
              }                                                                                                        // 636
            }                                                                                                          // 637
                                                                                                                       //
            return false;                                                                                              // 638
          }                                                                                                            // 639
                                                                                                                       //
          return true;                                                                                                 // 640
        },                                                                                                             // 641
        parse: {                                                                                                       // 643
          response: function (response, searchTerm) {                                                                  // 644
            var searchHTML = module.generateResults(response);                                                         // 645
            module.verbose('Parsing server response', response);                                                       // 648
                                                                                                                       //
            if (response !== undefined) {                                                                              // 649
              if (searchTerm !== undefined && response[fields.results] !== undefined) {                                // 650
                module.addResults(searchHTML);                                                                         // 651
                module.inject.id(response[fields.results]);                                                            // 652
                module.write.cache(searchTerm, {                                                                       // 653
                  html: searchHTML,                                                                                    // 654
                  results: response[fields.results]                                                                    // 655
                });                                                                                                    // 653
                module.save.results(response[fields.results]);                                                         // 657
              }                                                                                                        // 658
            }                                                                                                          // 659
          }                                                                                                            // 660
        },                                                                                                             // 643
        cancel: {                                                                                                      // 663
          query: function () {                                                                                         // 664
            if (module.can.useAPI()) {                                                                                 // 665
              $module.api('abort');                                                                                    // 666
            }                                                                                                          // 667
          }                                                                                                            // 668
        },                                                                                                             // 663
        has: {                                                                                                         // 671
          minimumCharacters: function () {                                                                             // 672
            var searchTerm = module.get.value(),                                                                       // 673
                numCharacters = searchTerm.length;                                                                     // 673
            return numCharacters >= settings.minCharacters;                                                            // 677
          }                                                                                                            // 678
        },                                                                                                             // 671
        clear: {                                                                                                       // 681
          cache: function (value) {                                                                                    // 682
            var cache = $module.data(metadata.cache);                                                                  // 683
                                                                                                                       //
            if (!value) {                                                                                              // 686
              module.debug('Clearing cache', value);                                                                   // 687
              $module.removeData(metadata.cache);                                                                      // 688
            } else if (value && cache && cache[value]) {                                                               // 689
              module.debug('Removing value from cache', value);                                                        // 691
              delete cache[value];                                                                                     // 692
              $module.data(metadata.cache, cache);                                                                     // 693
            }                                                                                                          // 694
          }                                                                                                            // 695
        },                                                                                                             // 681
        read: {                                                                                                        // 698
          cache: function (name) {                                                                                     // 699
            var cache = $module.data(metadata.cache);                                                                  // 700
                                                                                                                       //
            if (settings.cache) {                                                                                      // 703
              module.verbose('Checking cache for generated html for query', name);                                     // 704
              return (typeof cache === "undefined" ? "undefined" : (0, _typeof3.default)(cache)) == 'object' && cache[name] !== undefined ? cache[name] : false;
            }                                                                                                          // 709
                                                                                                                       //
            return false;                                                                                              // 710
          }                                                                                                            // 711
        },                                                                                                             // 698
        create: {                                                                                                      // 714
          id: function (resultIndex, categoryIndex) {                                                                  // 715
            var resultID = resultIndex + 1,                                                                            // 716
                // not zero indexed                                                                                    // 716
            categoryID = categoryIndex + 1,                                                                            // 718
                firstCharCode,                                                                                         // 716
                letterID,                                                                                              // 716
                id;                                                                                                    // 716
                                                                                                                       //
            if (categoryIndex !== undefined) {                                                                         // 723
              // start char code for "A"                                                                               // 724
              letterID = String.fromCharCode(97 + categoryIndex);                                                      // 725
              id = letterID + resultID;                                                                                // 726
              module.verbose('Creating category result id', id);                                                       // 727
            } else {                                                                                                   // 728
              id = resultID;                                                                                           // 730
              module.verbose('Creating result id', id);                                                                // 731
            }                                                                                                          // 732
                                                                                                                       //
            return id;                                                                                                 // 733
          },                                                                                                           // 734
          results: function () {                                                                                       // 735
            if ($results.length === 0) {                                                                               // 736
              $results = $('<div />').addClass(className.results).appendTo($module);                                   // 737
            }                                                                                                          // 741
          }                                                                                                            // 742
        },                                                                                                             // 714
        inject: {                                                                                                      // 745
          result: function (result, resultIndex, categoryIndex) {                                                      // 746
            module.verbose('Injecting result into results');                                                           // 747
            var $selectedResult = categoryIndex !== undefined ? $results.children().eq(categoryIndex).children(selector.result).eq(resultIndex) : $results.children(selector.result).eq(resultIndex);
            module.verbose('Injecting results metadata', $selectedResult);                                             // 756
            $selectedResult.data(metadata.result, result);                                                             // 757
          },                                                                                                           // 760
          id: function (results) {                                                                                     // 761
            module.debug('Injecting unique ids into results');                                                         // 762
            var // since results may be object, we must use counters                                                   // 763
            categoryIndex = 0,                                                                                         // 765
                resultIndex = 0;                                                                                       // 763
                                                                                                                       //
            if (settings.type === 'category') {                                                                        // 768
              // iterate through each category result                                                                  // 769
              $.each(results, function (index, category) {                                                             // 770
                resultIndex = 0;                                                                                       // 771
                $.each(category.results, function (index, value) {                                                     // 772
                  var result = category.results[index];                                                                // 773
                                                                                                                       //
                  if (result.id === undefined) {                                                                       // 776
                    result.id = module.create.id(resultIndex, categoryIndex);                                          // 777
                  }                                                                                                    // 778
                                                                                                                       //
                  module.inject.result(result, resultIndex, categoryIndex);                                            // 779
                  resultIndex++;                                                                                       // 780
                });                                                                                                    // 781
                categoryIndex++;                                                                                       // 782
              });                                                                                                      // 783
            } else {                                                                                                   // 784
              // top level                                                                                             // 786
              $.each(results, function (index, value) {                                                                // 787
                var result = results[index];                                                                           // 788
                                                                                                                       //
                if (result.id === undefined) {                                                                         // 791
                  result.id = module.create.id(resultIndex);                                                           // 792
                }                                                                                                      // 793
                                                                                                                       //
                module.inject.result(result, resultIndex);                                                             // 794
                resultIndex++;                                                                                         // 795
              });                                                                                                      // 796
            }                                                                                                          // 797
                                                                                                                       //
            return results;                                                                                            // 798
          }                                                                                                            // 799
        },                                                                                                             // 745
        save: {                                                                                                        // 802
          results: function (results) {                                                                                // 803
            module.verbose('Saving current search results to metadata', results);                                      // 804
            $module.data(metadata.results, results);                                                                   // 805
          }                                                                                                            // 806
        },                                                                                                             // 802
        write: {                                                                                                       // 809
          cache: function (name, value) {                                                                              // 810
            var cache = $module.data(metadata.cache) !== undefined ? $module.data(metadata.cache) : {};                // 811
                                                                                                                       //
            if (settings.cache) {                                                                                      // 816
              module.verbose('Writing generated html to cache', name, value);                                          // 817
              cache[name] = value;                                                                                     // 818
              $module.data(metadata.cache, cache);                                                                     // 819
            }                                                                                                          // 822
          }                                                                                                            // 823
        },                                                                                                             // 809
        addResults: function (html) {                                                                                  // 826
          if ($.isFunction(settings.onResultsAdd)) {                                                                   // 827
            if (settings.onResultsAdd.call($results, html) === false) {                                                // 828
              module.debug('onResultsAdd callback cancelled default action');                                          // 829
              return false;                                                                                            // 830
            }                                                                                                          // 831
          }                                                                                                            // 832
                                                                                                                       //
          if (html) {                                                                                                  // 833
            $results.html(html);                                                                                       // 834
            module.refreshResults();                                                                                   // 837
                                                                                                                       //
            if (settings.selectFirstResult) {                                                                          // 838
              module.select.firstResult();                                                                             // 839
            }                                                                                                          // 840
                                                                                                                       //
            module.showResults();                                                                                      // 841
          } else {                                                                                                     // 842
            module.hideResults();                                                                                      // 844
          }                                                                                                            // 845
        },                                                                                                             // 846
        showResults: function () {                                                                                     // 848
          if (!module.is.visible()) {                                                                                  // 849
            if (module.can.transition()) {                                                                             // 850
              module.debug('Showing results with css animations');                                                     // 851
              $results.transition({                                                                                    // 852
                animation: settings.transition + ' in',                                                                // 854
                debug: settings.debug,                                                                                 // 855
                verbose: settings.verbose,                                                                             // 856
                duration: settings.duration,                                                                           // 857
                queue: true                                                                                            // 858
              });                                                                                                      // 853
            } else {                                                                                                   // 861
              module.debug('Showing results with javascript');                                                         // 863
              $results.stop().fadeIn(settings.duration, settings.easing);                                              // 864
            }                                                                                                          // 868
                                                                                                                       //
            settings.onResultsOpen.call($results);                                                                     // 869
          }                                                                                                            // 870
        },                                                                                                             // 871
        hideResults: function () {                                                                                     // 872
          if (module.is.visible()) {                                                                                   // 873
            if (module.can.transition()) {                                                                             // 874
              module.debug('Hiding results with css animations');                                                      // 875
              $results.transition({                                                                                    // 876
                animation: settings.transition + ' out',                                                               // 878
                debug: settings.debug,                                                                                 // 879
                verbose: settings.verbose,                                                                             // 880
                duration: settings.duration,                                                                           // 881
                queue: true                                                                                            // 882
              });                                                                                                      // 877
            } else {                                                                                                   // 885
              module.debug('Hiding results with javascript');                                                          // 887
              $results.stop().fadeOut(settings.duration, settings.easing);                                             // 888
            }                                                                                                          // 892
                                                                                                                       //
            settings.onResultsClose.call($results);                                                                    // 893
          }                                                                                                            // 894
        },                                                                                                             // 895
        generateResults: function (response) {                                                                         // 897
          module.debug('Generating html from response', response);                                                     // 898
          var template = settings.templates[settings.type],                                                            // 899
              isProperObject = $.isPlainObject(response[fields.results]) && !$.isEmptyObject(response[fields.results]),
              isProperArray = $.isArray(response[fields.results]) && response[fields.results].length > 0,              // 899
              html = '';                                                                                               // 899
                                                                                                                       //
          if (isProperObject || isProperArray) {                                                                       // 905
            if (settings.maxResults > 0) {                                                                             // 906
              if (isProperObject) {                                                                                    // 907
                if (settings.type == 'standard') {                                                                     // 908
                  module.error(error.maxResults);                                                                      // 909
                }                                                                                                      // 910
              } else {                                                                                                 // 911
                response[fields.results] = response[fields.results].slice(0, settings.maxResults);                     // 913
              }                                                                                                        // 914
            }                                                                                                          // 915
                                                                                                                       //
            if ($.isFunction(template)) {                                                                              // 916
              html = template(response, fields);                                                                       // 917
            } else {                                                                                                   // 918
              module.error(error.noTemplate, false);                                                                   // 920
            }                                                                                                          // 921
          } else if (settings.showNoResults) {                                                                         // 922
            html = module.displayMessage(error.noResults, 'empty');                                                    // 924
          }                                                                                                            // 925
                                                                                                                       //
          settings.onResults.call(element, response);                                                                  // 926
          return html;                                                                                                 // 927
        },                                                                                                             // 928
        displayMessage: function (text, type) {                                                                        // 930
          type = type || 'standard';                                                                                   // 931
          module.debug('Displaying message', text, type);                                                              // 932
          module.addResults(settings.templates.message(text, type));                                                   // 933
          return settings.templates.message(text, type);                                                               // 934
        },                                                                                                             // 935
        setting: function (name, value) {                                                                              // 937
          if ($.isPlainObject(name)) {                                                                                 // 938
            $.extend(true, settings, name);                                                                            // 939
          } else if (value !== undefined) {                                                                            // 940
            settings[name] = value;                                                                                    // 942
          } else {                                                                                                     // 943
            return settings[name];                                                                                     // 945
          }                                                                                                            // 946
        },                                                                                                             // 947
        internal: function (name, value) {                                                                             // 948
          if ($.isPlainObject(name)) {                                                                                 // 949
            $.extend(true, module, name);                                                                              // 950
          } else if (value !== undefined) {                                                                            // 951
            module[name] = value;                                                                                      // 953
          } else {                                                                                                     // 954
            return module[name];                                                                                       // 956
          }                                                                                                            // 957
        },                                                                                                             // 958
        debug: function () {                                                                                           // 959
          if (!settings.silent && settings.debug) {                                                                    // 960
            if (settings.performance) {                                                                                // 961
              module.performance.log(arguments);                                                                       // 962
            } else {                                                                                                   // 963
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 965
              module.debug.apply(console, arguments);                                                                  // 966
            }                                                                                                          // 967
          }                                                                                                            // 968
        },                                                                                                             // 969
        verbose: function () {                                                                                         // 970
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 971
            if (settings.performance) {                                                                                // 972
              module.performance.log(arguments);                                                                       // 973
            } else {                                                                                                   // 974
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 976
              module.verbose.apply(console, arguments);                                                                // 977
            }                                                                                                          // 978
          }                                                                                                            // 979
        },                                                                                                             // 980
        error: function () {                                                                                           // 981
          if (!settings.silent) {                                                                                      // 982
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 983
            module.error.apply(console, arguments);                                                                    // 984
          }                                                                                                            // 985
        },                                                                                                             // 986
        performance: {                                                                                                 // 987
          log: function (message) {                                                                                    // 988
            var currentTime, executionTime, previousTime;                                                              // 989
                                                                                                                       //
            if (settings.performance) {                                                                                // 994
              currentTime = new Date().getTime();                                                                      // 995
              previousTime = time || currentTime;                                                                      // 996
              executionTime = currentTime - previousTime;                                                              // 997
              time = currentTime;                                                                                      // 998
              performance.push({                                                                                       // 999
                'Name': message[0],                                                                                    // 1000
                'Arguments': [].slice.call(message, 1) || '',                                                          // 1001
                'Element': element,                                                                                    // 1002
                'Execution Time': executionTime                                                                        // 1003
              });                                                                                                      // 999
            }                                                                                                          // 1005
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 1006
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 1007
          },                                                                                                           // 1008
          display: function () {                                                                                       // 1009
            var title = settings.name + ':',                                                                           // 1010
                totalTime = 0;                                                                                         // 1010
            time = false;                                                                                              // 1014
            clearTimeout(module.performance.timer);                                                                    // 1015
            $.each(performance, function (index, data) {                                                               // 1016
              totalTime += data['Execution Time'];                                                                     // 1017
            });                                                                                                        // 1018
            title += ' ' + totalTime + 'ms';                                                                           // 1019
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 1020
              title += ' \'' + moduleSelector + '\'';                                                                  // 1021
            }                                                                                                          // 1022
                                                                                                                       //
            if ($allModules.length > 1) {                                                                              // 1023
              title += ' ' + '(' + $allModules.length + ')';                                                           // 1024
            }                                                                                                          // 1025
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 1026
              console.groupCollapsed(title);                                                                           // 1027
                                                                                                                       //
              if (console.table) {                                                                                     // 1028
                console.table(performance);                                                                            // 1029
              } else {                                                                                                 // 1030
                $.each(performance, function (index, data) {                                                           // 1032
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 1033
                });                                                                                                    // 1034
              }                                                                                                        // 1035
                                                                                                                       //
              console.groupEnd();                                                                                      // 1036
            }                                                                                                          // 1037
                                                                                                                       //
            performance = [];                                                                                          // 1038
          }                                                                                                            // 1039
        },                                                                                                             // 987
        invoke: function (query, passedArguments, context) {                                                           // 1041
          var object = instance,                                                                                       // 1042
              maxDepth,                                                                                                // 1042
              found,                                                                                                   // 1042
              response;                                                                                                // 1042
          passedArguments = passedArguments || queryArguments;                                                         // 1048
          context = element || context;                                                                                // 1049
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 1050
            query = query.split(/[\. ]/);                                                                              // 1051
            maxDepth = query.length - 1;                                                                               // 1052
            $.each(query, function (depth, value) {                                                                    // 1053
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 1058
                object = object[camelCaseValue];                                                                       // 1059
              } else if (object[camelCaseValue] !== undefined) {                                                       // 1060
                found = object[camelCaseValue];                                                                        // 1062
                return false;                                                                                          // 1063
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 1064
                object = object[value];                                                                                // 1066
              } else if (object[value] !== undefined) {                                                                // 1067
                found = object[value];                                                                                 // 1069
                return false;                                                                                          // 1070
              } else {                                                                                                 // 1071
                return false;                                                                                          // 1073
              }                                                                                                        // 1074
            });                                                                                                        // 1075
          }                                                                                                            // 1076
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 1077
            response = found.apply(context, passedArguments);                                                          // 1078
          } else if (found !== undefined) {                                                                            // 1079
            response = found;                                                                                          // 1081
          }                                                                                                            // 1082
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 1083
            returnedValue.push(response);                                                                              // 1084
          } else if (returnedValue !== undefined) {                                                                    // 1085
            returnedValue = [returnedValue, response];                                                                 // 1087
          } else if (response !== undefined) {                                                                         // 1088
            returnedValue = response;                                                                                  // 1090
          }                                                                                                            // 1091
                                                                                                                       //
          return found;                                                                                                // 1092
        }                                                                                                              // 1093
      };                                                                                                               // 72
                                                                                                                       //
      if (methodInvoked) {                                                                                             // 1095
        if (instance === undefined) {                                                                                  // 1096
          module.initialize();                                                                                         // 1097
        }                                                                                                              // 1098
                                                                                                                       //
        module.invoke(query);                                                                                          // 1099
      } else {                                                                                                         // 1100
        if (instance !== undefined) {                                                                                  // 1102
          instance.invoke('destroy');                                                                                  // 1103
        }                                                                                                              // 1104
                                                                                                                       //
        module.initialize();                                                                                           // 1105
      }                                                                                                                // 1106
    });                                                                                                                // 1108
    return returnedValue !== undefined ? returnedValue : this;                                                         // 1111
  };                                                                                                                   // 1115
                                                                                                                       //
  $.fn.search.settings = {                                                                                             // 1117
    name: 'Search',                                                                                                    // 1119
    namespace: 'search',                                                                                               // 1120
    silent: false,                                                                                                     // 1122
    debug: false,                                                                                                      // 1123
    verbose: false,                                                                                                    // 1124
    performance: true,                                                                                                 // 1125
    // template to use (specified in settings.templates)                                                               // 1127
    type: 'standard',                                                                                                  // 1128
    // minimum characters required to search                                                                           // 1130
    minCharacters: 1,                                                                                                  // 1131
    // whether to select first result after searching automatically                                                    // 1133
    selectFirstResult: false,                                                                                          // 1134
    // API config                                                                                                      // 1136
    apiSettings: false,                                                                                                // 1137
    // object to search                                                                                                // 1139
    source: false,                                                                                                     // 1140
    // fields to search                                                                                                // 1142
    searchFields: ['title', 'description'],                                                                            // 1143
    // field to display in standard results template                                                                   // 1148
    displayField: '',                                                                                                  // 1149
    // whether to include fuzzy results in local search                                                                // 1151
    searchFullText: true,                                                                                              // 1152
    // whether to add events to prompt automatically                                                                   // 1154
    automatic: true,                                                                                                   // 1155
    // delay before hiding menu after blur                                                                             // 1157
    hideDelay: 0,                                                                                                      // 1158
    // delay before searching                                                                                          // 1160
    searchDelay: 200,                                                                                                  // 1161
    // maximum results returned from local                                                                             // 1163
    maxResults: 7,                                                                                                     // 1164
    // whether to store lookups in local cache                                                                         // 1166
    cache: true,                                                                                                       // 1167
    // whether no results errors should be shown                                                                       // 1169
    showNoResults: true,                                                                                               // 1170
    // transition settings                                                                                             // 1172
    transition: 'scale',                                                                                               // 1173
    duration: 200,                                                                                                     // 1174
    easing: 'easeOutExpo',                                                                                             // 1175
    // callbacks                                                                                                       // 1177
    onSelect: false,                                                                                                   // 1178
    onResultsAdd: false,                                                                                               // 1179
    onSearchQuery: function (query) {},                                                                                // 1181
    onResults: function (response) {},                                                                                 // 1182
    onResultsOpen: function () {},                                                                                     // 1184
    onResultsClose: function () {},                                                                                    // 1185
    className: {                                                                                                       // 1187
      animating: 'animating',                                                                                          // 1188
      active: 'active',                                                                                                // 1189
      empty: 'empty',                                                                                                  // 1190
      focus: 'focus',                                                                                                  // 1191
      hidden: 'hidden',                                                                                                // 1192
      loading: 'loading',                                                                                              // 1193
      results: 'results',                                                                                              // 1194
      pressed: 'down'                                                                                                  // 1195
    },                                                                                                                 // 1187
    error: {                                                                                                           // 1198
      source: 'Cannot search. No source used, and Semantic API module was not included',                               // 1199
      noResults: 'Your search returned no results',                                                                    // 1200
      logging: 'Error in debug logging, exiting.',                                                                     // 1201
      noEndpoint: 'No search endpoint was specified',                                                                  // 1202
      noTemplate: 'A valid template name was not specified.',                                                          // 1203
      serverError: 'There was an issue querying the server.',                                                          // 1204
      maxResults: 'Results must be an array to use maxResults setting',                                                // 1205
      method: 'The method you called is not defined.'                                                                  // 1206
    },                                                                                                                 // 1198
    metadata: {                                                                                                        // 1209
      cache: 'cache',                                                                                                  // 1210
      results: 'results',                                                                                              // 1211
      result: 'result'                                                                                                 // 1212
    },                                                                                                                 // 1209
    regExp: {                                                                                                          // 1215
      escape: /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,                                                                   // 1216
      beginsWith: '(?:\s|^)'                                                                                           // 1217
    },                                                                                                                 // 1215
    // maps api response attributes to internal representation                                                         // 1220
    fields: {                                                                                                          // 1221
      categories: 'results',                                                                                           // 1222
      // array of categories (category view)                                                                           // 1222
      categoryName: 'name',                                                                                            // 1223
      // name of category (category view)                                                                              // 1223
      categoryResults: 'results',                                                                                      // 1224
      // array of results (category view)                                                                              // 1224
      description: 'description',                                                                                      // 1225
      // result description                                                                                            // 1225
      image: 'image',                                                                                                  // 1226
      // result image                                                                                                  // 1226
      price: 'price',                                                                                                  // 1227
      // result price                                                                                                  // 1227
      results: 'results',                                                                                              // 1228
      // array of results (standard)                                                                                   // 1228
      title: 'title',                                                                                                  // 1229
      // result title                                                                                                  // 1229
      url: 'url',                                                                                                      // 1230
      // result url                                                                                                    // 1230
      action: 'action',                                                                                                // 1231
      // "view more" object name                                                                                       // 1231
      actionText: 'text',                                                                                              // 1232
      // "view more" text                                                                                              // 1232
      actionURL: 'url' // "view more" url                                                                              // 1233
                                                                                                                       //
    },                                                                                                                 // 1221
    selector: {                                                                                                        // 1236
      prompt: '.prompt',                                                                                               // 1237
      searchButton: '.search.button',                                                                                  // 1238
      results: '.results',                                                                                             // 1239
      message: '.results > .message',                                                                                  // 1240
      category: '.category',                                                                                           // 1241
      result: '.result',                                                                                               // 1242
      title: '.title, .name'                                                                                           // 1243
    },                                                                                                                 // 1236
    templates: {                                                                                                       // 1246
      escape: function (string) {                                                                                      // 1247
        var badChars = /[&<>"'`]/g,                                                                                    // 1248
            shouldEscape = /[&<>"'`]/,                                                                                 // 1248
            escape = {                                                                                                 // 1248
          "&": "&amp;",                                                                                                // 1252
          "<": "&lt;",                                                                                                 // 1253
          ">": "&gt;",                                                                                                 // 1254
          '"': "&quot;",                                                                                               // 1255
          "'": "&#x27;",                                                                                               // 1256
          "`": "&#x60;"                                                                                                // 1257
        },                                                                                                             // 1251
            escapedChar = function (chr) {                                                                             // 1248
          return escape[chr];                                                                                          // 1260
        };                                                                                                             // 1261
                                                                                                                       //
        if (shouldEscape.test(string)) {                                                                               // 1263
          return string.replace(badChars, escapedChar);                                                                // 1264
        }                                                                                                              // 1265
                                                                                                                       //
        return string;                                                                                                 // 1266
      },                                                                                                               // 1267
      message: function (message, type) {                                                                              // 1268
        var html = '';                                                                                                 // 1269
                                                                                                                       //
        if (message !== undefined && type !== undefined) {                                                             // 1272
          html += '' + '<div class="message ' + type + '">'; // message type                                           // 1273
                                                                                                                       //
          if (type == 'empty') {                                                                                       // 1277
            html += '' + '<div class="header">No Results</div class="header">' + '<div class="description">' + message + '</div class="description">';
          } else {                                                                                                     // 1282
            html += ' <div class="description">' + message + '</div>';                                                 // 1284
          }                                                                                                            // 1285
                                                                                                                       //
          html += '</div>';                                                                                            // 1286
        }                                                                                                              // 1287
                                                                                                                       //
        return html;                                                                                                   // 1288
      },                                                                                                               // 1289
      category: function (response, fields) {                                                                          // 1290
        var html = '',                                                                                                 // 1291
            escape = $.fn.search.settings.templates.escape;                                                            // 1291
                                                                                                                       //
        if (response[fields.categoryResults] !== undefined) {                                                          // 1295
          // each category                                                                                             // 1297
          $.each(response[fields.categoryResults], function (index, category) {                                        // 1298
            if (category[fields.results] !== undefined && category.results.length > 0) {                               // 1299
              html += '<div class="category">';                                                                        // 1301
                                                                                                                       //
              if (category[fields.categoryName] !== undefined) {                                                       // 1303
                html += '<div class="name">' + category[fields.categoryName] + '</div>';                               // 1304
              } // each item inside category                                                                           // 1305
                                                                                                                       //
                                                                                                                       //
              $.each(category.results, function (index, result) {                                                      // 1308
                if (result[fields.url]) {                                                                              // 1309
                  html += '<a class="result" href="' + result[fields.url] + '">';                                      // 1310
                } else {                                                                                               // 1311
                  html += '<a class="result">';                                                                        // 1313
                }                                                                                                      // 1314
                                                                                                                       //
                if (result[fields.image] !== undefined) {                                                              // 1315
                  html += '' + '<div class="image">' + ' <img src="' + result[fields.image] + '">' + '</div>';         // 1316
                }                                                                                                      // 1321
                                                                                                                       //
                html += '<div class="content">';                                                                       // 1322
                                                                                                                       //
                if (result[fields.price] !== undefined) {                                                              // 1323
                  html += '<div class="price">' + result[fields.price] + '</div>';                                     // 1324
                }                                                                                                      // 1325
                                                                                                                       //
                if (result[fields.title] !== undefined) {                                                              // 1326
                  html += '<div class="title">' + result[fields.title] + '</div>';                                     // 1327
                }                                                                                                      // 1328
                                                                                                                       //
                if (result[fields.description] !== undefined) {                                                        // 1329
                  html += '<div class="description">' + result[fields.description] + '</div>';                         // 1330
                }                                                                                                      // 1331
                                                                                                                       //
                html += '' + '</div>';                                                                                 // 1332
                html += '</a>';                                                                                        // 1335
              });                                                                                                      // 1336
              html += '' + '</div>';                                                                                   // 1337
            }                                                                                                          // 1340
          });                                                                                                          // 1341
                                                                                                                       //
          if (response[fields.action]) {                                                                               // 1342
            html += '' + '<a href="' + response[fields.action][fields.actionURL] + '" class="action">' + response[fields.action][fields.actionText] + '</a>';
          }                                                                                                            // 1347
                                                                                                                       //
          return html;                                                                                                 // 1348
        }                                                                                                              // 1349
                                                                                                                       //
        return false;                                                                                                  // 1350
      },                                                                                                               // 1351
      standard: function (response, fields) {                                                                          // 1352
        var html = '';                                                                                                 // 1353
                                                                                                                       //
        if (response[fields.results] !== undefined) {                                                                  // 1356
          // each result                                                                                               // 1358
          $.each(response[fields.results], function (index, result) {                                                  // 1359
            if (result[fields.url]) {                                                                                  // 1360
              html += '<a class="result" href="' + result[fields.url] + '">';                                          // 1361
            } else {                                                                                                   // 1362
              html += '<a class="result">';                                                                            // 1364
            }                                                                                                          // 1365
                                                                                                                       //
            if (result[fields.image] !== undefined) {                                                                  // 1366
              html += '' + '<div class="image">' + ' <img src="' + result[fields.image] + '">' + '</div>';             // 1367
            }                                                                                                          // 1372
                                                                                                                       //
            html += '<div class="content">';                                                                           // 1373
                                                                                                                       //
            if (result[fields.price] !== undefined) {                                                                  // 1374
              html += '<div class="price">' + result[fields.price] + '</div>';                                         // 1375
            }                                                                                                          // 1376
                                                                                                                       //
            if (result[fields.title] !== undefined) {                                                                  // 1377
              html += '<div class="title">' + result[fields.title] + '</div>';                                         // 1378
            }                                                                                                          // 1379
                                                                                                                       //
            if (result[fields.description] !== undefined) {                                                            // 1380
              html += '<div class="description">' + result[fields.description] + '</div>';                             // 1381
            }                                                                                                          // 1382
                                                                                                                       //
            html += '' + '</div>';                                                                                     // 1383
            html += '</a>';                                                                                            // 1386
          });                                                                                                          // 1387
                                                                                                                       //
          if (response[fields.action]) {                                                                               // 1389
            html += '' + '<a href="' + response[fields.action][fields.actionURL] + '" class="action">' + response[fields.action][fields.actionText] + '</a>';
          }                                                                                                            // 1394
                                                                                                                       //
          return html;                                                                                                 // 1395
        }                                                                                                              // 1396
                                                                                                                       //
        return false;                                                                                                  // 1397
      }                                                                                                                // 1398
    }                                                                                                                  // 1246
  };                                                                                                                   // 1117
})(jQuery, window, document);                                                                                          // 1402
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"shape.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/modules/shape.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Shape                                                                                            //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.shape = function (parameters) {                                                                                 // 26
    var $allModules = $(this),                                                                                         // 27
        $body = $('body'),                                                                                             // 27
        time = new Date().getTime(),                                                                                   // 27
        performance = [],                                                                                              // 27
        query = arguments[0],                                                                                          // 27
        methodInvoked = typeof query == 'string',                                                                      // 27
        queryArguments = [].slice.call(arguments, 1),                                                                  // 27
        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
      setTimeout(callback, 0);                                                                                         // 42
    },                                                                                                                 // 42
        returnedValue;                                                                                                 // 27
                                                                                                                       //
    $allModules.each(function () {                                                                                     // 47
      var moduleSelector = $allModules.selector || '',                                                                 // 49
          settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.shape.settings, parameters) : $.extend({}, $.fn.shape.settings),
          // internal aliases                                                                                          // 49
      namespace = settings.namespace,                                                                                  // 56
          selector = settings.selector,                                                                                // 49
          error = settings.error,                                                                                      // 49
          className = settings.className,                                                                              // 49
          // define namespaces for modules                                                                             // 49
      eventNamespace = '.' + namespace,                                                                                // 62
          moduleNamespace = 'module-' + namespace,                                                                     // 49
          // selector cache                                                                                            // 49
      $module = $(this),                                                                                               // 66
          $sides = $module.find(selector.sides),                                                                       // 49
          $side = $module.find(selector.side),                                                                         // 49
          // private variables                                                                                         // 49
      nextIndex = false,                                                                                               // 71
          $activeSide,                                                                                                 // 49
          $nextSide,                                                                                                   // 49
          // standard module                                                                                           // 49
      element = this,                                                                                                  // 76
          instance = $module.data(moduleNamespace),                                                                    // 49
          module;                                                                                                      // 49
      module = {                                                                                                       // 81
        initialize: function () {                                                                                      // 83
          module.verbose('Initializing module for', element);                                                          // 84
          module.set.defaultSide();                                                                                    // 85
          module.instantiate();                                                                                        // 86
        },                                                                                                             // 87
        instantiate: function () {                                                                                     // 89
          module.verbose('Storing instance of module', module);                                                        // 90
          instance = module;                                                                                           // 91
          $module.data(moduleNamespace, instance);                                                                     // 92
        },                                                                                                             // 95
        destroy: function () {                                                                                         // 97
          module.verbose('Destroying previous module for', element);                                                   // 98
          $module.removeData(moduleNamespace).off(eventNamespace);                                                     // 99
        },                                                                                                             // 103
        refresh: function () {                                                                                         // 105
          module.verbose('Refreshing selector cache for', element);                                                    // 106
          $module = $(element);                                                                                        // 107
          $sides = $(this).find(selector.shape);                                                                       // 108
          $side = $(this).find(selector.side);                                                                         // 109
        },                                                                                                             // 110
        repaint: function () {                                                                                         // 112
          module.verbose('Forcing repaint event');                                                                     // 113
          var shape = $sides[0] || document.createElement('div'),                                                      // 114
              fakeAssignment = shape.offsetWidth;                                                                      // 114
        },                                                                                                             // 118
        animate: function (propertyObject, callback) {                                                                 // 120
          module.verbose('Animating box with properties', propertyObject);                                             // 121
                                                                                                                       //
          callback = callback || function (event) {                                                                    // 122
            module.verbose('Executing animation callback');                                                            // 123
                                                                                                                       //
            if (event !== undefined) {                                                                                 // 124
              event.stopPropagation();                                                                                 // 125
            }                                                                                                          // 126
                                                                                                                       //
            module.reset();                                                                                            // 127
            module.set.active();                                                                                       // 128
          };                                                                                                           // 129
                                                                                                                       //
          settings.beforeChange.call($nextSide[0]);                                                                    // 130
                                                                                                                       //
          if (module.get.transitionEvent()) {                                                                          // 131
            module.verbose('Starting CSS animation');                                                                  // 132
            $module.addClass(className.animating);                                                                     // 133
            $sides.css(propertyObject).one(module.get.transitionEvent(), callback);                                    // 136
            module.set.duration(settings.duration);                                                                    // 140
            requestAnimationFrame(function () {                                                                        // 141
              $module.addClass(className.animating);                                                                   // 142
              $activeSide.addClass(className.hidden);                                                                  // 145
            });                                                                                                        // 148
          } else {                                                                                                     // 149
            callback();                                                                                                // 151
          }                                                                                                            // 152
        },                                                                                                             // 153
        queue: function (method) {                                                                                     // 155
          module.debug('Queueing animation of', method);                                                               // 156
          $sides.one(module.get.transitionEvent(), function () {                                                       // 157
            module.debug('Executing queued animation');                                                                // 159
            setTimeout(function () {                                                                                   // 160
              $module.shape(method);                                                                                   // 161
            }, 0);                                                                                                     // 162
          });                                                                                                          // 163
        },                                                                                                             // 165
        reset: function () {                                                                                           // 167
          module.verbose('Animating states reset');                                                                    // 168
          $module.removeClass(className.animating).attr('style', '').removeAttr('style'); // removeAttr style does not consistently work in safari
                                                                                                                       //
          $sides.attr('style', '').removeAttr('style');                                                                // 175
          $side.attr('style', '').removeAttr('style').removeClass(className.hidden);                                   // 179
          $nextSide.removeClass(className.animating).attr('style', '').removeAttr('style');                            // 184
        },                                                                                                             // 189
        is: {                                                                                                          // 191
          complete: function () {                                                                                      // 192
            return $side.filter('.' + className.active)[0] == $nextSide[0];                                            // 193
          },                                                                                                           // 194
          animating: function () {                                                                                     // 195
            return $module.hasClass(className.animating);                                                              // 196
          }                                                                                                            // 197
        },                                                                                                             // 191
        set: {                                                                                                         // 200
          defaultSide: function () {                                                                                   // 202
            $activeSide = $module.find('.' + settings.className.active);                                               // 203
            $nextSide = $activeSide.next(selector.side).length > 0 ? $activeSide.next(selector.side) : $module.find(selector.side).first();
            nextIndex = false;                                                                                         // 208
            module.verbose('Active side set to', $activeSide);                                                         // 209
            module.verbose('Next side set to', $nextSide);                                                             // 210
          },                                                                                                           // 211
          duration: function (duration) {                                                                              // 213
            duration = duration || settings.duration;                                                                  // 214
            duration = typeof duration == 'number' ? duration + 'ms' : duration;                                       // 215
            module.verbose('Setting animation duration', duration);                                                    // 219
                                                                                                                       //
            if (settings.duration || settings.duration === 0) {                                                        // 220
              $sides.add($side).css({                                                                                  // 221
                '-webkit-transition-duration': duration,                                                               // 223
                '-moz-transition-duration': duration,                                                                  // 224
                '-ms-transition-duration': duration,                                                                   // 225
                '-o-transition-duration': duration,                                                                    // 226
                'transition-duration': duration                                                                        // 227
              });                                                                                                      // 222
            }                                                                                                          // 230
          },                                                                                                           // 231
          currentStageSize: function () {                                                                              // 233
            var $activeSide = $module.find('.' + settings.className.active),                                           // 234
                width = $activeSide.outerWidth(true),                                                                  // 234
                height = $activeSide.outerHeight(true);                                                                // 234
            $module.css({                                                                                              // 239
              width: width,                                                                                            // 241
              height: height                                                                                           // 242
            });                                                                                                        // 240
          },                                                                                                           // 245
          stageSize: function () {                                                                                     // 247
            var $clone = $module.clone().addClass(className.loading),                                                  // 248
                $activeSide = $clone.find('.' + settings.className.active),                                            // 248
                newWidth = settings.width == 'next' ? $nextSide.outerWidth(true) : settings.width == 'initial' ? $module.width() : settings.width,
                newHeight = settings.height == 'next' ? $nextSide.outerHeight(true) : settings.height == 'initial' ? $module.height() : settings.height,
                $nextSide = nextIndex ? $clone.find(selector.side).eq(nextIndex) : $activeSide.next(selector.side).length > 0 ? $activeSide.next(selector.side) : $clone.find(selector.side).first();
            $activeSide.removeClass(className.active);                                                                 // 267
            $nextSide.addClass(className.active);                                                                      // 268
            $clone.insertAfter($module);                                                                               // 269
            $clone.remove();                                                                                           // 270
                                                                                                                       //
            if (settings.width != 'auto') {                                                                            // 271
              $module.css('width', newWidth + settings.jitter);                                                        // 272
              module.verbose('Specifying width during animation', newWidth);                                           // 273
            }                                                                                                          // 274
                                                                                                                       //
            if (settings.height != 'auto') {                                                                           // 275
              $module.css('height', newHeight + settings.jitter);                                                      // 276
              module.verbose('Specifying height during animation', newHeight);                                         // 277
            }                                                                                                          // 278
          },                                                                                                           // 279
          nextSide: function (selector) {                                                                              // 281
            nextIndex = selector;                                                                                      // 282
            $nextSide = $side.filter(selector);                                                                        // 283
            nextIndex = $side.index($nextSide);                                                                        // 284
                                                                                                                       //
            if ($nextSide.length === 0) {                                                                              // 285
              module.set.defaultSide();                                                                                // 286
              module.error(error.side);                                                                                // 287
            }                                                                                                          // 288
                                                                                                                       //
            module.verbose('Next side manually set to', $nextSide);                                                    // 289
          },                                                                                                           // 290
          active: function () {                                                                                        // 292
            module.verbose('Setting new side to active', $nextSide);                                                   // 293
            $side.removeClass(className.active);                                                                       // 294
            $nextSide.addClass(className.active);                                                                      // 297
            settings.onChange.call($nextSide[0]);                                                                      // 300
            module.set.defaultSide();                                                                                  // 301
          }                                                                                                            // 302
        },                                                                                                             // 200
        flip: {                                                                                                        // 305
          up: function () {                                                                                            // 307
            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {                            // 308
              module.debug('Side already visible', $nextSide);                                                         // 309
              return;                                                                                                  // 310
            }                                                                                                          // 311
                                                                                                                       //
            if (!module.is.animating()) {                                                                              // 312
              module.debug('Flipping up', $nextSide);                                                                  // 313
              module.set.stageSize();                                                                                  // 314
              module.stage.above();                                                                                    // 315
              module.animate(module.get.transform.up());                                                               // 316
            } else {                                                                                                   // 317
              module.queue('flip up');                                                                                 // 319
            }                                                                                                          // 320
          },                                                                                                           // 321
          down: function () {                                                                                          // 323
            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {                            // 324
              module.debug('Side already visible', $nextSide);                                                         // 325
              return;                                                                                                  // 326
            }                                                                                                          // 327
                                                                                                                       //
            if (!module.is.animating()) {                                                                              // 328
              module.debug('Flipping down', $nextSide);                                                                // 329
              module.set.stageSize();                                                                                  // 330
              module.stage.below();                                                                                    // 331
              module.animate(module.get.transform.down());                                                             // 332
            } else {                                                                                                   // 333
              module.queue('flip down');                                                                               // 335
            }                                                                                                          // 336
          },                                                                                                           // 337
          left: function () {                                                                                          // 339
            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {                            // 340
              module.debug('Side already visible', $nextSide);                                                         // 341
              return;                                                                                                  // 342
            }                                                                                                          // 343
                                                                                                                       //
            if (!module.is.animating()) {                                                                              // 344
              module.debug('Flipping left', $nextSide);                                                                // 345
              module.set.stageSize();                                                                                  // 346
              module.stage.left();                                                                                     // 347
              module.animate(module.get.transform.left());                                                             // 348
            } else {                                                                                                   // 349
              module.queue('flip left');                                                                               // 351
            }                                                                                                          // 352
          },                                                                                                           // 353
          right: function () {                                                                                         // 355
            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {                            // 356
              module.debug('Side already visible', $nextSide);                                                         // 357
              return;                                                                                                  // 358
            }                                                                                                          // 359
                                                                                                                       //
            if (!module.is.animating()) {                                                                              // 360
              module.debug('Flipping right', $nextSide);                                                               // 361
              module.set.stageSize();                                                                                  // 362
              module.stage.right();                                                                                    // 363
              module.animate(module.get.transform.right());                                                            // 364
            } else {                                                                                                   // 365
              module.queue('flip right');                                                                              // 367
            }                                                                                                          // 368
          },                                                                                                           // 369
          over: function () {                                                                                          // 371
            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {                            // 372
              module.debug('Side already visible', $nextSide);                                                         // 373
              return;                                                                                                  // 374
            }                                                                                                          // 375
                                                                                                                       //
            if (!module.is.animating()) {                                                                              // 376
              module.debug('Flipping over', $nextSide);                                                                // 377
              module.set.stageSize();                                                                                  // 378
              module.stage.behind();                                                                                   // 379
              module.animate(module.get.transform.over());                                                             // 380
            } else {                                                                                                   // 381
              module.queue('flip over');                                                                               // 383
            }                                                                                                          // 384
          },                                                                                                           // 385
          back: function () {                                                                                          // 387
            if (module.is.complete() && !module.is.animating() && !settings.allowRepeats) {                            // 388
              module.debug('Side already visible', $nextSide);                                                         // 389
              return;                                                                                                  // 390
            }                                                                                                          // 391
                                                                                                                       //
            if (!module.is.animating()) {                                                                              // 392
              module.debug('Flipping back', $nextSide);                                                                // 393
              module.set.stageSize();                                                                                  // 394
              module.stage.behind();                                                                                   // 395
              module.animate(module.get.transform.back());                                                             // 396
            } else {                                                                                                   // 397
              module.queue('flip back');                                                                               // 399
            }                                                                                                          // 400
          }                                                                                                            // 401
        },                                                                                                             // 305
        get: {                                                                                                         // 405
          transform: {                                                                                                 // 407
            up: function () {                                                                                          // 408
              var translate = {                                                                                        // 409
                y: -(($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),                               // 411
                z: -($activeSide.outerHeight(true) / 2)                                                                // 412
              };                                                                                                       // 410
              return {                                                                                                 // 415
                transform: 'translateY(' + translate.y + 'px) translateZ(' + translate.z + 'px) rotateX(-90deg)'       // 416
              };                                                                                                       // 415
            },                                                                                                         // 418
            down: function () {                                                                                        // 420
              var translate = {                                                                                        // 421
                y: -(($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),                               // 423
                z: -($activeSide.outerHeight(true) / 2)                                                                // 424
              };                                                                                                       // 422
              return {                                                                                                 // 427
                transform: 'translateY(' + translate.y + 'px) translateZ(' + translate.z + 'px) rotateX(90deg)'        // 428
              };                                                                                                       // 427
            },                                                                                                         // 430
            left: function () {                                                                                        // 432
              var translate = {                                                                                        // 433
                x: -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2),                                 // 435
                z: -($activeSide.outerWidth(true) / 2)                                                                 // 436
              };                                                                                                       // 434
              return {                                                                                                 // 439
                transform: 'translateX(' + translate.x + 'px) translateZ(' + translate.z + 'px) rotateY(90deg)'        // 440
              };                                                                                                       // 439
            },                                                                                                         // 442
            right: function () {                                                                                       // 444
              var translate = {                                                                                        // 445
                x: -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2),                                 // 447
                z: -($activeSide.outerWidth(true) / 2)                                                                 // 448
              };                                                                                                       // 446
              return {                                                                                                 // 451
                transform: 'translateX(' + translate.x + 'px) translateZ(' + translate.z + 'px) rotateY(-90deg)'       // 452
              };                                                                                                       // 451
            },                                                                                                         // 454
            over: function () {                                                                                        // 456
              var translate = {                                                                                        // 457
                x: -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2)                                  // 459
              };                                                                                                       // 458
              return {                                                                                                 // 462
                transform: 'translateX(' + translate.x + 'px) rotateY(180deg)'                                         // 463
              };                                                                                                       // 462
            },                                                                                                         // 465
            back: function () {                                                                                        // 467
              var translate = {                                                                                        // 468
                x: -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2)                                  // 470
              };                                                                                                       // 469
              return {                                                                                                 // 473
                transform: 'translateX(' + translate.x + 'px) rotateY(-180deg)'                                        // 474
              };                                                                                                       // 473
            }                                                                                                          // 476
          },                                                                                                           // 407
          transitionEvent: function () {                                                                               // 479
            var element = document.createElement('element'),                                                           // 480
                transitions = {                                                                                        // 480
              'transition': 'transitionend',                                                                           // 483
              'OTransition': 'oTransitionEnd',                                                                         // 484
              'MozTransition': 'transitionend',                                                                        // 485
              'WebkitTransition': 'webkitTransitionEnd'                                                                // 486
            },                                                                                                         // 482
                transition;                                                                                            // 480
                                                                                                                       //
            for (transition in meteorBabelHelpers.sanitizeForInObject(transitions)) {                                  // 490
              if (element.style[transition] !== undefined) {                                                           // 491
                return transitions[transition];                                                                        // 492
              }                                                                                                        // 493
            }                                                                                                          // 494
          },                                                                                                           // 495
          nextSide: function () {                                                                                      // 497
            return $activeSide.next(selector.side).length > 0 ? $activeSide.next(selector.side) : $module.find(selector.side).first();
          }                                                                                                            // 502
        },                                                                                                             // 405
        stage: {                                                                                                       // 506
          above: function () {                                                                                         // 508
            var box = {                                                                                                // 509
              origin: ($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2,                               // 511
              depth: {                                                                                                 // 512
                active: $nextSide.outerHeight(true) / 2,                                                               // 513
                next: $activeSide.outerHeight(true) / 2                                                                // 514
              }                                                                                                        // 512
            };                                                                                                         // 510
            module.verbose('Setting the initial animation position as above', $nextSide, box);                         // 518
            $sides.css({                                                                                               // 519
              'transform': 'translateZ(-' + box.depth.active + 'px)'                                                   // 521
            });                                                                                                        // 520
            $activeSide.css({                                                                                          // 524
              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'                                      // 526
            });                                                                                                        // 525
            $nextSide.addClass(className.animating).css({                                                              // 529
              'top': box.origin + 'px',                                                                                // 532
              'transform': 'rotateX(90deg) translateZ(' + box.depth.next + 'px)'                                       // 533
            });                                                                                                        // 531
          },                                                                                                           // 536
          below: function () {                                                                                         // 538
            var box = {                                                                                                // 539
              origin: ($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2,                               // 541
              depth: {                                                                                                 // 542
                active: $nextSide.outerHeight(true) / 2,                                                               // 543
                next: $activeSide.outerHeight(true) / 2                                                                // 544
              }                                                                                                        // 542
            };                                                                                                         // 540
            module.verbose('Setting the initial animation position as below', $nextSide, box);                         // 548
            $sides.css({                                                                                               // 549
              'transform': 'translateZ(-' + box.depth.active + 'px)'                                                   // 551
            });                                                                                                        // 550
            $activeSide.css({                                                                                          // 554
              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'                                      // 556
            });                                                                                                        // 555
            $nextSide.addClass(className.animating).css({                                                              // 559
              'top': box.origin + 'px',                                                                                // 562
              'transform': 'rotateX(-90deg) translateZ(' + box.depth.next + 'px)'                                      // 563
            });                                                                                                        // 561
          },                                                                                                           // 566
          left: function () {                                                                                          // 568
            var height = {                                                                                             // 569
              active: $activeSide.outerWidth(true),                                                                    // 571
              next: $nextSide.outerWidth(true)                                                                         // 572
            },                                                                                                         // 570
                box = {                                                                                                // 569
              origin: (height.active - height.next) / 2,                                                               // 575
              depth: {                                                                                                 // 576
                active: height.next / 2,                                                                               // 577
                next: height.active / 2                                                                                // 578
              }                                                                                                        // 576
            };                                                                                                         // 574
            module.verbose('Setting the initial animation position as left', $nextSide, box);                          // 582
            $sides.css({                                                                                               // 583
              'transform': 'translateZ(-' + box.depth.active + 'px)'                                                   // 585
            });                                                                                                        // 584
            $activeSide.css({                                                                                          // 588
              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'                                      // 590
            });                                                                                                        // 589
            $nextSide.addClass(className.animating).css({                                                              // 593
              'left': box.origin + 'px',                                                                               // 596
              'transform': 'rotateY(-90deg) translateZ(' + box.depth.next + 'px)'                                      // 597
            });                                                                                                        // 595
          },                                                                                                           // 600
          right: function () {                                                                                         // 602
            var height = {                                                                                             // 603
              active: $activeSide.outerWidth(true),                                                                    // 605
              next: $nextSide.outerWidth(true)                                                                         // 606
            },                                                                                                         // 604
                box = {                                                                                                // 603
              origin: (height.active - height.next) / 2,                                                               // 609
              depth: {                                                                                                 // 610
                active: height.next / 2,                                                                               // 611
                next: height.active / 2                                                                                // 612
              }                                                                                                        // 610
            };                                                                                                         // 608
            module.verbose('Setting the initial animation position as left', $nextSide, box);                          // 616
            $sides.css({                                                                                               // 617
              'transform': 'translateZ(-' + box.depth.active + 'px)'                                                   // 619
            });                                                                                                        // 618
            $activeSide.css({                                                                                          // 622
              'transform': 'rotateY(0deg) translateZ(' + box.depth.active + 'px)'                                      // 624
            });                                                                                                        // 623
            $nextSide.addClass(className.animating).css({                                                              // 627
              'left': box.origin + 'px',                                                                               // 630
              'transform': 'rotateY(90deg) translateZ(' + box.depth.next + 'px)'                                       // 631
            });                                                                                                        // 629
          },                                                                                                           // 634
          behind: function () {                                                                                        // 636
            var height = {                                                                                             // 637
              active: $activeSide.outerWidth(true),                                                                    // 639
              next: $nextSide.outerWidth(true)                                                                         // 640
            },                                                                                                         // 638
                box = {                                                                                                // 637
              origin: (height.active - height.next) / 2,                                                               // 643
              depth: {                                                                                                 // 644
                active: height.next / 2,                                                                               // 645
                next: height.active / 2                                                                                // 646
              }                                                                                                        // 644
            };                                                                                                         // 642
            module.verbose('Setting the initial animation position as behind', $nextSide, box);                        // 650
            $activeSide.css({                                                                                          // 651
              'transform': 'rotateY(0deg)'                                                                             // 653
            });                                                                                                        // 652
            $nextSide.addClass(className.animating).css({                                                              // 656
              'left': box.origin + 'px',                                                                               // 659
              'transform': 'rotateY(-180deg)'                                                                          // 660
            });                                                                                                        // 658
          }                                                                                                            // 663
        },                                                                                                             // 506
        setting: function (name, value) {                                                                              // 665
          module.debug('Changing setting', name, value);                                                               // 666
                                                                                                                       //
          if ($.isPlainObject(name)) {                                                                                 // 667
            $.extend(true, settings, name);                                                                            // 668
          } else if (value !== undefined) {                                                                            // 669
            if ($.isPlainObject(settings[name])) {                                                                     // 671
              $.extend(true, settings[name], value);                                                                   // 672
            } else {                                                                                                   // 673
              settings[name] = value;                                                                                  // 675
            }                                                                                                          // 676
          } else {                                                                                                     // 677
            return settings[name];                                                                                     // 679
          }                                                                                                            // 680
        },                                                                                                             // 681
        internal: function (name, value) {                                                                             // 682
          if ($.isPlainObject(name)) {                                                                                 // 683
            $.extend(true, module, name);                                                                              // 684
          } else if (value !== undefined) {                                                                            // 685
            module[name] = value;                                                                                      // 687
          } else {                                                                                                     // 688
            return module[name];                                                                                       // 690
          }                                                                                                            // 691
        },                                                                                                             // 692
        debug: function () {                                                                                           // 693
          if (!settings.silent && settings.debug) {                                                                    // 694
            if (settings.performance) {                                                                                // 695
              module.performance.log(arguments);                                                                       // 696
            } else {                                                                                                   // 697
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 699
              module.debug.apply(console, arguments);                                                                  // 700
            }                                                                                                          // 701
          }                                                                                                            // 702
        },                                                                                                             // 703
        verbose: function () {                                                                                         // 704
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 705
            if (settings.performance) {                                                                                // 706
              module.performance.log(arguments);                                                                       // 707
            } else {                                                                                                   // 708
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 710
              module.verbose.apply(console, arguments);                                                                // 711
            }                                                                                                          // 712
          }                                                                                                            // 713
        },                                                                                                             // 714
        error: function () {                                                                                           // 715
          if (!settings.silent) {                                                                                      // 716
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 717
            module.error.apply(console, arguments);                                                                    // 718
          }                                                                                                            // 719
        },                                                                                                             // 720
        performance: {                                                                                                 // 721
          log: function (message) {                                                                                    // 722
            var currentTime, executionTime, previousTime;                                                              // 723
                                                                                                                       //
            if (settings.performance) {                                                                                // 728
              currentTime = new Date().getTime();                                                                      // 729
              previousTime = time || currentTime;                                                                      // 730
              executionTime = currentTime - previousTime;                                                              // 731
              time = currentTime;                                                                                      // 732
              performance.push({                                                                                       // 733
                'Name': message[0],                                                                                    // 734
                'Arguments': [].slice.call(message, 1) || '',                                                          // 735
                'Element': element,                                                                                    // 736
                'Execution Time': executionTime                                                                        // 737
              });                                                                                                      // 733
            }                                                                                                          // 739
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 740
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 741
          },                                                                                                           // 742
          display: function () {                                                                                       // 743
            var title = settings.name + ':',                                                                           // 744
                totalTime = 0;                                                                                         // 744
            time = false;                                                                                              // 748
            clearTimeout(module.performance.timer);                                                                    // 749
            $.each(performance, function (index, data) {                                                               // 750
              totalTime += data['Execution Time'];                                                                     // 751
            });                                                                                                        // 752
            title += ' ' + totalTime + 'ms';                                                                           // 753
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 754
              title += ' \'' + moduleSelector + '\'';                                                                  // 755
            }                                                                                                          // 756
                                                                                                                       //
            if ($allModules.length > 1) {                                                                              // 757
              title += ' ' + '(' + $allModules.length + ')';                                                           // 758
            }                                                                                                          // 759
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 760
              console.groupCollapsed(title);                                                                           // 761
                                                                                                                       //
              if (console.table) {                                                                                     // 762
                console.table(performance);                                                                            // 763
              } else {                                                                                                 // 764
                $.each(performance, function (index, data) {                                                           // 766
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 767
                });                                                                                                    // 768
              }                                                                                                        // 769
                                                                                                                       //
              console.groupEnd();                                                                                      // 770
            }                                                                                                          // 771
                                                                                                                       //
            performance = [];                                                                                          // 772
          }                                                                                                            // 773
        },                                                                                                             // 721
        invoke: function (query, passedArguments, context) {                                                           // 775
          var object = instance,                                                                                       // 776
              maxDepth,                                                                                                // 776
              found,                                                                                                   // 776
              response;                                                                                                // 776
          passedArguments = passedArguments || queryArguments;                                                         // 782
          context = element || context;                                                                                // 783
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 784
            query = query.split(/[\. ]/);                                                                              // 785
            maxDepth = query.length - 1;                                                                               // 786
            $.each(query, function (depth, value) {                                                                    // 787
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 792
                object = object[camelCaseValue];                                                                       // 793
              } else if (object[camelCaseValue] !== undefined) {                                                       // 794
                found = object[camelCaseValue];                                                                        // 796
                return false;                                                                                          // 797
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 798
                object = object[value];                                                                                // 800
              } else if (object[value] !== undefined) {                                                                // 801
                found = object[value];                                                                                 // 803
                return false;                                                                                          // 804
              } else {                                                                                                 // 805
                return false;                                                                                          // 807
              }                                                                                                        // 808
            });                                                                                                        // 809
          }                                                                                                            // 810
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 811
            response = found.apply(context, passedArguments);                                                          // 812
          } else if (found !== undefined) {                                                                            // 813
            response = found;                                                                                          // 815
          }                                                                                                            // 816
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 817
            returnedValue.push(response);                                                                              // 818
          } else if (returnedValue !== undefined) {                                                                    // 819
            returnedValue = [returnedValue, response];                                                                 // 821
          } else if (response !== undefined) {                                                                         // 822
            returnedValue = response;                                                                                  // 824
          }                                                                                                            // 825
                                                                                                                       //
          return found;                                                                                                // 826
        }                                                                                                              // 827
      };                                                                                                               // 81
                                                                                                                       //
      if (methodInvoked) {                                                                                             // 830
        if (instance === undefined) {                                                                                  // 831
          module.initialize();                                                                                         // 832
        }                                                                                                              // 833
                                                                                                                       //
        module.invoke(query);                                                                                          // 834
      } else {                                                                                                         // 835
        if (instance !== undefined) {                                                                                  // 837
          instance.invoke('destroy');                                                                                  // 838
        }                                                                                                              // 839
                                                                                                                       //
        module.initialize();                                                                                           // 840
      }                                                                                                                // 841
    });                                                                                                                // 842
    return returnedValue !== undefined ? returnedValue : this;                                                         // 845
  };                                                                                                                   // 849
                                                                                                                       //
  $.fn.shape.settings = {                                                                                              // 851
    // module info                                                                                                     // 853
    name: 'Shape',                                                                                                     // 854
    // hide all debug content                                                                                          // 856
    silent: false,                                                                                                     // 857
    // debug content outputted to console                                                                              // 859
    debug: false,                                                                                                      // 860
    // verbose debug output                                                                                            // 862
    verbose: false,                                                                                                    // 863
    // fudge factor in pixels when swapping from 2d to 3d (can be useful to correct rounding errors)                   // 865
    jitter: 0,                                                                                                         // 866
    // performance data output                                                                                         // 868
    performance: true,                                                                                                 // 869
    // event namespace                                                                                                 // 871
    namespace: 'shape',                                                                                                // 872
    // width during animation, can be set to 'auto', initial', 'next' or pixel amount                                  // 874
    width: 'initial',                                                                                                  // 875
    // height during animation, can be set to 'auto', 'initial', 'next' or pixel amount                                // 877
    height: 'initial',                                                                                                 // 878
    // callback occurs on side change                                                                                  // 880
    beforeChange: function () {},                                                                                      // 881
    onChange: function () {},                                                                                          // 882
    // allow animation to same side                                                                                    // 884
    allowRepeats: false,                                                                                               // 885
    // animation duration                                                                                              // 887
    duration: false,                                                                                                   // 888
    // possible errors                                                                                                 // 890
    error: {                                                                                                           // 891
      side: 'You tried to switch to a side that does not exist.',                                                      // 892
      method: 'The method you called is not defined'                                                                   // 893
    },                                                                                                                 // 891
    // classnames used                                                                                                 // 896
    className: {                                                                                                       // 897
      animating: 'animating',                                                                                          // 898
      hidden: 'hidden',                                                                                                // 899
      loading: 'loading',                                                                                              // 900
      active: 'active'                                                                                                 // 901
    },                                                                                                                 // 897
    // selectors used                                                                                                  // 904
    selector: {                                                                                                        // 905
      sides: '.sides',                                                                                                 // 906
      side: '.side'                                                                                                    // 907
    }                                                                                                                  // 905
  };                                                                                                                   // 851
})(jQuery, window, document);                                                                                          // 913
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sidebar.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/modules/sidebar.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Sidebar                                                                                          //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.sidebar = function (parameters) {                                                                               // 26
    var $allModules = $(this),                                                                                         // 27
        $window = $(window),                                                                                           // 27
        $document = $(document),                                                                                       // 27
        $html = $('html'),                                                                                             // 27
        $head = $('head'),                                                                                             // 27
        moduleSelector = $allModules.selector || '',                                                                   // 27
        time = new Date().getTime(),                                                                                   // 27
        performance = [],                                                                                              // 27
        query = arguments[0],                                                                                          // 27
        methodInvoked = typeof query == 'string',                                                                      // 27
        queryArguments = [].slice.call(arguments, 1),                                                                  // 27
        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
      setTimeout(callback, 0);                                                                                         // 47
    },                                                                                                                 // 47
        returnedValue;                                                                                                 // 27
                                                                                                                       //
    $allModules.each(function () {                                                                                     // 52
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.sidebar.settings, parameters) : $.extend({}, $.fn.sidebar.settings),
          selector = settings.selector,                                                                                // 54
          className = settings.className,                                                                              // 54
          namespace = settings.namespace,                                                                              // 54
          regExp = settings.regExp,                                                                                    // 54
          error = settings.error,                                                                                      // 54
          eventNamespace = '.' + namespace,                                                                            // 54
          moduleNamespace = 'module-' + namespace,                                                                     // 54
          $module = $(this),                                                                                           // 54
          $context = $(settings.context),                                                                              // 54
          $sidebars = $module.children(selector.sidebar),                                                              // 54
          $fixed = $context.children(selector.fixed),                                                                  // 54
          $pusher = $context.children(selector.pusher),                                                                // 54
          $style,                                                                                                      // 54
          element = this,                                                                                              // 54
          instance = $module.data(moduleNamespace),                                                                    // 54
          elementNamespace,                                                                                            // 54
          id,                                                                                                          // 54
          currentScroll,                                                                                               // 54
          transitionEvent,                                                                                             // 54
          module;                                                                                                      // 54
      module = {                                                                                                       // 87
        initialize: function () {                                                                                      // 89
          module.debug('Initializing sidebar', parameters);                                                            // 90
          module.create.id();                                                                                          // 92
          transitionEvent = module.get.transitionEvent();                                                              // 94
                                                                                                                       //
          if (module.is.ios()) {                                                                                       // 96
            module.set.ios();                                                                                          // 97
          } // avoids locking rendering if initialized in onReady                                                      // 98
                                                                                                                       //
                                                                                                                       //
          if (settings.delaySetup) {                                                                                   // 101
            requestAnimationFrame(module.setup.layout);                                                                // 102
          } else {                                                                                                     // 103
            module.setup.layout();                                                                                     // 105
          }                                                                                                            // 106
                                                                                                                       //
          requestAnimationFrame(function () {                                                                          // 108
            module.setup.cache();                                                                                      // 109
          });                                                                                                          // 110
          module.instantiate();                                                                                        // 112
        },                                                                                                             // 113
        instantiate: function () {                                                                                     // 115
          module.verbose('Storing instance of module', module);                                                        // 116
          instance = module;                                                                                           // 117
          $module.data(moduleNamespace, module);                                                                       // 118
        },                                                                                                             // 121
        create: {                                                                                                      // 123
          id: function () {                                                                                            // 124
            id = (Math.random().toString(16) + '000000000').substr(2, 8);                                              // 125
            elementNamespace = '.' + id;                                                                               // 126
            module.verbose('Creating unique id for element', id);                                                      // 127
          }                                                                                                            // 128
        },                                                                                                             // 123
        destroy: function () {                                                                                         // 131
          module.verbose('Destroying previous module for', $module);                                                   // 132
          $module.off(eventNamespace).removeData(moduleNamespace);                                                     // 133
                                                                                                                       //
          if (module.is.ios()) {                                                                                       // 137
            module.remove.ios();                                                                                       // 138
          } // bound by uuid                                                                                           // 139
                                                                                                                       //
                                                                                                                       //
          $context.off(elementNamespace);                                                                              // 141
          $window.off(elementNamespace);                                                                               // 142
          $document.off(elementNamespace);                                                                             // 143
        },                                                                                                             // 144
        event: {                                                                                                       // 146
          clickaway: function (event) {                                                                                // 147
            var clickedInPusher = $pusher.find(event.target).length > 0 || $pusher.is(event.target),                   // 148
                clickedContext = $context.is(event.target);                                                            // 148
                                                                                                                       //
            if (clickedInPusher) {                                                                                     // 152
              module.verbose('User clicked on dimmed page');                                                           // 153
              module.hide();                                                                                           // 154
            }                                                                                                          // 155
                                                                                                                       //
            if (clickedContext) {                                                                                      // 156
              module.verbose('User clicked on dimmable context (scaled out page)');                                    // 157
              module.hide();                                                                                           // 158
            }                                                                                                          // 159
          },                                                                                                           // 160
          touch: function (event) {//event.stopPropagation();                                                          // 161
          },                                                                                                           // 163
          containScroll: function (event) {                                                                            // 164
            if (element.scrollTop <= 0) {                                                                              // 165
              element.scrollTop = 1;                                                                                   // 166
            }                                                                                                          // 167
                                                                                                                       //
            if (element.scrollTop + element.offsetHeight >= element.scrollHeight) {                                    // 168
              element.scrollTop = element.scrollHeight - element.offsetHeight - 1;                                     // 169
            }                                                                                                          // 170
          },                                                                                                           // 171
          scroll: function (event) {                                                                                   // 172
            if ($(event.target).closest(selector.sidebar).length === 0) {                                              // 173
              event.preventDefault();                                                                                  // 174
            }                                                                                                          // 175
          }                                                                                                            // 176
        },                                                                                                             // 146
        bind: {                                                                                                        // 179
          clickaway: function () {                                                                                     // 180
            module.verbose('Adding clickaway events to context', $context);                                            // 181
                                                                                                                       //
            if (settings.closable) {                                                                                   // 182
              $context.on('click' + elementNamespace, module.event.clickaway).on('touchend' + elementNamespace, module.event.clickaway);
            }                                                                                                          // 187
          },                                                                                                           // 188
          scrollLock: function () {                                                                                    // 189
            if (settings.scrollLock) {                                                                                 // 190
              module.debug('Disabling page scroll');                                                                   // 191
              $window.on('DOMMouseScroll' + elementNamespace, module.event.scroll);                                    // 192
            }                                                                                                          // 195
                                                                                                                       //
            module.verbose('Adding events to contain sidebar scroll');                                                 // 196
            $document.on('touchmove' + elementNamespace, module.event.touch);                                          // 197
            $module.on('scroll' + eventNamespace, module.event.containScroll);                                         // 200
          }                                                                                                            // 203
        },                                                                                                             // 179
        unbind: {                                                                                                      // 205
          clickaway: function () {                                                                                     // 206
            module.verbose('Removing clickaway events from context', $context);                                        // 207
            $context.off(elementNamespace);                                                                            // 208
          },                                                                                                           // 209
          scrollLock: function () {                                                                                    // 210
            module.verbose('Removing scroll lock from page');                                                          // 211
            $document.off(elementNamespace);                                                                           // 212
            $window.off(elementNamespace);                                                                             // 213
            $module.off('scroll' + eventNamespace);                                                                    // 214
          }                                                                                                            // 215
        },                                                                                                             // 205
        add: {                                                                                                         // 218
          inlineCSS: function () {                                                                                     // 219
            var width = module.cache.width || $module.outerWidth(),                                                    // 220
                height = module.cache.height || $module.outerHeight(),                                                 // 220
                isRTL = module.is.rtl(),                                                                               // 220
                direction = module.get.direction(),                                                                    // 220
                distance = {                                                                                           // 220
              left: width,                                                                                             // 226
              right: -width,                                                                                           // 227
              top: height,                                                                                             // 228
              bottom: -height                                                                                          // 229
            },                                                                                                         // 225
                style;                                                                                                 // 220
                                                                                                                       //
            if (isRTL) {                                                                                               // 234
              module.verbose('RTL detected, flipping widths');                                                         // 235
              distance.left = -width;                                                                                  // 236
              distance.right = width;                                                                                  // 237
            }                                                                                                          // 238
                                                                                                                       //
            style = '<style>';                                                                                         // 240
                                                                                                                       //
            if (direction === 'left' || direction === 'right') {                                                       // 242
              module.debug('Adding CSS rules for animation distance', width);                                          // 243
              style += '' + ' .ui.visible.' + direction + '.sidebar ~ .fixed,' + ' .ui.visible.' + direction + '.sidebar ~ .pusher {' + '   -webkit-transform: translate3d(' + distance[direction] + 'px, 0, 0);' + '           transform: translate3d(' + distance[direction] + 'px, 0, 0);' + ' }';
            } else if (direction === 'top' || direction == 'bottom') {                                                 // 251
              style += '' + ' .ui.visible.' + direction + '.sidebar ~ .fixed,' + ' .ui.visible.' + direction + '.sidebar ~ .pusher {' + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);' + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);' + ' }';
            } /* IE is only browser not to create context with transforms */ /* https://www.w3.org/Bugs/Public/show_bug.cgi?id=16328 */
                                                                                                                       //
            if (module.is.ie()) {                                                                                      // 264
              if (direction === 'left' || direction === 'right') {                                                     // 265
                module.debug('Adding CSS rules for animation distance', width);                                        // 266
                style += '' + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {' + '   -webkit-transform: translate3d(' + distance[direction] + 'px, 0, 0);' + '           transform: translate3d(' + distance[direction] + 'px, 0, 0);' + ' }';
              } else if (direction === 'top' || direction == 'bottom') {                                               // 273
                style += '' + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {' + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);' + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);' + ' }';
              } /* opposite sides visible forces content overlay */                                                    // 281
                                                                                                                       //
              style += '' + ' body.pushable > .ui.visible.left.sidebar ~ .ui.visible.right.sidebar ~ .pusher:after,' + ' body.pushable > .ui.visible.right.sidebar ~ .ui.visible.left.sidebar ~ .pusher:after {' + '   -webkit-transform: translate3d(0px, 0, 0);' + '           transform: translate3d(0px, 0, 0);' + ' }';
            }                                                                                                          // 290
                                                                                                                       //
            style += '</style>';                                                                                       // 291
            $style = $(style).appendTo($head);                                                                         // 292
            module.debug('Adding sizing css to head', $style);                                                         // 295
          }                                                                                                            // 296
        },                                                                                                             // 218
        refresh: function () {                                                                                         // 299
          module.verbose('Refreshing selector cache');                                                                 // 300
          $context = $(settings.context);                                                                              // 301
          $sidebars = $context.children(selector.sidebar);                                                             // 302
          $pusher = $context.children(selector.pusher);                                                                // 303
          $fixed = $context.children(selector.fixed);                                                                  // 304
          module.clear.cache();                                                                                        // 305
        },                                                                                                             // 306
        refreshSidebars: function () {                                                                                 // 308
          module.verbose('Refreshing other sidebars');                                                                 // 309
          $sidebars = $context.children(selector.sidebar);                                                             // 310
        },                                                                                                             // 311
        repaint: function () {                                                                                         // 313
          module.verbose('Forcing repaint event');                                                                     // 314
          element.style.display = 'none';                                                                              // 315
          var ignored = element.offsetHeight;                                                                          // 316
          element.scrollTop = element.scrollTop;                                                                       // 317
          element.style.display = '';                                                                                  // 318
        },                                                                                                             // 319
        setup: {                                                                                                       // 321
          cache: function () {                                                                                         // 322
            module.cache = {                                                                                           // 323
              width: $module.outerWidth(),                                                                             // 324
              height: $module.outerHeight(),                                                                           // 325
              rtl: $module.css('direction') == 'rtl'                                                                   // 326
            };                                                                                                         // 323
          },                                                                                                           // 328
          layout: function () {                                                                                        // 329
            if ($context.children(selector.pusher).length === 0) {                                                     // 330
              module.debug('Adding wrapper element for sidebar');                                                      // 331
              module.error(error.pusher);                                                                              // 332
              $pusher = $('<div class="pusher" />');                                                                   // 333
              $context.children().not(selector.omitted).not($sidebars).wrapAll($pusher);                               // 334
              module.refresh();                                                                                        // 340
            }                                                                                                          // 341
                                                                                                                       //
            if ($module.nextAll(selector.pusher).length === 0 || $module.nextAll(selector.pusher)[0] !== $pusher[0]) {
              module.debug('Moved sidebar to correct parent element');                                                 // 343
              module.error(error.movedSidebar, element);                                                               // 344
              $module.detach().prependTo($context);                                                                    // 345
              module.refresh();                                                                                        // 346
            }                                                                                                          // 347
                                                                                                                       //
            module.clear.cache();                                                                                      // 348
            module.set.pushable();                                                                                     // 349
            module.set.direction();                                                                                    // 350
          }                                                                                                            // 351
        },                                                                                                             // 321
        attachEvents: function (selector, event) {                                                                     // 354
          var $toggle = $(selector);                                                                                   // 355
          event = $.isFunction(module[event]) ? module[event] : module.toggle;                                         // 358
                                                                                                                       //
          if ($toggle.length > 0) {                                                                                    // 362
            module.debug('Attaching sidebar events to element', selector, event);                                      // 363
            $toggle.on('click' + eventNamespace, event);                                                               // 364
          } else {                                                                                                     // 367
            module.error(error.notFound, selector);                                                                    // 369
          }                                                                                                            // 370
        },                                                                                                             // 371
        show: function (callback) {                                                                                    // 373
          callback = $.isFunction(callback) ? callback : function () {};                                               // 374
                                                                                                                       //
          if (module.is.hidden()) {                                                                                    // 378
            module.refreshSidebars();                                                                                  // 379
                                                                                                                       //
            if (settings.overlay) {                                                                                    // 380
              module.error(error.overlay);                                                                             // 381
              settings.transition = 'overlay';                                                                         // 382
            }                                                                                                          // 383
                                                                                                                       //
            module.refresh();                                                                                          // 384
                                                                                                                       //
            if (module.othersActive()) {                                                                               // 385
              module.debug('Other sidebars currently visible');                                                        // 386
                                                                                                                       //
              if (settings.exclusive) {                                                                                // 387
                // if not overlay queue animation after hide                                                           // 388
                if (settings.transition != 'overlay') {                                                                // 389
                  module.hideOthers(module.show);                                                                      // 390
                  return;                                                                                              // 391
                } else {                                                                                               // 392
                  module.hideOthers();                                                                                 // 394
                }                                                                                                      // 395
              } else {                                                                                                 // 396
                settings.transition = 'overlay';                                                                       // 398
              }                                                                                                        // 399
            }                                                                                                          // 400
                                                                                                                       //
            module.pushPage(function () {                                                                              // 401
              callback.call(element);                                                                                  // 402
              settings.onShow.call(element);                                                                           // 403
            });                                                                                                        // 404
            settings.onChange.call(element);                                                                           // 405
            settings.onVisible.call(element);                                                                          // 406
          } else {                                                                                                     // 407
            module.debug('Sidebar is already visible');                                                                // 409
          }                                                                                                            // 410
        },                                                                                                             // 411
        hide: function (callback) {                                                                                    // 413
          callback = $.isFunction(callback) ? callback : function () {};                                               // 414
                                                                                                                       //
          if (module.is.visible() || module.is.animating()) {                                                          // 418
            module.debug('Hiding sidebar', callback);                                                                  // 419
            module.refreshSidebars();                                                                                  // 420
            module.pullPage(function () {                                                                              // 421
              callback.call(element);                                                                                  // 422
              settings.onHidden.call(element);                                                                         // 423
            });                                                                                                        // 424
            settings.onChange.call(element);                                                                           // 425
            settings.onHide.call(element);                                                                             // 426
          }                                                                                                            // 427
        },                                                                                                             // 428
        othersAnimating: function () {                                                                                 // 430
          return $sidebars.not($module).filter('.' + className.animating).length > 0;                                  // 431
        },                                                                                                             // 432
        othersVisible: function () {                                                                                   // 433
          return $sidebars.not($module).filter('.' + className.visible).length > 0;                                    // 434
        },                                                                                                             // 435
        othersActive: function () {                                                                                    // 436
          return module.othersVisible() || module.othersAnimating();                                                   // 437
        },                                                                                                             // 438
        hideOthers: function (callback) {                                                                              // 440
          var $otherSidebars = $sidebars.not($module).filter('.' + className.visible),                                 // 441
              sidebarCount = $otherSidebars.length,                                                                    // 441
              callbackCount = 0;                                                                                       // 441
                                                                                                                       //
          callback = callback || function () {};                                                                       // 446
                                                                                                                       //
          $otherSidebars.sidebar('hide', function () {                                                                 // 447
            callbackCount++;                                                                                           // 449
                                                                                                                       //
            if (callbackCount == sidebarCount) {                                                                       // 450
              callback();                                                                                              // 451
            }                                                                                                          // 452
          });                                                                                                          // 453
        },                                                                                                             // 455
        toggle: function () {                                                                                          // 457
          module.verbose('Determining toggled direction');                                                             // 458
                                                                                                                       //
          if (module.is.hidden()) {                                                                                    // 459
            module.show();                                                                                             // 460
          } else {                                                                                                     // 461
            module.hide();                                                                                             // 463
          }                                                                                                            // 464
        },                                                                                                             // 465
        pushPage: function (callback) {                                                                                // 467
          var transition = module.get.transition(),                                                                    // 468
              $transition = transition === 'overlay' || module.othersActive() ? $module : $pusher,                     // 468
              animate,                                                                                                 // 468
              dim,                                                                                                     // 468
              transitionEnd;                                                                                           // 468
          callback = $.isFunction(callback) ? callback : function () {};                                               // 477
                                                                                                                       //
          if (settings.transition == 'scale down') {                                                                   // 481
            module.scrollToTop();                                                                                      // 482
          }                                                                                                            // 483
                                                                                                                       //
          module.set.transition(transition);                                                                           // 484
          module.repaint();                                                                                            // 485
                                                                                                                       //
          animate = function () {                                                                                      // 486
            module.bind.clickaway();                                                                                   // 487
            module.add.inlineCSS();                                                                                    // 488
            module.set.animating();                                                                                    // 489
            module.set.visible();                                                                                      // 490
          };                                                                                                           // 491
                                                                                                                       //
          dim = function () {                                                                                          // 492
            module.set.dimmed();                                                                                       // 493
          };                                                                                                           // 494
                                                                                                                       //
          transitionEnd = function (event) {                                                                           // 495
            if (event.target == $transition[0]) {                                                                      // 496
              $transition.off(transitionEvent + elementNamespace, transitionEnd);                                      // 497
              module.remove.animating();                                                                               // 498
              module.bind.scrollLock();                                                                                // 499
              callback.call(element);                                                                                  // 500
            }                                                                                                          // 501
          };                                                                                                           // 502
                                                                                                                       //
          $transition.off(transitionEvent + elementNamespace);                                                         // 503
          $transition.on(transitionEvent + elementNamespace, transitionEnd);                                           // 504
          requestAnimationFrame(animate);                                                                              // 505
                                                                                                                       //
          if (settings.dimPage && !module.othersVisible()) {                                                           // 506
            requestAnimationFrame(dim);                                                                                // 507
          }                                                                                                            // 508
        },                                                                                                             // 509
        pullPage: function (callback) {                                                                                // 511
          var transition = module.get.transition(),                                                                    // 512
              $transition = transition == 'overlay' || module.othersActive() ? $module : $pusher,                      // 512
              animate,                                                                                                 // 512
              transitionEnd;                                                                                           // 512
          callback = $.isFunction(callback) ? callback : function () {};                                               // 520
          module.verbose('Removing context push state', module.get.direction());                                       // 524
          module.unbind.clickaway();                                                                                   // 526
          module.unbind.scrollLock();                                                                                  // 527
                                                                                                                       //
          animate = function () {                                                                                      // 529
            module.set.transition(transition);                                                                         // 530
            module.set.animating();                                                                                    // 531
            module.remove.visible();                                                                                   // 532
                                                                                                                       //
            if (settings.dimPage && !module.othersVisible()) {                                                         // 533
              $pusher.removeClass(className.dimmed);                                                                   // 534
            }                                                                                                          // 535
          };                                                                                                           // 536
                                                                                                                       //
          transitionEnd = function (event) {                                                                           // 537
            if (event.target == $transition[0]) {                                                                      // 538
              $transition.off(transitionEvent + elementNamespace, transitionEnd);                                      // 539
              module.remove.animating();                                                                               // 540
              module.remove.transition();                                                                              // 541
              module.remove.inlineCSS();                                                                               // 542
                                                                                                                       //
              if (transition == 'scale down' || settings.returnScroll && module.is.mobile()) {                         // 543
                module.scrollBack();                                                                                   // 544
              }                                                                                                        // 545
                                                                                                                       //
              callback.call(element);                                                                                  // 546
            }                                                                                                          // 547
          };                                                                                                           // 548
                                                                                                                       //
          $transition.off(transitionEvent + elementNamespace);                                                         // 549
          $transition.on(transitionEvent + elementNamespace, transitionEnd);                                           // 550
          requestAnimationFrame(animate);                                                                              // 551
        },                                                                                                             // 552
        scrollToTop: function () {                                                                                     // 554
          module.verbose('Scrolling to top of page to avoid animation issues');                                        // 555
          currentScroll = $(window).scrollTop();                                                                       // 556
          $module.scrollTop(0);                                                                                        // 557
          window.scrollTo(0, 0);                                                                                       // 558
        },                                                                                                             // 559
        scrollBack: function () {                                                                                      // 561
          module.verbose('Scrolling back to original page position');                                                  // 562
          window.scrollTo(0, currentScroll);                                                                           // 563
        },                                                                                                             // 564
        clear: {                                                                                                       // 566
          cache: function () {                                                                                         // 567
            module.verbose('Clearing cached dimensions');                                                              // 568
            module.cache = {};                                                                                         // 569
          }                                                                                                            // 570
        },                                                                                                             // 566
        set: {                                                                                                         // 573
          // ios only (scroll on html not document). This prevent auto-resize canvas/scroll in ios                     // 575
          ios: function () {                                                                                           // 576
            $html.addClass(className.ios);                                                                             // 577
          },                                                                                                           // 578
          // container                                                                                                 // 580
          pushed: function () {                                                                                        // 581
            $context.addClass(className.pushed);                                                                       // 582
          },                                                                                                           // 583
          pushable: function () {                                                                                      // 584
            $context.addClass(className.pushable);                                                                     // 585
          },                                                                                                           // 586
          // pusher                                                                                                    // 588
          dimmed: function () {                                                                                        // 589
            $pusher.addClass(className.dimmed);                                                                        // 590
          },                                                                                                           // 591
          // sidebar                                                                                                   // 593
          active: function () {                                                                                        // 594
            $module.addClass(className.active);                                                                        // 595
          },                                                                                                           // 596
          animating: function () {                                                                                     // 597
            $module.addClass(className.animating);                                                                     // 598
          },                                                                                                           // 599
          transition: function (transition) {                                                                          // 600
            transition = transition || module.get.transition();                                                        // 601
            $module.addClass(transition);                                                                              // 602
          },                                                                                                           // 603
          direction: function (direction) {                                                                            // 604
            direction = direction || module.get.direction();                                                           // 605
            $module.addClass(className[direction]);                                                                    // 606
          },                                                                                                           // 607
          visible: function () {                                                                                       // 608
            $module.addClass(className.visible);                                                                       // 609
          },                                                                                                           // 610
          overlay: function () {                                                                                       // 611
            $module.addClass(className.overlay);                                                                       // 612
          }                                                                                                            // 613
        },                                                                                                             // 573
        remove: {                                                                                                      // 615
          inlineCSS: function () {                                                                                     // 617
            module.debug('Removing inline css styles', $style);                                                        // 618
                                                                                                                       //
            if ($style && $style.length > 0) {                                                                         // 619
              $style.remove();                                                                                         // 620
            }                                                                                                          // 621
          },                                                                                                           // 622
          // ios scroll on html not document                                                                           // 624
          ios: function () {                                                                                           // 625
            $html.removeClass(className.ios);                                                                          // 626
          },                                                                                                           // 627
          // context                                                                                                   // 629
          pushed: function () {                                                                                        // 630
            $context.removeClass(className.pushed);                                                                    // 631
          },                                                                                                           // 632
          pushable: function () {                                                                                      // 633
            $context.removeClass(className.pushable);                                                                  // 634
          },                                                                                                           // 635
          // sidebar                                                                                                   // 637
          active: function () {                                                                                        // 638
            $module.removeClass(className.active);                                                                     // 639
          },                                                                                                           // 640
          animating: function () {                                                                                     // 641
            $module.removeClass(className.animating);                                                                  // 642
          },                                                                                                           // 643
          transition: function (transition) {                                                                          // 644
            transition = transition || module.get.transition();                                                        // 645
            $module.removeClass(transition);                                                                           // 646
          },                                                                                                           // 647
          direction: function (direction) {                                                                            // 648
            direction = direction || module.get.direction();                                                           // 649
            $module.removeClass(className[direction]);                                                                 // 650
          },                                                                                                           // 651
          visible: function () {                                                                                       // 652
            $module.removeClass(className.visible);                                                                    // 653
          },                                                                                                           // 654
          overlay: function () {                                                                                       // 655
            $module.removeClass(className.overlay);                                                                    // 656
          }                                                                                                            // 657
        },                                                                                                             // 615
        get: {                                                                                                         // 660
          direction: function () {                                                                                     // 661
            if ($module.hasClass(className.top)) {                                                                     // 662
              return className.top;                                                                                    // 663
            } else if ($module.hasClass(className.right)) {                                                            // 664
              return className.right;                                                                                  // 666
            } else if ($module.hasClass(className.bottom)) {                                                           // 667
              return className.bottom;                                                                                 // 669
            }                                                                                                          // 670
                                                                                                                       //
            return className.left;                                                                                     // 671
          },                                                                                                           // 672
          transition: function () {                                                                                    // 673
            var direction = module.get.direction(),                                                                    // 674
                transition;                                                                                            // 674
            transition = module.is.mobile() ? settings.mobileTransition == 'auto' ? settings.defaultTransition.mobile[direction] : settings.mobileTransition : settings.transition == 'auto' ? settings.defaultTransition.computer[direction] : settings.transition;
            module.verbose('Determined transition', transition);                                                       // 686
            return transition;                                                                                         // 687
          },                                                                                                           // 688
          transitionEvent: function () {                                                                               // 689
            var element = document.createElement('element'),                                                           // 690
                transitions = {                                                                                        // 690
              'transition': 'transitionend',                                                                           // 693
              'OTransition': 'oTransitionEnd',                                                                         // 694
              'MozTransition': 'transitionend',                                                                        // 695
              'WebkitTransition': 'webkitTransitionEnd'                                                                // 696
            },                                                                                                         // 692
                transition;                                                                                            // 690
                                                                                                                       //
            for (transition in meteorBabelHelpers.sanitizeForInObject(transitions)) {                                  // 700
              if (element.style[transition] !== undefined) {                                                           // 701
                return transitions[transition];                                                                        // 702
              }                                                                                                        // 703
            }                                                                                                          // 704
          }                                                                                                            // 705
        },                                                                                                             // 660
        is: {                                                                                                          // 708
          ie: function () {                                                                                            // 710
            var isIE11 = !window.ActiveXObject && 'ActiveXObject' in window,                                           // 711
                isIE = 'ActiveXObject' in window;                                                                      // 711
            return isIE11 || isIE;                                                                                     // 715
          },                                                                                                           // 716
          ios: function () {                                                                                           // 718
            var userAgent = navigator.userAgent,                                                                       // 719
                isIOS = userAgent.match(regExp.ios),                                                                   // 719
                isMobileChrome = userAgent.match(regExp.mobileChrome);                                                 // 719
                                                                                                                       //
            if (isIOS && !isMobileChrome) {                                                                            // 724
              module.verbose('Browser was found to be iOS', userAgent);                                                // 725
              return true;                                                                                             // 726
            } else {                                                                                                   // 727
              return false;                                                                                            // 729
            }                                                                                                          // 730
          },                                                                                                           // 731
          mobile: function () {                                                                                        // 732
            var userAgent = navigator.userAgent,                                                                       // 733
                isMobile = userAgent.match(regExp.mobile);                                                             // 733
                                                                                                                       //
            if (isMobile) {                                                                                            // 737
              module.verbose('Browser was found to be mobile', userAgent);                                             // 738
              return true;                                                                                             // 739
            } else {                                                                                                   // 740
              module.verbose('Browser is not mobile, using regular transition', userAgent);                            // 742
              return false;                                                                                            // 743
            }                                                                                                          // 744
          },                                                                                                           // 745
          hidden: function () {                                                                                        // 746
            return !module.is.visible();                                                                               // 747
          },                                                                                                           // 748
          visible: function () {                                                                                       // 749
            return $module.hasClass(className.visible);                                                                // 750
          },                                                                                                           // 751
          // alias                                                                                                     // 752
          open: function () {                                                                                          // 753
            return module.is.visible();                                                                                // 754
          },                                                                                                           // 755
          closed: function () {                                                                                        // 756
            return module.is.hidden();                                                                                 // 757
          },                                                                                                           // 758
          vertical: function () {                                                                                      // 759
            return $module.hasClass(className.top);                                                                    // 760
          },                                                                                                           // 761
          animating: function () {                                                                                     // 762
            return $context.hasClass(className.animating);                                                             // 763
          },                                                                                                           // 764
          rtl: function () {                                                                                           // 765
            if (module.cache.rtl === undefined) {                                                                      // 766
              module.cache.rtl = $module.css('direction') == 'rtl';                                                    // 767
            }                                                                                                          // 768
                                                                                                                       //
            return module.cache.rtl;                                                                                   // 769
          }                                                                                                            // 770
        },                                                                                                             // 708
        setting: function (name, value) {                                                                              // 773
          module.debug('Changing setting', name, value);                                                               // 774
                                                                                                                       //
          if ($.isPlainObject(name)) {                                                                                 // 775
            $.extend(true, settings, name);                                                                            // 776
          } else if (value !== undefined) {                                                                            // 777
            if ($.isPlainObject(settings[name])) {                                                                     // 779
              $.extend(true, settings[name], value);                                                                   // 780
            } else {                                                                                                   // 781
              settings[name] = value;                                                                                  // 783
            }                                                                                                          // 784
          } else {                                                                                                     // 785
            return settings[name];                                                                                     // 787
          }                                                                                                            // 788
        },                                                                                                             // 789
        internal: function (name, value) {                                                                             // 790
          if ($.isPlainObject(name)) {                                                                                 // 791
            $.extend(true, module, name);                                                                              // 792
          } else if (value !== undefined) {                                                                            // 793
            module[name] = value;                                                                                      // 795
          } else {                                                                                                     // 796
            return module[name];                                                                                       // 798
          }                                                                                                            // 799
        },                                                                                                             // 800
        debug: function () {                                                                                           // 801
          if (!settings.silent && settings.debug) {                                                                    // 802
            if (settings.performance) {                                                                                // 803
              module.performance.log(arguments);                                                                       // 804
            } else {                                                                                                   // 805
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 807
              module.debug.apply(console, arguments);                                                                  // 808
            }                                                                                                          // 809
          }                                                                                                            // 810
        },                                                                                                             // 811
        verbose: function () {                                                                                         // 812
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 813
            if (settings.performance) {                                                                                // 814
              module.performance.log(arguments);                                                                       // 815
            } else {                                                                                                   // 816
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 818
              module.verbose.apply(console, arguments);                                                                // 819
            }                                                                                                          // 820
          }                                                                                                            // 821
        },                                                                                                             // 822
        error: function () {                                                                                           // 823
          if (!settings.silent) {                                                                                      // 824
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 825
            module.error.apply(console, arguments);                                                                    // 826
          }                                                                                                            // 827
        },                                                                                                             // 828
        performance: {                                                                                                 // 829
          log: function (message) {                                                                                    // 830
            var currentTime, executionTime, previousTime;                                                              // 831
                                                                                                                       //
            if (settings.performance) {                                                                                // 836
              currentTime = new Date().getTime();                                                                      // 837
              previousTime = time || currentTime;                                                                      // 838
              executionTime = currentTime - previousTime;                                                              // 839
              time = currentTime;                                                                                      // 840
              performance.push({                                                                                       // 841
                'Name': message[0],                                                                                    // 842
                'Arguments': [].slice.call(message, 1) || '',                                                          // 843
                'Element': element,                                                                                    // 844
                'Execution Time': executionTime                                                                        // 845
              });                                                                                                      // 841
            }                                                                                                          // 847
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 848
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 849
          },                                                                                                           // 850
          display: function () {                                                                                       // 851
            var title = settings.name + ':',                                                                           // 852
                totalTime = 0;                                                                                         // 852
            time = false;                                                                                              // 856
            clearTimeout(module.performance.timer);                                                                    // 857
            $.each(performance, function (index, data) {                                                               // 858
              totalTime += data['Execution Time'];                                                                     // 859
            });                                                                                                        // 860
            title += ' ' + totalTime + 'ms';                                                                           // 861
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 862
              title += ' \'' + moduleSelector + '\'';                                                                  // 863
            }                                                                                                          // 864
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 865
              console.groupCollapsed(title);                                                                           // 866
                                                                                                                       //
              if (console.table) {                                                                                     // 867
                console.table(performance);                                                                            // 868
              } else {                                                                                                 // 869
                $.each(performance, function (index, data) {                                                           // 871
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 872
                });                                                                                                    // 873
              }                                                                                                        // 874
                                                                                                                       //
              console.groupEnd();                                                                                      // 875
            }                                                                                                          // 876
                                                                                                                       //
            performance = [];                                                                                          // 877
          }                                                                                                            // 878
        },                                                                                                             // 829
        invoke: function (query, passedArguments, context) {                                                           // 880
          var object = instance,                                                                                       // 881
              maxDepth,                                                                                                // 881
              found,                                                                                                   // 881
              response;                                                                                                // 881
          passedArguments = passedArguments || queryArguments;                                                         // 887
          context = element || context;                                                                                // 888
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 889
            query = query.split(/[\. ]/);                                                                              // 890
            maxDepth = query.length - 1;                                                                               // 891
            $.each(query, function (depth, value) {                                                                    // 892
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 897
                object = object[camelCaseValue];                                                                       // 898
              } else if (object[camelCaseValue] !== undefined) {                                                       // 899
                found = object[camelCaseValue];                                                                        // 901
                return false;                                                                                          // 902
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 903
                object = object[value];                                                                                // 905
              } else if (object[value] !== undefined) {                                                                // 906
                found = object[value];                                                                                 // 908
                return false;                                                                                          // 909
              } else {                                                                                                 // 910
                module.error(error.method, query);                                                                     // 912
                return false;                                                                                          // 913
              }                                                                                                        // 914
            });                                                                                                        // 915
          }                                                                                                            // 916
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 917
            response = found.apply(context, passedArguments);                                                          // 918
          } else if (found !== undefined) {                                                                            // 919
            response = found;                                                                                          // 921
          }                                                                                                            // 922
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 923
            returnedValue.push(response);                                                                              // 924
          } else if (returnedValue !== undefined) {                                                                    // 925
            returnedValue = [returnedValue, response];                                                                 // 927
          } else if (response !== undefined) {                                                                         // 928
            returnedValue = response;                                                                                  // 930
          }                                                                                                            // 931
                                                                                                                       //
          return found;                                                                                                // 932
        }                                                                                                              // 933
      };                                                                                                               // 87
                                                                                                                       //
      if (methodInvoked) {                                                                                             // 937
        if (instance === undefined) {                                                                                  // 938
          module.initialize();                                                                                         // 939
        }                                                                                                              // 940
                                                                                                                       //
        module.invoke(query);                                                                                          // 941
      } else {                                                                                                         // 942
        if (instance !== undefined) {                                                                                  // 944
          module.invoke('destroy');                                                                                    // 945
        }                                                                                                              // 946
                                                                                                                       //
        module.initialize();                                                                                           // 947
      }                                                                                                                // 948
    });                                                                                                                // 949
    return returnedValue !== undefined ? returnedValue : this;                                                         // 951
  };                                                                                                                   // 955
                                                                                                                       //
  $.fn.sidebar.settings = {                                                                                            // 957
    name: 'Sidebar',                                                                                                   // 959
    namespace: 'sidebar',                                                                                              // 960
    silent: false,                                                                                                     // 962
    debug: false,                                                                                                      // 963
    verbose: false,                                                                                                    // 964
    performance: true,                                                                                                 // 965
    transition: 'auto',                                                                                                // 967
    mobileTransition: 'auto',                                                                                          // 968
    defaultTransition: {                                                                                               // 970
      computer: {                                                                                                      // 971
        left: 'uncover',                                                                                               // 972
        right: 'uncover',                                                                                              // 973
        top: 'overlay',                                                                                                // 974
        bottom: 'overlay'                                                                                              // 975
      },                                                                                                               // 971
      mobile: {                                                                                                        // 977
        left: 'uncover',                                                                                               // 978
        right: 'uncover',                                                                                              // 979
        top: 'overlay',                                                                                                // 980
        bottom: 'overlay'                                                                                              // 981
      }                                                                                                                // 977
    },                                                                                                                 // 970
    context: 'body',                                                                                                   // 985
    exclusive: false,                                                                                                  // 986
    closable: true,                                                                                                    // 987
    dimPage: true,                                                                                                     // 988
    scrollLock: false,                                                                                                 // 989
    returnScroll: false,                                                                                               // 990
    delaySetup: false,                                                                                                 // 991
    duration: 500,                                                                                                     // 993
    onChange: function () {},                                                                                          // 995
    onShow: function () {},                                                                                            // 996
    onHide: function () {},                                                                                            // 997
    onHidden: function () {},                                                                                          // 999
    onVisible: function () {},                                                                                         // 1000
    className: {                                                                                                       // 1002
      active: 'active',                                                                                                // 1003
      animating: 'animating',                                                                                          // 1004
      dimmed: 'dimmed',                                                                                                // 1005
      ios: 'ios',                                                                                                      // 1006
      pushable: 'pushable',                                                                                            // 1007
      pushed: 'pushed',                                                                                                // 1008
      right: 'right',                                                                                                  // 1009
      top: 'top',                                                                                                      // 1010
      left: 'left',                                                                                                    // 1011
      bottom: 'bottom',                                                                                                // 1012
      visible: 'visible'                                                                                               // 1013
    },                                                                                                                 // 1002
    selector: {                                                                                                        // 1016
      fixed: '.fixed',                                                                                                 // 1017
      omitted: 'script, link, style, .ui.modal, .ui.dimmer, .ui.nag, .ui.fixed',                                       // 1018
      pusher: '.pusher',                                                                                               // 1019
      sidebar: '.ui.sidebar'                                                                                           // 1020
    },                                                                                                                 // 1016
    regExp: {                                                                                                          // 1023
      ios: /(iPad|iPhone|iPod)/g,                                                                                      // 1024
      mobileChrome: /(CriOS)/g,                                                                                        // 1025
      mobile: /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/g
    },                                                                                                                 // 1023
    error: {                                                                                                           // 1029
      method: 'The method you called is not defined.',                                                                 // 1030
      pusher: 'Had to add pusher element. For optimal performance make sure body content is inside a pusher element',  // 1031
      movedSidebar: 'Had to move sidebar. For optimal performance make sure sidebar and pusher are direct children of your body tag',
      overlay: 'The overlay setting is no longer supported, use animation: overlay',                                   // 1033
      notFound: 'There were no elements that matched the specified selector'                                           // 1034
    }                                                                                                                  // 1029
  };                                                                                                                   // 957
})(jQuery, window, document);                                                                                          // 1040
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sticky.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/modules/sticky.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Sticky                                                                                           //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.sticky = function (parameters) {                                                                                // 26
    var $allModules = $(this),                                                                                         // 27
        moduleSelector = $allModules.selector || '',                                                                   // 27
        time = new Date().getTime(),                                                                                   // 27
        performance = [],                                                                                              // 27
        query = arguments[0],                                                                                          // 27
        methodInvoked = typeof query == 'string',                                                                      // 27
        queryArguments = [].slice.call(arguments, 1),                                                                  // 27
        returnedValue;                                                                                                 // 27
    $allModules.each(function () {                                                                                     // 40
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.sticky.settings, parameters) : $.extend({}, $.fn.sticky.settings),
          className = settings.className,                                                                              // 42
          namespace = settings.namespace,                                                                              // 42
          error = settings.error,                                                                                      // 42
          eventNamespace = '.' + namespace,                                                                            // 42
          moduleNamespace = 'module-' + namespace,                                                                     // 42
          $module = $(this),                                                                                           // 42
          $window = $(window),                                                                                         // 42
          $scroll = $(settings.scrollContext),                                                                         // 42
          $container,                                                                                                  // 42
          $context,                                                                                                    // 42
          selector = $module.selector || '',                                                                           // 42
          instance = $module.data(moduleNamespace),                                                                    // 42
          requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
        setTimeout(callback, 0);                                                                                       // 67
      },                                                                                                               // 67
          element = this,                                                                                              // 42
          documentObserver,                                                                                            // 42
          observer,                                                                                                    // 42
          module;                                                                                                      // 42
                                                                                                                       //
      module = {                                                                                                       // 76
        initialize: function () {                                                                                      // 78
          module.determineContainer();                                                                                 // 80
          module.determineContext();                                                                                   // 81
          module.verbose('Initializing sticky', settings, $container);                                                 // 82
          module.save.positions();                                                                                     // 84
          module.checkErrors();                                                                                        // 85
          module.bind.events();                                                                                        // 86
                                                                                                                       //
          if (settings.observeChanges) {                                                                               // 88
            module.observeChanges();                                                                                   // 89
          }                                                                                                            // 90
                                                                                                                       //
          module.instantiate();                                                                                        // 91
        },                                                                                                             // 92
        instantiate: function () {                                                                                     // 94
          module.verbose('Storing instance of module', module);                                                        // 95
          instance = module;                                                                                           // 96
          $module.data(moduleNamespace, module);                                                                       // 97
        },                                                                                                             // 100
        destroy: function () {                                                                                         // 102
          module.verbose('Destroying previous instance');                                                              // 103
          module.reset();                                                                                              // 104
                                                                                                                       //
          if (documentObserver) {                                                                                      // 105
            documentObserver.disconnect();                                                                             // 106
          }                                                                                                            // 107
                                                                                                                       //
          if (observer) {                                                                                              // 108
            observer.disconnect();                                                                                     // 109
          }                                                                                                            // 110
                                                                                                                       //
          $window.off('load' + eventNamespace, module.event.load).off('resize' + eventNamespace, module.event.resize);
          $scroll.off('scrollchange' + eventNamespace, module.event.scrollchange);                                     // 115
          $module.removeData(moduleNamespace);                                                                         // 118
        },                                                                                                             // 119
        observeChanges: function () {                                                                                  // 121
          if ('MutationObserver' in window) {                                                                          // 122
            documentObserver = new MutationObserver(module.event.documentChanged);                                     // 123
            observer = new MutationObserver(module.event.changed);                                                     // 124
            documentObserver.observe(document, {                                                                       // 125
              childList: true,                                                                                         // 126
              subtree: true                                                                                            // 127
            });                                                                                                        // 125
            observer.observe(element, {                                                                                // 129
              childList: true,                                                                                         // 130
              subtree: true                                                                                            // 131
            });                                                                                                        // 129
            observer.observe($context[0], {                                                                            // 133
              childList: true,                                                                                         // 134
              subtree: true                                                                                            // 135
            });                                                                                                        // 133
            module.debug('Setting up mutation observer', observer);                                                    // 137
          }                                                                                                            // 138
        },                                                                                                             // 139
        determineContainer: function () {                                                                              // 141
          $container = $module.offsetParent();                                                                         // 142
        },                                                                                                             // 143
        determineContext: function () {                                                                                // 145
          if (settings.context) {                                                                                      // 146
            $context = $(settings.context);                                                                            // 147
          } else {                                                                                                     // 148
            $context = $container;                                                                                     // 150
          }                                                                                                            // 151
                                                                                                                       //
          if ($context.length === 0) {                                                                                 // 152
            module.error(error.invalidContext, settings.context, $module);                                             // 153
            return;                                                                                                    // 154
          }                                                                                                            // 155
        },                                                                                                             // 156
        checkErrors: function () {                                                                                     // 158
          if (module.is.hidden()) {                                                                                    // 159
            module.error(error.visible, $module);                                                                      // 160
          }                                                                                                            // 161
                                                                                                                       //
          if (module.cache.element.height > module.cache.context.height) {                                             // 162
            module.reset();                                                                                            // 163
            module.error(error.elementSize, $module);                                                                  // 164
            return;                                                                                                    // 165
          }                                                                                                            // 166
        },                                                                                                             // 167
        bind: {                                                                                                        // 169
          events: function () {                                                                                        // 170
            $window.on('load' + eventNamespace, module.event.load).on('resize' + eventNamespace, module.event.resize); // pub/sub pattern
                                                                                                                       //
            $scroll.off('scroll' + eventNamespace).on('scroll' + eventNamespace, module.event.scroll).on('scrollchange' + eventNamespace, module.event.scrollchange);
          }                                                                                                            // 181
        },                                                                                                             // 169
        event: {                                                                                                       // 184
          changed: function (mutations) {                                                                              // 185
            clearTimeout(module.timer);                                                                                // 186
            module.timer = setTimeout(function () {                                                                    // 187
              module.verbose('DOM tree modified, updating sticky menu', mutations);                                    // 188
              module.refresh();                                                                                        // 189
            }, 100);                                                                                                   // 190
          },                                                                                                           // 191
          documentChanged: function (mutations) {                                                                      // 192
            [].forEach.call(mutations, function (mutation) {                                                           // 193
              if (mutation.removedNodes) {                                                                             // 194
                [].forEach.call(mutation.removedNodes, function (node) {                                               // 195
                  if (node == element || $(node).find(element).length > 0) {                                           // 196
                    module.debug('Element removed from DOM, tearing down events');                                     // 197
                    module.destroy();                                                                                  // 198
                  }                                                                                                    // 199
                });                                                                                                    // 200
              }                                                                                                        // 201
            });                                                                                                        // 202
          },                                                                                                           // 203
          load: function () {                                                                                          // 204
            module.verbose('Page contents finished loading');                                                          // 205
            requestAnimationFrame(module.refresh);                                                                     // 206
          },                                                                                                           // 207
          resize: function () {                                                                                        // 208
            module.verbose('Window resized');                                                                          // 209
            requestAnimationFrame(module.refresh);                                                                     // 210
          },                                                                                                           // 211
          scroll: function () {                                                                                        // 212
            requestAnimationFrame(function () {                                                                        // 213
              $scroll.triggerHandler('scrollchange' + eventNamespace, $scroll.scrollTop());                            // 214
            });                                                                                                        // 215
          },                                                                                                           // 216
          scrollchange: function (event, scrollPosition) {                                                             // 217
            module.stick(scrollPosition);                                                                              // 218
            settings.onScroll.call(element);                                                                           // 219
          }                                                                                                            // 220
        },                                                                                                             // 184
        refresh: function (hardRefresh) {                                                                              // 223
          module.reset();                                                                                              // 224
                                                                                                                       //
          if (!settings.context) {                                                                                     // 225
            module.determineContext();                                                                                 // 226
          }                                                                                                            // 227
                                                                                                                       //
          if (hardRefresh) {                                                                                           // 228
            module.determineContainer();                                                                               // 229
          }                                                                                                            // 230
                                                                                                                       //
          module.save.positions();                                                                                     // 231
          module.stick();                                                                                              // 232
          settings.onReposition.call(element);                                                                         // 233
        },                                                                                                             // 234
        supports: {                                                                                                    // 236
          sticky: function () {                                                                                        // 237
            var $element = $('<div/>'),                                                                                // 238
                element = $element[0];                                                                                 // 238
            $element.addClass(className.supported);                                                                    // 242
            return $element.css('position').match('sticky');                                                           // 243
          }                                                                                                            // 244
        },                                                                                                             // 236
        save: {                                                                                                        // 247
          lastScroll: function (scroll) {                                                                              // 248
            module.lastScroll = scroll;                                                                                // 249
          },                                                                                                           // 250
          elementScroll: function (scroll) {                                                                           // 251
            module.elementScroll = scroll;                                                                             // 252
          },                                                                                                           // 253
          positions: function () {                                                                                     // 254
            var scrollContext = {                                                                                      // 255
              height: $scroll.height()                                                                                 // 257
            },                                                                                                         // 256
                element = {                                                                                            // 255
              margin: {                                                                                                // 260
                top: parseInt($module.css('margin-top'), 10),                                                          // 261
                bottom: parseInt($module.css('margin-bottom'), 10)                                                     // 262
              },                                                                                                       // 260
              offset: $module.offset(),                                                                                // 264
              width: $module.outerWidth(),                                                                             // 265
              height: $module.outerHeight()                                                                            // 266
            },                                                                                                         // 259
                context = {                                                                                            // 255
              offset: $context.offset(),                                                                               // 269
              height: $context.outerHeight()                                                                           // 270
            },                                                                                                         // 268
                container = {                                                                                          // 255
              height: $container.outerHeight()                                                                         // 273
            };                                                                                                         // 272
                                                                                                                       //
            if (!module.is.standardScroll()) {                                                                         // 276
              module.debug('Non-standard scroll. Removing scroll offset from element offset');                         // 277
              scrollContext.top = $scroll.scrollTop();                                                                 // 279
              scrollContext.left = $scroll.scrollLeft();                                                               // 280
              element.offset.top += scrollContext.top;                                                                 // 282
              context.offset.top += scrollContext.top;                                                                 // 283
              element.offset.left += scrollContext.left;                                                               // 284
              context.offset.left += scrollContext.left;                                                               // 285
            }                                                                                                          // 286
                                                                                                                       //
            module.cache = {                                                                                           // 287
              fits: element.height < scrollContext.height,                                                             // 288
              scrollContext: {                                                                                         // 289
                height: scrollContext.height                                                                           // 290
              },                                                                                                       // 289
              element: {                                                                                               // 292
                margin: element.margin,                                                                                // 293
                top: element.offset.top - element.margin.top,                                                          // 294
                left: element.offset.left,                                                                             // 295
                width: element.width,                                                                                  // 296
                height: element.height,                                                                                // 297
                bottom: element.offset.top + element.height                                                            // 298
              },                                                                                                       // 292
              context: {                                                                                               // 300
                top: context.offset.top,                                                                               // 301
                height: context.height,                                                                                // 302
                bottom: context.offset.top + context.height                                                            // 303
              }                                                                                                        // 300
            };                                                                                                         // 287
            module.set.containerSize();                                                                                // 306
            module.set.size();                                                                                         // 307
            module.stick();                                                                                            // 308
            module.debug('Caching element positions', module.cache);                                                   // 309
          }                                                                                                            // 310
        },                                                                                                             // 247
        get: {                                                                                                         // 313
          direction: function (scroll) {                                                                               // 314
            var direction = 'down';                                                                                    // 315
            scroll = scroll || $scroll.scrollTop();                                                                    // 318
                                                                                                                       //
            if (module.lastScroll !== undefined) {                                                                     // 319
              if (module.lastScroll < scroll) {                                                                        // 320
                direction = 'down';                                                                                    // 321
              } else if (module.lastScroll > scroll) {                                                                 // 322
                direction = 'up';                                                                                      // 324
              }                                                                                                        // 325
            }                                                                                                          // 326
                                                                                                                       //
            return direction;                                                                                          // 327
          },                                                                                                           // 328
          scrollChange: function (scroll) {                                                                            // 329
            scroll = scroll || $scroll.scrollTop();                                                                    // 330
            return module.lastScroll ? scroll - module.lastScroll : 0;                                                 // 331
          },                                                                                                           // 335
          currentElementScroll: function () {                                                                          // 336
            if (module.elementScroll) {                                                                                // 337
              return module.elementScroll;                                                                             // 338
            }                                                                                                          // 339
                                                                                                                       //
            return module.is.top() ? Math.abs(parseInt($module.css('top'), 10)) || 0 : Math.abs(parseInt($module.css('bottom'), 10)) || 0;
          },                                                                                                           // 344
          elementScroll: function (scroll) {                                                                           // 346
            scroll = scroll || $scroll.scrollTop();                                                                    // 347
            var element = module.cache.element,                                                                        // 348
                scrollContext = module.cache.scrollContext,                                                            // 348
                delta = module.get.scrollChange(scroll),                                                               // 348
                maxScroll = element.height - scrollContext.height + settings.offset,                                   // 348
                elementScroll = module.get.currentElementScroll(),                                                     // 348
                possibleScroll = elementScroll + delta;                                                                // 348
                                                                                                                       //
            if (module.cache.fits || possibleScroll < 0) {                                                             // 356
              elementScroll = 0;                                                                                       // 357
            } else if (possibleScroll > maxScroll) {                                                                   // 358
              elementScroll = maxScroll;                                                                               // 360
            } else {                                                                                                   // 361
              elementScroll = possibleScroll;                                                                          // 363
            }                                                                                                          // 364
                                                                                                                       //
            return elementScroll;                                                                                      // 365
          }                                                                                                            // 366
        },                                                                                                             // 313
        remove: {                                                                                                      // 369
          lastScroll: function () {                                                                                    // 370
            delete module.lastScroll;                                                                                  // 371
          },                                                                                                           // 372
          elementScroll: function (scroll) {                                                                           // 373
            delete module.elementScroll;                                                                               // 374
          },                                                                                                           // 375
          offset: function () {                                                                                        // 376
            $module.css('margin-top', '');                                                                             // 377
          }                                                                                                            // 378
        },                                                                                                             // 369
        set: {                                                                                                         // 381
          offset: function () {                                                                                        // 382
            module.verbose('Setting offset on element', settings.offset);                                              // 383
            $module.css('margin-top', settings.offset);                                                                // 384
          },                                                                                                           // 387
          containerSize: function () {                                                                                 // 388
            var tagName = $container.get(0).tagName;                                                                   // 389
                                                                                                                       //
            if (tagName === 'HTML' || tagName == 'body') {                                                             // 392
              // this can trigger for too many reasons                                                                 // 393
              //module.error(error.container, tagName, $module);                                                       // 394
              module.determineContainer();                                                                             // 395
            } else {                                                                                                   // 396
              if (Math.abs($container.outerHeight() - module.cache.context.height) > settings.jitter) {                // 398
                module.debug('Context has padding, specifying exact height for container', module.cache.context.height);
                $container.css({                                                                                       // 400
                  height: module.cache.context.height                                                                  // 401
                });                                                                                                    // 400
              }                                                                                                        // 403
            }                                                                                                          // 404
          },                                                                                                           // 405
          minimumSize: function () {                                                                                   // 406
            var element = module.cache.element;                                                                        // 407
            $container.css('min-height', element.height);                                                              // 410
          },                                                                                                           // 413
          scroll: function (scroll) {                                                                                  // 414
            module.debug('Setting scroll on element', scroll);                                                         // 415
                                                                                                                       //
            if (module.elementScroll == scroll) {                                                                      // 416
              return;                                                                                                  // 417
            }                                                                                                          // 418
                                                                                                                       //
            if (module.is.top()) {                                                                                     // 419
              $module.css('bottom', '').css('top', -scroll);                                                           // 420
            }                                                                                                          // 424
                                                                                                                       //
            if (module.is.bottom()) {                                                                                  // 425
              $module.css('top', '').css('bottom', scroll);                                                            // 426
            }                                                                                                          // 430
          },                                                                                                           // 431
          size: function () {                                                                                          // 432
            if (module.cache.element.height !== 0 && module.cache.element.width !== 0) {                               // 433
              element.style.setProperty('width', module.cache.element.width + 'px', 'important');                      // 434
              element.style.setProperty('height', module.cache.element.height + 'px', 'important');                    // 435
            }                                                                                                          // 436
          }                                                                                                            // 437
        },                                                                                                             // 381
        is: {                                                                                                          // 440
          standardScroll: function () {                                                                                // 441
            return $scroll[0] == window;                                                                               // 442
          },                                                                                                           // 443
          top: function () {                                                                                           // 444
            return $module.hasClass(className.top);                                                                    // 445
          },                                                                                                           // 446
          bottom: function () {                                                                                        // 447
            return $module.hasClass(className.bottom);                                                                 // 448
          },                                                                                                           // 449
          initialPosition: function () {                                                                               // 450
            return !module.is.fixed() && !module.is.bound();                                                           // 451
          },                                                                                                           // 452
          hidden: function () {                                                                                        // 453
            return !$module.is(':visible');                                                                            // 454
          },                                                                                                           // 455
          bound: function () {                                                                                         // 456
            return $module.hasClass(className.bound);                                                                  // 457
          },                                                                                                           // 458
          fixed: function () {                                                                                         // 459
            return $module.hasClass(className.fixed);                                                                  // 460
          }                                                                                                            // 461
        },                                                                                                             // 440
        stick: function (scroll) {                                                                                     // 464
          var cachedPosition = scroll || $scroll.scrollTop(),                                                          // 465
              cache = module.cache,                                                                                    // 465
              fits = cache.fits,                                                                                       // 465
              element = cache.element,                                                                                 // 465
              scrollContext = cache.scrollContext,                                                                     // 465
              context = cache.context,                                                                                 // 465
              offset = module.is.bottom() && settings.pushing ? settings.bottomOffset : settings.offset,               // 465
              scroll = {                                                                                               // 465
            top: cachedPosition + offset,                                                                              // 476
            bottom: cachedPosition + offset + scrollContext.height                                                     // 477
          },                                                                                                           // 475
              direction = module.get.direction(scroll.top),                                                            // 465
              elementScroll = fits ? 0 : module.get.elementScroll(scroll.top),                                         // 465
              // shorthand                                                                                             // 465
          doesntFit = !fits,                                                                                           // 485
              elementVisible = element.height !== 0;                                                                   // 465
                                                                                                                       //
          if (elementVisible) {                                                                                        // 489
            if (module.is.initialPosition()) {                                                                         // 491
              if (scroll.top >= context.bottom) {                                                                      // 492
                module.debug('Initial element position is bottom of container');                                       // 493
                module.bindBottom();                                                                                   // 494
              } else if (scroll.top > element.top) {                                                                   // 495
                if (element.height + scroll.top - elementScroll >= context.bottom) {                                   // 497
                  module.debug('Initial element position is bottom of container');                                     // 498
                  module.bindBottom();                                                                                 // 499
                } else {                                                                                               // 500
                  module.debug('Initial element position is fixed');                                                   // 502
                  module.fixTop();                                                                                     // 503
                }                                                                                                      // 504
              }                                                                                                        // 505
            } else if (module.is.fixed()) {                                                                            // 507
              // currently fixed top                                                                                   // 510
              if (module.is.top()) {                                                                                   // 511
                if (scroll.top <= element.top) {                                                                       // 512
                  module.debug('Fixed element reached top of container');                                              // 513
                  module.setInitialPosition();                                                                         // 514
                } else if (element.height + scroll.top - elementScroll >= context.bottom) {                            // 515
                  module.debug('Fixed element reached bottom of container');                                           // 517
                  module.bindBottom();                                                                                 // 518
                } // scroll element if larger than screen                                                              // 519
                else if (doesntFit) {                                                                                  // 516
                    module.set.scroll(elementScroll);                                                                  // 522
                    module.save.lastScroll(scroll.top);                                                                // 523
                    module.save.elementScroll(elementScroll);                                                          // 524
                  }                                                                                                    // 525
              } // currently fixed bottom                                                                              // 526
              else if (module.is.bottom()) {                                                                           // 511
                  // top edge                                                                                          // 531
                  if (scroll.bottom - element.height <= element.top) {                                                 // 532
                    module.debug('Bottom fixed rail has reached top of container');                                    // 533
                    module.setInitialPosition();                                                                       // 534
                  } // bottom edge                                                                                     // 535
                  else if (scroll.bottom >= context.bottom) {                                                          // 532
                      module.debug('Bottom fixed rail has reached bottom of container');                               // 538
                      module.bindBottom();                                                                             // 539
                    } // scroll element if larger than screen                                                          // 540
                    else if (doesntFit) {                                                                              // 537
                        module.set.scroll(elementScroll);                                                              // 543
                        module.save.lastScroll(scroll.top);                                                            // 544
                        module.save.elementScroll(elementScroll);                                                      // 545
                      }                                                                                                // 546
                }                                                                                                      // 548
            } else if (module.is.bottom()) {                                                                           // 549
              if (scroll.top <= element.top) {                                                                         // 551
                module.debug('Jumped from bottom fixed to top fixed, most likely used home/end button');               // 552
                module.setInitialPosition();                                                                           // 553
              } else {                                                                                                 // 554
                if (settings.pushing) {                                                                                // 556
                  if (module.is.bound() && scroll.bottom <= context.bottom) {                                          // 557
                    module.debug('Fixing bottom attached element to bottom of browser.');                              // 558
                    module.fixBottom();                                                                                // 559
                  }                                                                                                    // 560
                } else {                                                                                               // 561
                  if (module.is.bound() && scroll.top <= context.bottom - element.height) {                            // 563
                    module.debug('Fixing bottom attached element to top of browser.');                                 // 564
                    module.fixTop();                                                                                   // 565
                  }                                                                                                    // 566
                }                                                                                                      // 567
              }                                                                                                        // 568
            }                                                                                                          // 569
          }                                                                                                            // 570
        },                                                                                                             // 571
        bindTop: function () {                                                                                         // 573
          module.debug('Binding element to top of parent container');                                                  // 574
          module.remove.offset();                                                                                      // 575
          $module.css({                                                                                                // 576
            left: '',                                                                                                  // 578
            top: '',                                                                                                   // 579
            marginBottom: ''                                                                                           // 580
          }).removeClass(className.fixed).removeClass(className.bottom).addClass(className.bound).addClass(className.top);
          settings.onTop.call(element);                                                                                // 587
          settings.onUnstick.call(element);                                                                            // 588
        },                                                                                                             // 589
        bindBottom: function () {                                                                                      // 590
          module.debug('Binding element to bottom of parent container');                                               // 591
          module.remove.offset();                                                                                      // 592
          $module.css({                                                                                                // 593
            left: '',                                                                                                  // 595
            top: ''                                                                                                    // 596
          }).removeClass(className.fixed).removeClass(className.top).addClass(className.bound).addClass(className.bottom);
          settings.onBottom.call(element);                                                                             // 603
          settings.onUnstick.call(element);                                                                            // 604
        },                                                                                                             // 605
        setInitialPosition: function () {                                                                              // 607
          module.debug('Returning to initial position');                                                               // 608
          module.unfix();                                                                                              // 609
          module.unbind();                                                                                             // 610
        },                                                                                                             // 611
        fixTop: function () {                                                                                          // 614
          module.debug('Fixing element to top of page');                                                               // 615
          module.set.minimumSize();                                                                                    // 616
          module.set.offset();                                                                                         // 617
          $module.css({                                                                                                // 618
            left: module.cache.element.left,                                                                           // 620
            bottom: '',                                                                                                // 621
            marginBottom: ''                                                                                           // 622
          }).removeClass(className.bound).removeClass(className.bottom).addClass(className.fixed).addClass(className.top);
          settings.onStick.call(element);                                                                              // 629
        },                                                                                                             // 630
        fixBottom: function () {                                                                                       // 632
          module.debug('Sticking element to bottom of page');                                                          // 633
          module.set.minimumSize();                                                                                    // 634
          module.set.offset();                                                                                         // 635
          $module.css({                                                                                                // 636
            left: module.cache.element.left,                                                                           // 638
            bottom: '',                                                                                                // 639
            marginBottom: ''                                                                                           // 640
          }).removeClass(className.bound).removeClass(className.top).addClass(className.fixed).addClass(className.bottom);
          settings.onStick.call(element);                                                                              // 647
        },                                                                                                             // 648
        unbind: function () {                                                                                          // 650
          if (module.is.bound()) {                                                                                     // 651
            module.debug('Removing container bound position on element');                                              // 652
            module.remove.offset();                                                                                    // 653
            $module.removeClass(className.bound).removeClass(className.top).removeClass(className.bottom);             // 654
          }                                                                                                            // 659
        },                                                                                                             // 660
        unfix: function () {                                                                                           // 662
          if (module.is.fixed()) {                                                                                     // 663
            module.debug('Removing fixed position on element');                                                        // 664
            module.remove.offset();                                                                                    // 665
            $module.removeClass(className.fixed).removeClass(className.top).removeClass(className.bottom);             // 666
            settings.onUnstick.call(element);                                                                          // 671
          }                                                                                                            // 672
        },                                                                                                             // 673
        reset: function () {                                                                                           // 675
          module.debug('Resetting elements position');                                                                 // 676
          module.unbind();                                                                                             // 677
          module.unfix();                                                                                              // 678
          module.resetCSS();                                                                                           // 679
          module.remove.offset();                                                                                      // 680
          module.remove.lastScroll();                                                                                  // 681
        },                                                                                                             // 682
        resetCSS: function () {                                                                                        // 684
          $module.css({                                                                                                // 685
            width: '',                                                                                                 // 687
            height: ''                                                                                                 // 688
          });                                                                                                          // 686
          $container.css({                                                                                             // 691
            height: ''                                                                                                 // 693
          });                                                                                                          // 692
        },                                                                                                             // 696
        setting: function (name, value) {                                                                              // 698
          if ($.isPlainObject(name)) {                                                                                 // 699
            $.extend(true, settings, name);                                                                            // 700
          } else if (value !== undefined) {                                                                            // 701
            settings[name] = value;                                                                                    // 703
          } else {                                                                                                     // 704
            return settings[name];                                                                                     // 706
          }                                                                                                            // 707
        },                                                                                                             // 708
        internal: function (name, value) {                                                                             // 709
          if ($.isPlainObject(name)) {                                                                                 // 710
            $.extend(true, module, name);                                                                              // 711
          } else if (value !== undefined) {                                                                            // 712
            module[name] = value;                                                                                      // 714
          } else {                                                                                                     // 715
            return module[name];                                                                                       // 717
          }                                                                                                            // 718
        },                                                                                                             // 719
        debug: function () {                                                                                           // 720
          if (!settings.silent && settings.debug) {                                                                    // 721
            if (settings.performance) {                                                                                // 722
              module.performance.log(arguments);                                                                       // 723
            } else {                                                                                                   // 724
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 726
              module.debug.apply(console, arguments);                                                                  // 727
            }                                                                                                          // 728
          }                                                                                                            // 729
        },                                                                                                             // 730
        verbose: function () {                                                                                         // 731
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 732
            if (settings.performance) {                                                                                // 733
              module.performance.log(arguments);                                                                       // 734
            } else {                                                                                                   // 735
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 737
              module.verbose.apply(console, arguments);                                                                // 738
            }                                                                                                          // 739
          }                                                                                                            // 740
        },                                                                                                             // 741
        error: function () {                                                                                           // 742
          if (!settings.silent) {                                                                                      // 743
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 744
            module.error.apply(console, arguments);                                                                    // 745
          }                                                                                                            // 746
        },                                                                                                             // 747
        performance: {                                                                                                 // 748
          log: function (message) {                                                                                    // 749
            var currentTime, executionTime, previousTime;                                                              // 750
                                                                                                                       //
            if (settings.performance) {                                                                                // 755
              currentTime = new Date().getTime();                                                                      // 756
              previousTime = time || currentTime;                                                                      // 757
              executionTime = currentTime - previousTime;                                                              // 758
              time = currentTime;                                                                                      // 759
              performance.push({                                                                                       // 760
                'Name': message[0],                                                                                    // 761
                'Arguments': [].slice.call(message, 1) || '',                                                          // 762
                'Element': element,                                                                                    // 763
                'Execution Time': executionTime                                                                        // 764
              });                                                                                                      // 760
            }                                                                                                          // 766
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 767
            module.performance.timer = setTimeout(module.performance.display, 0);                                      // 768
          },                                                                                                           // 769
          display: function () {                                                                                       // 770
            var title = settings.name + ':',                                                                           // 771
                totalTime = 0;                                                                                         // 771
            time = false;                                                                                              // 775
            clearTimeout(module.performance.timer);                                                                    // 776
            $.each(performance, function (index, data) {                                                               // 777
              totalTime += data['Execution Time'];                                                                     // 778
            });                                                                                                        // 779
            title += ' ' + totalTime + 'ms';                                                                           // 780
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 781
              title += ' \'' + moduleSelector + '\'';                                                                  // 782
            }                                                                                                          // 783
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 784
              console.groupCollapsed(title);                                                                           // 785
                                                                                                                       //
              if (console.table) {                                                                                     // 786
                console.table(performance);                                                                            // 787
              } else {                                                                                                 // 788
                $.each(performance, function (index, data) {                                                           // 790
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 791
                });                                                                                                    // 792
              }                                                                                                        // 793
                                                                                                                       //
              console.groupEnd();                                                                                      // 794
            }                                                                                                          // 795
                                                                                                                       //
            performance = [];                                                                                          // 796
          }                                                                                                            // 797
        },                                                                                                             // 748
        invoke: function (query, passedArguments, context) {                                                           // 799
          var object = instance,                                                                                       // 800
              maxDepth,                                                                                                // 800
              found,                                                                                                   // 800
              response;                                                                                                // 800
          passedArguments = passedArguments || queryArguments;                                                         // 806
          context = element || context;                                                                                // 807
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 808
            query = query.split(/[\. ]/);                                                                              // 809
            maxDepth = query.length - 1;                                                                               // 810
            $.each(query, function (depth, value) {                                                                    // 811
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 816
                object = object[camelCaseValue];                                                                       // 817
              } else if (object[camelCaseValue] !== undefined) {                                                       // 818
                found = object[camelCaseValue];                                                                        // 820
                return false;                                                                                          // 821
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 822
                object = object[value];                                                                                // 824
              } else if (object[value] !== undefined) {                                                                // 825
                found = object[value];                                                                                 // 827
                return false;                                                                                          // 828
              } else {                                                                                                 // 829
                return false;                                                                                          // 831
              }                                                                                                        // 832
            });                                                                                                        // 833
          }                                                                                                            // 834
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 835
            response = found.apply(context, passedArguments);                                                          // 836
          } else if (found !== undefined) {                                                                            // 837
            response = found;                                                                                          // 839
          }                                                                                                            // 840
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 841
            returnedValue.push(response);                                                                              // 842
          } else if (returnedValue !== undefined) {                                                                    // 843
            returnedValue = [returnedValue, response];                                                                 // 845
          } else if (response !== undefined) {                                                                         // 846
            returnedValue = response;                                                                                  // 848
          }                                                                                                            // 849
                                                                                                                       //
          return found;                                                                                                // 850
        }                                                                                                              // 851
      };                                                                                                               // 76
                                                                                                                       //
      if (methodInvoked) {                                                                                             // 854
        if (instance === undefined) {                                                                                  // 855
          module.initialize();                                                                                         // 856
        }                                                                                                              // 857
                                                                                                                       //
        module.invoke(query);                                                                                          // 858
      } else {                                                                                                         // 859
        if (instance !== undefined) {                                                                                  // 861
          instance.invoke('destroy');                                                                                  // 862
        }                                                                                                              // 863
                                                                                                                       //
        module.initialize();                                                                                           // 864
      }                                                                                                                // 865
    });                                                                                                                // 866
    return returnedValue !== undefined ? returnedValue : this;                                                         // 869
  };                                                                                                                   // 873
                                                                                                                       //
  $.fn.sticky.settings = {                                                                                             // 875
    name: 'Sticky',                                                                                                    // 877
    namespace: 'sticky',                                                                                               // 878
    silent: false,                                                                                                     // 880
    debug: false,                                                                                                      // 881
    verbose: true,                                                                                                     // 882
    performance: true,                                                                                                 // 883
    // whether to stick in the opposite direction on scroll up                                                         // 885
    pushing: false,                                                                                                    // 886
    context: false,                                                                                                    // 888
    // Context to watch scroll events                                                                                  // 890
    scrollContext: window,                                                                                             // 891
    // Offset to adjust scroll                                                                                         // 893
    offset: 0,                                                                                                         // 894
    // Offset to adjust scroll when attached to bottom of screen                                                       // 896
    bottomOffset: 0,                                                                                                   // 897
    jitter: 5,                                                                                                         // 899
    // will only set container height if difference between context and container is larger than this number           // 899
    // Whether to automatically observe changes with Mutation Observers                                                // 901
    observeChanges: false,                                                                                             // 902
    // Called when position is recalculated                                                                            // 904
    onReposition: function () {},                                                                                      // 905
    // Called on each scroll                                                                                           // 907
    onScroll: function () {},                                                                                          // 908
    // Called when element is stuck to viewport                                                                        // 910
    onStick: function () {},                                                                                           // 911
    // Called when element is unstuck from viewport                                                                    // 913
    onUnstick: function () {},                                                                                         // 914
    // Called when element reaches top of context                                                                      // 916
    onTop: function () {},                                                                                             // 917
    // Called when element reaches bottom of context                                                                   // 919
    onBottom: function () {},                                                                                          // 920
    error: {                                                                                                           // 922
      container: 'Sticky element must be inside a relative container',                                                 // 923
      visible: 'Element is hidden, you must call refresh after element becomes visible. Use silent setting to surpress this warning in production.',
      method: 'The method you called is not defined.',                                                                 // 925
      invalidContext: 'Context specified does not exist',                                                              // 926
      elementSize: 'Sticky element is larger than its container, cannot create sticky.'                                // 927
    },                                                                                                                 // 922
    className: {                                                                                                       // 930
      bound: 'bound',                                                                                                  // 931
      fixed: 'fixed',                                                                                                  // 932
      supported: 'native',                                                                                             // 933
      top: 'top',                                                                                                      // 934
      bottom: 'bottom'                                                                                                 // 935
    }                                                                                                                  // 930
  };                                                                                                                   // 875
})(jQuery, window, document);                                                                                          // 940
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"tab.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/modules/tab.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Tab                                                                                              //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.tab = function (parameters) {                                                                                   // 26
    var // use window context if none specified                                                                        // 28
    $allModules = $.isFunction(this) ? $(window) : $(this),                                                            // 30
        moduleSelector = $allModules.selector || '',                                                                   // 28
        time = new Date().getTime(),                                                                                   // 28
        performance = [],                                                                                              // 28
        query = arguments[0],                                                                                          // 28
        methodInvoked = typeof query == 'string',                                                                      // 28
        queryArguments = [].slice.call(arguments, 1),                                                                  // 28
        initializedHistory = false,                                                                                    // 28
        returnedValue;                                                                                                 // 28
    $allModules.each(function () {                                                                                     // 46
      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, $.fn.tab.settings, parameters) : $.extend({}, $.fn.tab.settings),
          className = settings.className,                                                                              // 48
          metadata = settings.metadata,                                                                                // 48
          selector = settings.selector,                                                                                // 48
          error = settings.error,                                                                                      // 48
          eventNamespace = '.' + settings.namespace,                                                                   // 48
          moduleNamespace = 'module-' + settings.namespace,                                                            // 48
          $module = $(this),                                                                                           // 48
          $context,                                                                                                    // 48
          $tabs,                                                                                                       // 48
          cache = {},                                                                                                  // 48
          firstLoad = true,                                                                                            // 48
          recursionDepth = 0,                                                                                          // 48
          element = this,                                                                                              // 48
          instance = $module.data(moduleNamespace),                                                                    // 48
          activeTabPath,                                                                                               // 48
          parameterArray,                                                                                              // 48
          module,                                                                                                      // 48
          historyEvent;                                                                                                // 48
      module = {                                                                                                       // 80
        initialize: function () {                                                                                      // 82
          module.debug('Initializing tab menu item', $module);                                                         // 83
          module.fix.callbacks();                                                                                      // 84
          module.determineTabs();                                                                                      // 85
          module.debug('Determining tabs', settings.context, $tabs); // set up automatic routing                       // 87
                                                                                                                       //
          if (settings.auto) {                                                                                         // 89
            module.set.auto();                                                                                         // 90
          }                                                                                                            // 91
                                                                                                                       //
          module.bind.events();                                                                                        // 92
                                                                                                                       //
          if (settings.history && !initializedHistory) {                                                               // 94
            module.initializeHistory();                                                                                // 95
            initializedHistory = true;                                                                                 // 96
          }                                                                                                            // 97
                                                                                                                       //
          module.instantiate();                                                                                        // 99
        },                                                                                                             // 100
        instantiate: function () {                                                                                     // 102
          module.verbose('Storing instance of module', module);                                                        // 103
          instance = module;                                                                                           // 104
          $module.data(moduleNamespace, module);                                                                       // 105
        },                                                                                                             // 108
        destroy: function () {                                                                                         // 110
          module.debug('Destroying tabs', $module);                                                                    // 111
          $module.removeData(moduleNamespace).off(eventNamespace);                                                     // 112
        },                                                                                                             // 116
        bind: {                                                                                                        // 118
          events: function () {                                                                                        // 119
            // if using $.tab don't add events                                                                         // 120
            if (!$.isWindow(element)) {                                                                                // 121
              module.debug('Attaching tab activation events to element', $module);                                     // 122
              $module.on('click' + eventNamespace, module.event.click);                                                // 123
            }                                                                                                          // 126
          }                                                                                                            // 127
        },                                                                                                             // 118
        determineTabs: function () {                                                                                   // 130
          var $reference; // determine tab context                                                                     // 131
                                                                                                                       //
          if (settings.context === 'parent') {                                                                         // 136
            if ($module.closest(selector.ui).length > 0) {                                                             // 137
              $reference = $module.closest(selector.ui);                                                               // 138
              module.verbose('Using closest UI element as parent', $reference);                                        // 139
            } else {                                                                                                   // 140
              $reference = $module;                                                                                    // 142
            }                                                                                                          // 143
                                                                                                                       //
            $context = $reference.parent();                                                                            // 144
            module.verbose('Determined parent element for creating context', $context);                                // 145
          } else if (settings.context) {                                                                               // 146
            $context = $(settings.context);                                                                            // 148
            module.verbose('Using selector for tab context', settings.context, $context);                              // 149
          } else {                                                                                                     // 150
            $context = $('body');                                                                                      // 152
          } // find tabs                                                                                               // 153
                                                                                                                       //
                                                                                                                       //
          if (settings.childrenOnly) {                                                                                 // 155
            $tabs = $context.children(selector.tabs);                                                                  // 156
            module.debug('Searching tab context children for tabs', $context, $tabs);                                  // 157
          } else {                                                                                                     // 158
            $tabs = $context.find(selector.tabs);                                                                      // 160
            module.debug('Searching tab context for tabs', $context, $tabs);                                           // 161
          }                                                                                                            // 162
        },                                                                                                             // 163
        fix: {                                                                                                         // 165
          callbacks: function () {                                                                                     // 166
            if ($.isPlainObject(parameters) && (parameters.onTabLoad || parameters.onTabInit)) {                       // 167
              if (parameters.onTabLoad) {                                                                              // 168
                parameters.onLoad = parameters.onTabLoad;                                                              // 169
                delete parameters.onTabLoad;                                                                           // 170
                module.error(error.legacyLoad, parameters.onLoad);                                                     // 171
              }                                                                                                        // 172
                                                                                                                       //
              if (parameters.onTabInit) {                                                                              // 173
                parameters.onFirstLoad = parameters.onTabInit;                                                         // 174
                delete parameters.onTabInit;                                                                           // 175
                module.error(error.legacyInit, parameters.onFirstLoad);                                                // 176
              }                                                                                                        // 177
                                                                                                                       //
              settings = $.extend(true, {}, $.fn.tab.settings, parameters);                                            // 178
            }                                                                                                          // 179
          }                                                                                                            // 180
        },                                                                                                             // 165
        initializeHistory: function () {                                                                               // 183
          module.debug('Initializing page state');                                                                     // 184
                                                                                                                       //
          if ($.address === undefined) {                                                                               // 185
            module.error(error.state);                                                                                 // 186
            return false;                                                                                              // 187
          } else {                                                                                                     // 188
            if (settings.historyType == 'state') {                                                                     // 190
              module.debug('Using HTML5 to manage state');                                                             // 191
                                                                                                                       //
              if (settings.path !== false) {                                                                           // 192
                $.address.history(true).state(settings.path);                                                          // 193
              } else {                                                                                                 // 197
                module.error(error.path);                                                                              // 199
                return false;                                                                                          // 200
              }                                                                                                        // 201
            }                                                                                                          // 202
                                                                                                                       //
            $.address.bind('change', module.event.history.change);                                                     // 203
          }                                                                                                            // 206
        },                                                                                                             // 207
        event: {                                                                                                       // 209
          click: function (event) {                                                                                    // 210
            var tabPath = $(this).data(metadata.tab);                                                                  // 211
                                                                                                                       //
            if (tabPath !== undefined) {                                                                               // 214
              if (settings.history) {                                                                                  // 215
                module.verbose('Updating page state', event);                                                          // 216
                $.address.value(tabPath);                                                                              // 217
              } else {                                                                                                 // 218
                module.verbose('Changing tab', event);                                                                 // 220
                module.changeTab(tabPath);                                                                             // 221
              }                                                                                                        // 222
                                                                                                                       //
              event.preventDefault();                                                                                  // 223
            } else {                                                                                                   // 224
              module.debug('No tab specified');                                                                        // 226
            }                                                                                                          // 227
          },                                                                                                           // 228
          history: {                                                                                                   // 229
            change: function (event) {                                                                                 // 230
              var tabPath = event.pathNames.join('/') || module.get.initialPath(),                                     // 231
                  pageTitle = settings.templates.determineTitle(tabPath) || false;                                     // 231
              module.performance.display();                                                                            // 235
              module.debug('History change event', tabPath, event);                                                    // 236
              historyEvent = event;                                                                                    // 237
                                                                                                                       //
              if (tabPath !== undefined) {                                                                             // 238
                module.changeTab(tabPath);                                                                             // 239
              }                                                                                                        // 240
                                                                                                                       //
              if (pageTitle) {                                                                                         // 241
                $.address.title(pageTitle);                                                                            // 242
              }                                                                                                        // 243
            }                                                                                                          // 244
          }                                                                                                            // 229
        },                                                                                                             // 209
        refresh: function () {                                                                                         // 248
          if (activeTabPath) {                                                                                         // 249
            module.debug('Refreshing tab', activeTabPath);                                                             // 250
            module.changeTab(activeTabPath);                                                                           // 251
          }                                                                                                            // 252
        },                                                                                                             // 253
        cache: {                                                                                                       // 255
          read: function (cacheKey) {                                                                                  // 257
            return cacheKey !== undefined ? cache[cacheKey] : false;                                                   // 258
          },                                                                                                           // 262
          add: function (cacheKey, content) {                                                                          // 263
            cacheKey = cacheKey || activeTabPath;                                                                      // 264
            module.debug('Adding cached content for', cacheKey);                                                       // 265
            cache[cacheKey] = content;                                                                                 // 266
          },                                                                                                           // 267
          remove: function (cacheKey) {                                                                                // 268
            cacheKey = cacheKey || activeTabPath;                                                                      // 269
            module.debug('Removing cached content for', cacheKey);                                                     // 270
            delete cache[cacheKey];                                                                                    // 271
          }                                                                                                            // 272
        },                                                                                                             // 255
        set: {                                                                                                         // 275
          auto: function () {                                                                                          // 276
            var url = typeof settings.path == 'string' ? settings.path.replace(/\/$/, '') + '/{$tab}' : '/{$tab}';     // 277
            module.verbose('Setting up automatic tab retrieval from server', url);                                     // 282
                                                                                                                       //
            if ($.isPlainObject(settings.apiSettings)) {                                                               // 283
              settings.apiSettings.url = url;                                                                          // 284
            } else {                                                                                                   // 285
              settings.apiSettings = {                                                                                 // 287
                url: url                                                                                               // 288
              };                                                                                                       // 287
            }                                                                                                          // 290
          },                                                                                                           // 291
          loading: function (tabPath) {                                                                                // 292
            var $tab = module.get.tabElement(tabPath),                                                                 // 293
                isLoading = $tab.hasClass(className.loading);                                                          // 293
                                                                                                                       //
            if (!isLoading) {                                                                                          // 297
              module.verbose('Setting loading state for', $tab);                                                       // 298
              $tab.addClass(className.loading).siblings($tabs).removeClass(className.active + ' ' + className.loading);
                                                                                                                       //
              if ($tab.length > 0) {                                                                                   // 304
                settings.onRequest.call($tab[0], tabPath);                                                             // 305
              }                                                                                                        // 306
            }                                                                                                          // 307
          },                                                                                                           // 308
          state: function (state) {                                                                                    // 309
            $.address.value(state);                                                                                    // 310
          }                                                                                                            // 311
        },                                                                                                             // 275
        changeTab: function (tabPath) {                                                                                // 314
          var pushStateAvailable = window.history && window.history.pushState,                                         // 315
              shouldIgnoreLoad = pushStateAvailable && settings.ignoreFirstLoad && firstLoad,                          // 315
              remoteContent = settings.auto || $.isPlainObject(settings.apiSettings),                                  // 315
              // only add default path if not remote content                                                           // 315
          pathArray = remoteContent && !shouldIgnoreLoad ? module.utilities.pathToArray(tabPath) : module.get.defaultPathArray(tabPath);
          tabPath = module.utilities.arrayToPath(pathArray);                                                           // 324
          $.each(pathArray, function (index, tab) {                                                                    // 325
            var currentPathArray = pathArray.slice(0, index + 1),                                                      // 326
                currentPath = module.utilities.arrayToPath(currentPathArray),                                          // 326
                isTab = module.is.tab(currentPath),                                                                    // 326
                isLastIndex = index + 1 == pathArray.length,                                                           // 326
                $tab = module.get.tabElement(currentPath),                                                             // 326
                $anchor,                                                                                               // 326
                nextPathArray,                                                                                         // 326
                nextPath,                                                                                              // 326
                isLastTab;                                                                                             // 326
            module.verbose('Looking for tab', tab);                                                                    // 339
                                                                                                                       //
            if (isTab) {                                                                                               // 340
              module.verbose('Tab was found', tab); // scope up                                                        // 341
                                                                                                                       //
              activeTabPath = currentPath;                                                                             // 343
              parameterArray = module.utilities.filterArray(pathArray, currentPathArray);                              // 344
                                                                                                                       //
              if (isLastIndex) {                                                                                       // 346
                isLastTab = true;                                                                                      // 347
              } else {                                                                                                 // 348
                nextPathArray = pathArray.slice(0, index + 2);                                                         // 350
                nextPath = module.utilities.arrayToPath(nextPathArray);                                                // 351
                isLastTab = !module.is.tab(nextPath);                                                                  // 352
                                                                                                                       //
                if (isLastTab) {                                                                                       // 353
                  module.verbose('Tab parameters found', nextPathArray);                                               // 354
                }                                                                                                      // 355
              }                                                                                                        // 356
                                                                                                                       //
              if (isLastTab && remoteContent) {                                                                        // 357
                if (!shouldIgnoreLoad) {                                                                               // 358
                  module.activate.navigation(currentPath);                                                             // 359
                  module.fetch.content(currentPath, tabPath);                                                          // 360
                } else {                                                                                               // 361
                  module.debug('Ignoring remote content on first tab load', currentPath);                              // 363
                  firstLoad = false;                                                                                   // 364
                  module.cache.add(tabPath, $tab.html());                                                              // 365
                  module.activate.all(currentPath);                                                                    // 366
                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);                       // 367
                  settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);                            // 368
                }                                                                                                      // 369
                                                                                                                       //
                return false;                                                                                          // 370
              } else {                                                                                                 // 371
                module.debug('Opened local tab', currentPath);                                                         // 373
                module.activate.all(currentPath);                                                                      // 374
                                                                                                                       //
                if (!module.cache.read(currentPath)) {                                                                 // 375
                  module.cache.add(currentPath, true);                                                                 // 376
                  module.debug('First time tab loaded calling tab init');                                              // 377
                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);                       // 378
                }                                                                                                      // 379
                                                                                                                       //
                settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);                              // 380
              }                                                                                                        // 381
            } else if (tabPath.search('/') == -1 && tabPath !== '') {                                                  // 383
              // look for in page anchor                                                                               // 385
              $anchor = $('#' + tabPath + ', a[name="' + tabPath + '"]');                                              // 386
              currentPath = $anchor.closest('[data-tab]').data(metadata.tab);                                          // 387
              $tab = module.get.tabElement(currentPath); // if anchor exists use parent tab                            // 388
                                                                                                                       //
              if ($anchor && $anchor.length > 0 && currentPath) {                                                      // 390
                module.debug('Anchor link used, opening parent tab', $tab, $anchor);                                   // 391
                                                                                                                       //
                if (!$tab.hasClass(className.active)) {                                                                // 392
                  setTimeout(function () {                                                                             // 393
                    module.scrollTo($anchor);                                                                          // 394
                  }, 0);                                                                                               // 395
                }                                                                                                      // 396
                                                                                                                       //
                module.activate.all(currentPath);                                                                      // 397
                                                                                                                       //
                if (!module.cache.read(currentPath)) {                                                                 // 398
                  module.cache.add(currentPath, true);                                                                 // 399
                  module.debug('First time tab loaded calling tab init');                                              // 400
                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);                       // 401
                }                                                                                                      // 402
                                                                                                                       //
                settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);                              // 403
                return false;                                                                                          // 404
              }                                                                                                        // 405
            } else {                                                                                                   // 406
              module.error(error.missingTab, $module, $context, currentPath);                                          // 408
              return false;                                                                                            // 409
            }                                                                                                          // 410
          });                                                                                                          // 411
        },                                                                                                             // 412
        scrollTo: function ($element) {                                                                                // 414
          var scrollOffset = $element && $element.length > 0 ? $element.offset().top : false;                          // 415
                                                                                                                       //
          if (scrollOffset !== false) {                                                                                // 420
            module.debug('Forcing scroll to an in-page link in a hidden tab', scrollOffset, $element);                 // 421
            $(document).scrollTop(scrollOffset);                                                                       // 422
          }                                                                                                            // 423
        },                                                                                                             // 424
        update: {                                                                                                      // 426
          content: function (tabPath, html, evaluateScripts) {                                                         // 427
            var $tab = module.get.tabElement(tabPath),                                                                 // 428
                tab = $tab[0];                                                                                         // 428
            evaluateScripts = evaluateScripts !== undefined ? evaluateScripts : settings.evaluateScripts;              // 432
                                                                                                                       //
            if (evaluateScripts) {                                                                                     // 436
              module.debug('Updating HTML and evaluating inline scripts', tabPath, html);                              // 437
              $tab.html(html);                                                                                         // 438
            } else {                                                                                                   // 439
              module.debug('Updating HTML', tabPath, html);                                                            // 441
              tab.innerHTML = html;                                                                                    // 442
            }                                                                                                          // 443
          }                                                                                                            // 444
        },                                                                                                             // 426
        fetch: {                                                                                                       // 447
          content: function (tabPath, fullTabPath) {                                                                   // 449
            var $tab = module.get.tabElement(tabPath),                                                                 // 450
                apiSettings = {                                                                                        // 450
              dataType: 'html',                                                                                        // 453
              encodeParameters: false,                                                                                 // 454
              on: 'now',                                                                                               // 455
              cache: settings.alwaysRefresh,                                                                           // 456
              headers: {                                                                                               // 457
                'X-Remote': true                                                                                       // 458
              },                                                                                                       // 457
              onSuccess: function (response) {                                                                         // 460
                if (settings.cacheType == 'response') {                                                                // 461
                  module.cache.add(fullTabPath, response);                                                             // 462
                }                                                                                                      // 463
                                                                                                                       //
                module.update.content(tabPath, response);                                                              // 464
                                                                                                                       //
                if (tabPath == activeTabPath) {                                                                        // 465
                  module.debug('Content loaded', tabPath);                                                             // 466
                  module.activate.tab(tabPath);                                                                        // 467
                } else {                                                                                               // 468
                  module.debug('Content loaded in background', tabPath);                                               // 470
                }                                                                                                      // 471
                                                                                                                       //
                settings.onFirstLoad.call($tab[0], tabPath, parameterArray, historyEvent);                             // 472
                settings.onLoad.call($tab[0], tabPath, parameterArray, historyEvent);                                  // 473
                                                                                                                       //
                if (settings.cacheType != 'response') {                                                                // 474
                  module.cache.add(fullTabPath, $tab.html());                                                          // 475
                }                                                                                                      // 476
              },                                                                                                       // 477
              urlData: {                                                                                               // 478
                tab: fullTabPath                                                                                       // 479
              }                                                                                                        // 478
            },                                                                                                         // 452
                request = $tab.api('get request') || false,                                                            // 450
                existingRequest = request && request.state() === 'pending',                                            // 450
                requestSettings,                                                                                       // 450
                cachedContent;                                                                                         // 450
            fullTabPath = fullTabPath || tabPath;                                                                      // 488
            cachedContent = module.cache.read(fullTabPath);                                                            // 489
                                                                                                                       //
            if (settings.cache && cachedContent) {                                                                     // 492
              module.activate.tab(tabPath);                                                                            // 493
              module.debug('Adding cached content', fullTabPath);                                                      // 494
                                                                                                                       //
              if (settings.evaluateScripts == 'once') {                                                                // 495
                module.update.content(tabPath, cachedContent, false);                                                  // 496
              } else {                                                                                                 // 497
                module.update.content(tabPath, cachedContent);                                                         // 499
              }                                                                                                        // 500
                                                                                                                       //
              settings.onLoad.call($tab[0], tabPath, parameterArray, historyEvent);                                    // 501
            } else if (existingRequest) {                                                                              // 502
              module.set.loading(tabPath);                                                                             // 504
              module.debug('Content is already loading', fullTabPath);                                                 // 505
            } else if ($.api !== undefined) {                                                                          // 506
              requestSettings = $.extend(true, {}, settings.apiSettings, apiSettings);                                 // 508
              module.debug('Retrieving remote content', fullTabPath, requestSettings);                                 // 509
              module.set.loading(tabPath);                                                                             // 510
              $tab.api(requestSettings);                                                                               // 511
            } else {                                                                                                   // 512
              module.error(error.api);                                                                                 // 514
            }                                                                                                          // 515
          }                                                                                                            // 516
        },                                                                                                             // 447
        activate: {                                                                                                    // 519
          all: function (tabPath) {                                                                                    // 520
            module.activate.tab(tabPath);                                                                              // 521
            module.activate.navigation(tabPath);                                                                       // 522
          },                                                                                                           // 523
          tab: function (tabPath) {                                                                                    // 524
            var $tab = module.get.tabElement(tabPath),                                                                 // 525
                $deactiveTabs = settings.deactivate == 'siblings' ? $tab.siblings($tabs) : $tabs.not($tab),            // 525
                isActive = $tab.hasClass(className.active);                                                            // 525
            module.verbose('Showing tab content for', $tab);                                                           // 532
                                                                                                                       //
            if (!isActive) {                                                                                           // 533
              $tab.addClass(className.active);                                                                         // 534
              $deactiveTabs.removeClass(className.active + ' ' + className.loading);                                   // 537
                                                                                                                       //
              if ($tab.length > 0) {                                                                                   // 540
                settings.onVisible.call($tab[0], tabPath);                                                             // 541
              }                                                                                                        // 542
            }                                                                                                          // 543
          },                                                                                                           // 544
          navigation: function (tabPath) {                                                                             // 545
            var $navigation = module.get.navElement(tabPath),                                                          // 546
                $deactiveNavigation = settings.deactivate == 'siblings' ? $navigation.siblings($allModules) : $allModules.not($navigation),
                isActive = $navigation.hasClass(className.active);                                                     // 546
            module.verbose('Activating tab navigation for', $navigation, tabPath);                                     // 553
                                                                                                                       //
            if (!isActive) {                                                                                           // 554
              $navigation.addClass(className.active);                                                                  // 555
              $deactiveNavigation.removeClass(className.active + ' ' + className.loading);                             // 558
            }                                                                                                          // 561
          }                                                                                                            // 562
        },                                                                                                             // 519
        deactivate: {                                                                                                  // 565
          all: function () {                                                                                           // 566
            module.deactivate.navigation();                                                                            // 567
            module.deactivate.tabs();                                                                                  // 568
          },                                                                                                           // 569
          navigation: function () {                                                                                    // 570
            $allModules.removeClass(className.active);                                                                 // 571
          },                                                                                                           // 574
          tabs: function () {                                                                                          // 575
            $tabs.removeClass(className.active + ' ' + className.loading);                                             // 576
          }                                                                                                            // 579
        },                                                                                                             // 565
        is: {                                                                                                          // 582
          tab: function (tabName) {                                                                                    // 583
            return tabName !== undefined ? module.get.tabElement(tabName).length > 0 : false;                          // 584
          }                                                                                                            // 588
        },                                                                                                             // 582
        get: {                                                                                                         // 591
          initialPath: function () {                                                                                   // 592
            return $allModules.eq(0).data(metadata.tab) || $tabs.eq(0).data(metadata.tab);                             // 593
          },                                                                                                           // 594
          path: function () {                                                                                          // 595
            return $.address.value();                                                                                  // 596
          },                                                                                                           // 597
          // adds default tabs to tab path                                                                             // 598
          defaultPathArray: function (tabPath) {                                                                       // 599
            return module.utilities.pathToArray(module.get.defaultPath(tabPath));                                      // 600
          },                                                                                                           // 601
          defaultPath: function (tabPath) {                                                                            // 602
            var $defaultNav = $allModules.filter('[data-' + metadata.tab + '^="' + tabPath + '/"]').eq(0),             // 603
                defaultTab = $defaultNav.data(metadata.tab) || false;                                                  // 603
                                                                                                                       //
            if (defaultTab) {                                                                                          // 607
              module.debug('Found default tab', defaultTab);                                                           // 608
                                                                                                                       //
              if (recursionDepth < settings.maxDepth) {                                                                // 609
                recursionDepth++;                                                                                      // 610
                return module.get.defaultPath(defaultTab);                                                             // 611
              }                                                                                                        // 612
                                                                                                                       //
              module.error(error.recursion);                                                                           // 613
            } else {                                                                                                   // 614
              module.debug('No default tabs found for', tabPath, $tabs);                                               // 616
            }                                                                                                          // 617
                                                                                                                       //
            recursionDepth = 0;                                                                                        // 618
            return tabPath;                                                                                            // 619
          },                                                                                                           // 620
          navElement: function (tabPath) {                                                                             // 621
            tabPath = tabPath || activeTabPath;                                                                        // 622
            return $allModules.filter('[data-' + metadata.tab + '="' + tabPath + '"]');                                // 623
          },                                                                                                           // 624
          tabElement: function (tabPath) {                                                                             // 625
            var $fullPathTab, $simplePathTab, tabPathArray, lastTab;                                                   // 626
            tabPath = tabPath || activeTabPath;                                                                        // 632
            tabPathArray = module.utilities.pathToArray(tabPath);                                                      // 633
            lastTab = module.utilities.last(tabPathArray);                                                             // 634
            $fullPathTab = $tabs.filter('[data-' + metadata.tab + '="' + tabPath + '"]');                              // 635
            $simplePathTab = $tabs.filter('[data-' + metadata.tab + '="' + lastTab + '"]');                            // 636
            return $fullPathTab.length > 0 ? $fullPathTab : $simplePathTab;                                            // 637
          },                                                                                                           // 641
          tab: function () {                                                                                           // 642
            return activeTabPath;                                                                                      // 643
          }                                                                                                            // 644
        },                                                                                                             // 591
        utilities: {                                                                                                   // 647
          filterArray: function (keepArray, removeArray) {                                                             // 648
            return $.grep(keepArray, function (keepValue) {                                                            // 649
              return $.inArray(keepValue, removeArray) == -1;                                                          // 650
            });                                                                                                        // 651
          },                                                                                                           // 652
          last: function (array) {                                                                                     // 653
            return $.isArray(array) ? array[array.length - 1] : false;                                                 // 654
          },                                                                                                           // 658
          pathToArray: function (pathName) {                                                                           // 659
            if (pathName === undefined) {                                                                              // 660
              pathName = activeTabPath;                                                                                // 661
            }                                                                                                          // 662
                                                                                                                       //
            return typeof pathName == 'string' ? pathName.split('/') : [pathName];                                     // 663
          },                                                                                                           // 667
          arrayToPath: function (pathArray) {                                                                          // 668
            return $.isArray(pathArray) ? pathArray.join('/') : false;                                                 // 669
          }                                                                                                            // 673
        },                                                                                                             // 647
        setting: function (name, value) {                                                                              // 676
          module.debug('Changing setting', name, value);                                                               // 677
                                                                                                                       //
          if ($.isPlainObject(name)) {                                                                                 // 678
            $.extend(true, settings, name);                                                                            // 679
          } else if (value !== undefined) {                                                                            // 680
            if ($.isPlainObject(settings[name])) {                                                                     // 682
              $.extend(true, settings[name], value);                                                                   // 683
            } else {                                                                                                   // 684
              settings[name] = value;                                                                                  // 686
            }                                                                                                          // 687
          } else {                                                                                                     // 688
            return settings[name];                                                                                     // 690
          }                                                                                                            // 691
        },                                                                                                             // 692
        internal: function (name, value) {                                                                             // 693
          if ($.isPlainObject(name)) {                                                                                 // 694
            $.extend(true, module, name);                                                                              // 695
          } else if (value !== undefined) {                                                                            // 696
            module[name] = value;                                                                                      // 698
          } else {                                                                                                     // 699
            return module[name];                                                                                       // 701
          }                                                                                                            // 702
        },                                                                                                             // 703
        debug: function () {                                                                                           // 704
          if (!settings.silent && settings.debug) {                                                                    // 705
            if (settings.performance) {                                                                                // 706
              module.performance.log(arguments);                                                                       // 707
            } else {                                                                                                   // 708
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 710
              module.debug.apply(console, arguments);                                                                  // 711
            }                                                                                                          // 712
          }                                                                                                            // 713
        },                                                                                                             // 714
        verbose: function () {                                                                                         // 715
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 716
            if (settings.performance) {                                                                                // 717
              module.performance.log(arguments);                                                                       // 718
            } else {                                                                                                   // 719
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 721
              module.verbose.apply(console, arguments);                                                                // 722
            }                                                                                                          // 723
          }                                                                                                            // 724
        },                                                                                                             // 725
        error: function () {                                                                                           // 726
          if (!settings.silent) {                                                                                      // 727
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 728
            module.error.apply(console, arguments);                                                                    // 729
          }                                                                                                            // 730
        },                                                                                                             // 731
        performance: {                                                                                                 // 732
          log: function (message) {                                                                                    // 733
            var currentTime, executionTime, previousTime;                                                              // 734
                                                                                                                       //
            if (settings.performance) {                                                                                // 739
              currentTime = new Date().getTime();                                                                      // 740
              previousTime = time || currentTime;                                                                      // 741
              executionTime = currentTime - previousTime;                                                              // 742
              time = currentTime;                                                                                      // 743
              performance.push({                                                                                       // 744
                'Name': message[0],                                                                                    // 745
                'Arguments': [].slice.call(message, 1) || '',                                                          // 746
                'Element': element,                                                                                    // 747
                'Execution Time': executionTime                                                                        // 748
              });                                                                                                      // 744
            }                                                                                                          // 750
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 751
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 752
          },                                                                                                           // 753
          display: function () {                                                                                       // 754
            var title = settings.name + ':',                                                                           // 755
                totalTime = 0;                                                                                         // 755
            time = false;                                                                                              // 759
            clearTimeout(module.performance.timer);                                                                    // 760
            $.each(performance, function (index, data) {                                                               // 761
              totalTime += data['Execution Time'];                                                                     // 762
            });                                                                                                        // 763
            title += ' ' + totalTime + 'ms';                                                                           // 764
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 765
              title += ' \'' + moduleSelector + '\'';                                                                  // 766
            }                                                                                                          // 767
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 768
              console.groupCollapsed(title);                                                                           // 769
                                                                                                                       //
              if (console.table) {                                                                                     // 770
                console.table(performance);                                                                            // 771
              } else {                                                                                                 // 772
                $.each(performance, function (index, data) {                                                           // 774
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 775
                });                                                                                                    // 776
              }                                                                                                        // 777
                                                                                                                       //
              console.groupEnd();                                                                                      // 778
            }                                                                                                          // 779
                                                                                                                       //
            performance = [];                                                                                          // 780
          }                                                                                                            // 781
        },                                                                                                             // 732
        invoke: function (query, passedArguments, context) {                                                           // 783
          var object = instance,                                                                                       // 784
              maxDepth,                                                                                                // 784
              found,                                                                                                   // 784
              response;                                                                                                // 784
          passedArguments = passedArguments || queryArguments;                                                         // 790
          context = element || context;                                                                                // 791
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 792
            query = query.split(/[\. ]/);                                                                              // 793
            maxDepth = query.length - 1;                                                                               // 794
            $.each(query, function (depth, value) {                                                                    // 795
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 800
                object = object[camelCaseValue];                                                                       // 801
              } else if (object[camelCaseValue] !== undefined) {                                                       // 802
                found = object[camelCaseValue];                                                                        // 804
                return false;                                                                                          // 805
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 806
                object = object[value];                                                                                // 808
              } else if (object[value] !== undefined) {                                                                // 809
                found = object[value];                                                                                 // 811
                return false;                                                                                          // 812
              } else {                                                                                                 // 813
                module.error(error.method, query);                                                                     // 815
                return false;                                                                                          // 816
              }                                                                                                        // 817
            });                                                                                                        // 818
          }                                                                                                            // 819
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 820
            response = found.apply(context, passedArguments);                                                          // 821
          } else if (found !== undefined) {                                                                            // 822
            response = found;                                                                                          // 824
          }                                                                                                            // 825
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 826
            returnedValue.push(response);                                                                              // 827
          } else if (returnedValue !== undefined) {                                                                    // 828
            returnedValue = [returnedValue, response];                                                                 // 830
          } else if (response !== undefined) {                                                                         // 831
            returnedValue = response;                                                                                  // 833
          }                                                                                                            // 834
                                                                                                                       //
          return found;                                                                                                // 835
        }                                                                                                              // 836
      };                                                                                                               // 80
                                                                                                                       //
      if (methodInvoked) {                                                                                             // 838
        if (instance === undefined) {                                                                                  // 839
          module.initialize();                                                                                         // 840
        }                                                                                                              // 841
                                                                                                                       //
        module.invoke(query);                                                                                          // 842
      } else {                                                                                                         // 843
        if (instance !== undefined) {                                                                                  // 845
          instance.invoke('destroy');                                                                                  // 846
        }                                                                                                              // 847
                                                                                                                       //
        module.initialize();                                                                                           // 848
      }                                                                                                                // 849
    });                                                                                                                // 850
    return returnedValue !== undefined ? returnedValue : this;                                                         // 852
  }; // shortcut for tabbed content with no defined navigation                                                         // 857
                                                                                                                       //
                                                                                                                       //
  $.tab = function () {                                                                                                // 860
    $(window).tab.apply(this, arguments);                                                                              // 861
  };                                                                                                                   // 862
                                                                                                                       //
  $.fn.tab.settings = {                                                                                                // 864
    name: 'Tab',                                                                                                       // 866
    namespace: 'tab',                                                                                                  // 867
    silent: false,                                                                                                     // 869
    debug: false,                                                                                                      // 870
    verbose: false,                                                                                                    // 871
    performance: true,                                                                                                 // 872
    auto: false,                                                                                                       // 874
    // uses pjax style endpoints fetching content from same url with remote-content headers                            // 874
    history: false,                                                                                                    // 875
    // use browser history                                                                                             // 875
    historyType: 'hash',                                                                                               // 876
    // #/ or html5 state                                                                                               // 876
    path: false,                                                                                                       // 877
    // base path of url                                                                                                // 877
    context: false,                                                                                                    // 879
    // specify a context that tabs must appear inside                                                                  // 879
    childrenOnly: false,                                                                                               // 880
    // use only tabs that are children of context                                                                      // 880
    maxDepth: 25,                                                                                                      // 881
    // max depth a tab can be nested                                                                                   // 881
    deactivate: 'siblings',                                                                                            // 883
    // whether tabs should deactivate sibling menu elements or all elements initialized together                       // 883
    alwaysRefresh: false,                                                                                              // 885
    // load tab content new every tab click                                                                            // 885
    cache: true,                                                                                                       // 886
    // cache the content requests to pull locally                                                                      // 886
    cacheType: 'response',                                                                                             // 887
    // Whether to cache exact response, or to html cache contents after scripts execute                                // 887
    ignoreFirstLoad: false,                                                                                            // 888
    // don't load remote content on first load                                                                         // 888
    apiSettings: false,                                                                                                // 890
    // settings for api call                                                                                           // 890
    evaluateScripts: 'once',                                                                                           // 891
    // whether inline scripts should be parsed (true/false/once). Once will not re-evaluate on cached content          // 891
    onFirstLoad: function (tabPath, parameterArray, historyEvent) {},                                                  // 893
    // called first time loaded                                                                                        // 893
    onLoad: function (tabPath, parameterArray, historyEvent) {},                                                       // 894
    // called on every load                                                                                            // 894
    onVisible: function (tabPath, parameterArray, historyEvent) {},                                                    // 895
    // called every time tab visible                                                                                   // 895
    onRequest: function (tabPath, parameterArray, historyEvent) {},                                                    // 896
    // called ever time a tab beings loading remote content                                                            // 896
    templates: {                                                                                                       // 898
      determineTitle: function (tabArray) {} // returns page title for path                                            // 899
                                                                                                                       //
    },                                                                                                                 // 898
    error: {                                                                                                           // 902
      api: 'You attempted to load content without API module',                                                         // 903
      method: 'The method you called is not defined',                                                                  // 904
      missingTab: 'Activated tab cannot be found. Tabs are case-sensitive.',                                           // 905
      noContent: 'The tab you specified is missing a content url.',                                                    // 906
      path: 'History enabled, but no path was specified',                                                              // 907
      recursion: 'Max recursive depth reached',                                                                        // 908
      legacyInit: 'onTabInit has been renamed to onFirstLoad in 2.0, please adjust your code.',                        // 909
      legacyLoad: 'onTabLoad has been renamed to onLoad in 2.0. Please adjust your code',                              // 910
      state: 'History requires Asual\'s Address library <https://github.com/asual/jquery-address>'                     // 911
    },                                                                                                                 // 902
    metadata: {                                                                                                        // 914
      tab: 'tab',                                                                                                      // 915
      loaded: 'loaded',                                                                                                // 916
      promise: 'promise'                                                                                               // 917
    },                                                                                                                 // 914
    className: {                                                                                                       // 920
      loading: 'loading',                                                                                              // 921
      active: 'active'                                                                                                 // 922
    },                                                                                                                 // 920
    selector: {                                                                                                        // 925
      tabs: '.ui.tab',                                                                                                 // 926
      ui: '.ui'                                                                                                        // 927
    }                                                                                                                  // 925
  };                                                                                                                   // 864
})(jQuery, window, document);                                                                                          // 932
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"transition.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/lib/semantic-ui/definitions/modules/transition.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof2 = require("babel-runtime/helpers/typeof");                                                                //
                                                                                                                       //
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }                      //
                                                                                                                       //
/*                                                                                                                     // 1
  DO NOT MODIFY - This file has been generated and will be regenerated                                                 //
  Semantic UI v2.2.1                                                                                                   //
*/ /*!                                                                                                                 //
    * # Semantic UI - Transition                                                                                       //
    * http://github.com/semantic-org/semantic-ui/                                                                      //
    *                                                                                                                  //
    *                                                                                                                  //
    * Released under the MIT license                                                                                   //
    * http://opensource.org/licenses/MIT                                                                               //
    *                                                                                                                  //
    */;                                                                                                                //
                                                                                                                       //
(function ($, window, document, undefined) {                                                                           // 15
  "use strict";                                                                                                        // 17
                                                                                                                       //
  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
                                                                                                                       //
  $.fn.transition = function () {                                                                                      // 26
    var $allModules = $(this),                                                                                         // 27
        moduleSelector = $allModules.selector || '',                                                                   // 27
        time = new Date().getTime(),                                                                                   // 27
        performance = [],                                                                                              // 27
        moduleArguments = arguments,                                                                                   // 27
        query = moduleArguments[0],                                                                                    // 27
        queryArguments = [].slice.call(arguments, 1),                                                                  // 27
        methodInvoked = typeof query === 'string',                                                                     // 27
        requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
      setTimeout(callback, 0);                                                                                         // 43
    },                                                                                                                 // 43
        returnedValue;                                                                                                 // 27
                                                                                                                       //
    $allModules.each(function (index) {                                                                                // 47
      var $module = $(this),                                                                                           // 49
          element = this,                                                                                              // 49
          // set at run time                                                                                           // 49
      settings,                                                                                                        // 54
          instance,                                                                                                    // 49
          error,                                                                                                       // 49
          className,                                                                                                   // 49
          metadata,                                                                                                    // 49
          animationEnd,                                                                                                // 49
          animationName,                                                                                               // 49
          namespace,                                                                                                   // 49
          moduleNamespace,                                                                                             // 49
          eventNamespace,                                                                                              // 49
          module;                                                                                                      // 49
      module = {                                                                                                       // 69
        initialize: function () {                                                                                      // 71
          // get full settings                                                                                         // 73
          settings = module.get.settings.apply(element, moduleArguments); // shorthand                                 // 74
                                                                                                                       //
          className = settings.className;                                                                              // 77
          error = settings.error;                                                                                      // 78
          metadata = settings.metadata; // define namespace                                                            // 79
                                                                                                                       //
          eventNamespace = '.' + settings.namespace;                                                                   // 82
          moduleNamespace = 'module-' + settings.namespace;                                                            // 83
          instance = $module.data(moduleNamespace) || module; // get vendor specific events                            // 84
                                                                                                                       //
          animationEnd = module.get.animationEndEvent();                                                               // 87
                                                                                                                       //
          if (methodInvoked) {                                                                                         // 89
            methodInvoked = module.invoke(query);                                                                      // 90
          } // method not invoked, lets run an animation                                                               // 91
                                                                                                                       //
                                                                                                                       //
          if (methodInvoked === false) {                                                                               // 94
            module.verbose('Converted arguments into settings object', settings);                                      // 95
                                                                                                                       //
            if (settings.interval) {                                                                                   // 96
              module.delay(settings.animate);                                                                          // 97
            } else {                                                                                                   // 98
              module.animate();                                                                                        // 100
            }                                                                                                          // 101
                                                                                                                       //
            module.instantiate();                                                                                      // 102
          }                                                                                                            // 103
        },                                                                                                             // 104
        instantiate: function () {                                                                                     // 106
          module.verbose('Storing instance of module', module);                                                        // 107
          instance = module;                                                                                           // 108
          $module.data(moduleNamespace, instance);                                                                     // 109
        },                                                                                                             // 112
        destroy: function () {                                                                                         // 114
          module.verbose('Destroying previous module for', element);                                                   // 115
          $module.removeData(moduleNamespace);                                                                         // 116
        },                                                                                                             // 119
        refresh: function () {                                                                                         // 121
          module.verbose('Refreshing display type on next animation');                                                 // 122
          delete module.displayType;                                                                                   // 123
        },                                                                                                             // 124
        forceRepaint: function () {                                                                                    // 126
          module.verbose('Forcing element repaint');                                                                   // 127
          var $parentElement = $module.parent(),                                                                       // 128
              $nextElement = $module.next();                                                                           // 128
                                                                                                                       //
          if ($nextElement.length === 0) {                                                                             // 132
            $module.detach().appendTo($parentElement);                                                                 // 133
          } else {                                                                                                     // 134
            $module.detach().insertBefore($nextElement);                                                               // 136
          }                                                                                                            // 137
        },                                                                                                             // 138
        repaint: function () {                                                                                         // 140
          module.verbose('Repainting element');                                                                        // 141
          var fakeAssignment = element.offsetWidth;                                                                    // 142
        },                                                                                                             // 145
        delay: function (interval) {                                                                                   // 147
          var direction = module.get.animationDirection(),                                                             // 148
              shouldReverse,                                                                                           // 148
              delay;                                                                                                   // 148
                                                                                                                       //
          if (!direction) {                                                                                            // 153
            direction = module.can.transition() ? module.get.direction() : 'static';                                   // 154
          }                                                                                                            // 158
                                                                                                                       //
          interval = interval !== undefined ? interval : settings.interval;                                            // 159
          shouldReverse = settings.reverse == 'auto' && direction == className.outward;                                // 163
          delay = shouldReverse || settings.reverse == true ? ($allModules.length - index) * settings.interval : index * settings.interval;
          module.debug('Delaying animation by', delay);                                                                // 168
          setTimeout(module.animate, delay);                                                                           // 169
        },                                                                                                             // 170
        animate: function (overrideSettings) {                                                                         // 172
          settings = overrideSettings || settings;                                                                     // 173
                                                                                                                       //
          if (!module.is.supported()) {                                                                                // 174
            module.error(error.support);                                                                               // 175
            return false;                                                                                              // 176
          }                                                                                                            // 177
                                                                                                                       //
          module.debug('Preparing animation', settings.animation);                                                     // 178
                                                                                                                       //
          if (module.is.animating()) {                                                                                 // 179
            if (settings.queue) {                                                                                      // 180
              if (!settings.allowRepeats && module.has.direction() && module.is.occurring() && module.queuing !== true) {
                module.debug('Animation is currently occurring, preventing queueing same animation', settings.animation);
              } else {                                                                                                 // 183
                module.queue(settings.animation);                                                                      // 185
              }                                                                                                        // 186
                                                                                                                       //
              return false;                                                                                            // 187
            } else if (!settings.allowRepeats && module.is.occurring()) {                                              // 188
              module.debug('Animation is already occurring, will not execute repeated animation', settings.animation);
              return false;                                                                                            // 191
            } else {                                                                                                   // 192
              module.debug('New animation started, completing previous early', settings.animation);                    // 194
              instance.complete();                                                                                     // 195
            }                                                                                                          // 196
          }                                                                                                            // 197
                                                                                                                       //
          if (module.can.animate()) {                                                                                  // 198
            module.set.animating(settings.animation);                                                                  // 199
          } else {                                                                                                     // 200
            module.error(error.noAnimation, settings.animation, element);                                              // 202
          }                                                                                                            // 203
        },                                                                                                             // 204
        reset: function () {                                                                                           // 206
          module.debug('Resetting animation to beginning conditions');                                                 // 207
          module.remove.animationCallbacks();                                                                          // 208
          module.restore.conditions();                                                                                 // 209
          module.remove.animating();                                                                                   // 210
        },                                                                                                             // 211
        queue: function (animation) {                                                                                  // 213
          module.debug('Queueing animation of', animation);                                                            // 214
          module.queuing = true;                                                                                       // 215
          $module.one(animationEnd + '.queue' + eventNamespace, function () {                                          // 216
            module.queuing = false;                                                                                    // 218
            module.repaint();                                                                                          // 219
            module.animate.apply(this, settings);                                                                      // 220
          });                                                                                                          // 221
        },                                                                                                             // 223
        complete: function (event) {                                                                                   // 225
          module.debug('Animation complete', settings.animation);                                                      // 226
          module.remove.completeCallback();                                                                            // 227
          module.remove.failSafe();                                                                                    // 228
                                                                                                                       //
          if (!module.is.looping()) {                                                                                  // 229
            if (module.is.outward()) {                                                                                 // 230
              module.verbose('Animation is outward, hiding element');                                                  // 231
              module.restore.conditions();                                                                             // 232
              module.hide();                                                                                           // 233
            } else if (module.is.inward()) {                                                                           // 234
              module.verbose('Animation is outward, showing element');                                                 // 236
              module.restore.conditions();                                                                             // 237
              module.show();                                                                                           // 238
            } else {                                                                                                   // 239
              module.verbose('Static animation completed');                                                            // 241
              module.restore.conditions();                                                                             // 242
              settings.onComplete.call(element);                                                                       // 243
            }                                                                                                          // 244
          }                                                                                                            // 245
        },                                                                                                             // 246
        force: {                                                                                                       // 248
          visible: function () {                                                                                       // 249
            var style = $module.attr('style'),                                                                         // 250
                userStyle = module.get.userStyle(),                                                                    // 250
                displayType = module.get.displayType(),                                                                // 250
                overrideStyle = userStyle + 'display: ' + displayType + ' !important;',                                // 250
                currentDisplay = $module.css('display'),                                                               // 250
                emptyStyle = style === undefined || style === '';                                                      // 250
                                                                                                                       //
            if (currentDisplay !== displayType) {                                                                      // 258
              module.verbose('Overriding default display to show element', displayType);                               // 259
              $module.attr('style', overrideStyle);                                                                    // 260
            } else if (emptyStyle) {                                                                                   // 263
              $module.removeAttr('style');                                                                             // 265
            }                                                                                                          // 266
          },                                                                                                           // 267
          hidden: function () {                                                                                        // 268
            var style = $module.attr('style'),                                                                         // 269
                currentDisplay = $module.css('display'),                                                               // 269
                emptyStyle = style === undefined || style === '';                                                      // 269
                                                                                                                       //
            if (currentDisplay !== 'none' && !module.is.hidden()) {                                                    // 274
              module.verbose('Overriding default display to hide element');                                            // 275
              $module.css('display', 'none');                                                                          // 276
            } else if (emptyStyle) {                                                                                   // 279
              $module.removeAttr('style');                                                                             // 281
            }                                                                                                          // 284
          }                                                                                                            // 285
        },                                                                                                             // 248
        has: {                                                                                                         // 288
          direction: function (animation) {                                                                            // 289
            var hasDirection = false;                                                                                  // 290
            animation = animation || settings.animation;                                                               // 293
                                                                                                                       //
            if (typeof animation === 'string') {                                                                       // 294
              animation = animation.split(' ');                                                                        // 295
              $.each(animation, function (index, word) {                                                               // 296
                if (word === className.inward || word === className.outward) {                                         // 297
                  hasDirection = true;                                                                                 // 298
                }                                                                                                      // 299
              });                                                                                                      // 300
            }                                                                                                          // 301
                                                                                                                       //
            return hasDirection;                                                                                       // 302
          },                                                                                                           // 303
          inlineDisplay: function () {                                                                                 // 304
            var style = $module.attr('style') || '';                                                                   // 305
            return $.isArray(style.match(/display.*?;/, ''));                                                          // 308
          }                                                                                                            // 309
        },                                                                                                             // 288
        set: {                                                                                                         // 312
          animating: function (animation) {                                                                            // 313
            var animationClass, direction; // remove previous callbacks                                                // 314
                                                                                                                       //
            module.remove.completeCallback(); // determine exact animation                                             // 319
                                                                                                                       //
            animation = animation || settings.animation;                                                               // 322
            animationClass = module.get.animationClass(animation); // save animation class in cache to restore class names
                                                                                                                       //
            module.save.animation(animationClass); // override display if necessary so animation appears visibly       // 326
                                                                                                                       //
            module.force.visible();                                                                                    // 329
            module.remove.hidden();                                                                                    // 331
            module.remove.direction();                                                                                 // 332
            module.start.animation(animationClass);                                                                    // 334
          },                                                                                                           // 336
          duration: function (animationName, duration) {                                                               // 337
            duration = duration || settings.duration;                                                                  // 338
            duration = typeof duration == 'number' ? duration + 'ms' : duration;                                       // 339
                                                                                                                       //
            if (duration || duration === 0) {                                                                          // 343
              module.verbose('Setting animation duration', duration);                                                  // 344
              $module.css({                                                                                            // 345
                'animation-duration': duration                                                                         // 347
              });                                                                                                      // 346
            }                                                                                                          // 350
          },                                                                                                           // 351
          direction: function (direction) {                                                                            // 352
            direction = direction || module.get.direction();                                                           // 353
                                                                                                                       //
            if (direction == className.inward) {                                                                       // 354
              module.set.inward();                                                                                     // 355
            } else {                                                                                                   // 356
              module.set.outward();                                                                                    // 358
            }                                                                                                          // 359
          },                                                                                                           // 360
          looping: function () {                                                                                       // 361
            module.debug('Transition set to loop');                                                                    // 362
            $module.addClass(className.looping);                                                                       // 363
          },                                                                                                           // 366
          hidden: function () {                                                                                        // 367
            $module.addClass(className.transition).addClass(className.hidden);                                         // 368
          },                                                                                                           // 372
          inward: function () {                                                                                        // 373
            module.debug('Setting direction to inward');                                                               // 374
            $module.removeClass(className.outward).addClass(className.inward);                                         // 375
          },                                                                                                           // 379
          outward: function () {                                                                                       // 380
            module.debug('Setting direction to outward');                                                              // 381
            $module.removeClass(className.inward).addClass(className.outward);                                         // 382
          },                                                                                                           // 386
          visible: function () {                                                                                       // 387
            $module.addClass(className.transition).addClass(className.visible);                                        // 388
          }                                                                                                            // 392
        },                                                                                                             // 312
        start: {                                                                                                       // 395
          animation: function (animationClass) {                                                                       // 396
            animationClass = animationClass || module.get.animationClass();                                            // 397
            module.debug('Starting tween', animationClass);                                                            // 398
            $module.addClass(animationClass).one(animationEnd + '.complete' + eventNamespace, module.complete);        // 399
                                                                                                                       //
            if (settings.useFailSafe) {                                                                                // 403
              module.add.failSafe();                                                                                   // 404
            }                                                                                                          // 405
                                                                                                                       //
            module.set.duration(settings.duration);                                                                    // 406
            settings.onStart.call(element);                                                                            // 407
          }                                                                                                            // 408
        },                                                                                                             // 395
        save: {                                                                                                        // 411
          animation: function (animation) {                                                                            // 412
            if (!module.cache) {                                                                                       // 413
              module.cache = {};                                                                                       // 414
            }                                                                                                          // 415
                                                                                                                       //
            module.cache.animation = animation;                                                                        // 416
          },                                                                                                           // 417
          displayType: function (displayType) {                                                                        // 418
            if (displayType !== 'none') {                                                                              // 419
              $module.data(metadata.displayType, displayType);                                                         // 420
            }                                                                                                          // 421
          },                                                                                                           // 422
          transitionExists: function (animation, exists) {                                                             // 423
            $.fn.transition.exists[animation] = exists;                                                                // 424
            module.verbose('Saving existence of transition', animation, exists);                                       // 425
          }                                                                                                            // 426
        },                                                                                                             // 411
        restore: {                                                                                                     // 429
          conditions: function () {                                                                                    // 430
            var animation = module.get.currentAnimation();                                                             // 431
                                                                                                                       //
            if (animation) {                                                                                           // 434
              $module.removeClass(animation);                                                                          // 435
              module.verbose('Removing animation class', module.cache);                                                // 438
            }                                                                                                          // 439
                                                                                                                       //
            module.remove.duration();                                                                                  // 440
          }                                                                                                            // 441
        },                                                                                                             // 429
        add: {                                                                                                         // 444
          failSafe: function () {                                                                                      // 445
            var duration = module.get.duration();                                                                      // 446
            module.timer = setTimeout(function () {                                                                    // 449
              $module.triggerHandler(animationEnd);                                                                    // 450
            }, duration + settings.failSafeDelay);                                                                     // 451
            module.verbose('Adding fail safe timer', module.timer);                                                    // 452
          }                                                                                                            // 453
        },                                                                                                             // 444
        remove: {                                                                                                      // 456
          animating: function () {                                                                                     // 457
            $module.removeClass(className.animating);                                                                  // 458
          },                                                                                                           // 459
          animationCallbacks: function () {                                                                            // 460
            module.remove.queueCallback();                                                                             // 461
            module.remove.completeCallback();                                                                          // 462
          },                                                                                                           // 463
          queueCallback: function () {                                                                                 // 464
            $module.off('.queue' + eventNamespace);                                                                    // 465
          },                                                                                                           // 466
          completeCallback: function () {                                                                              // 467
            $module.off('.complete' + eventNamespace);                                                                 // 468
          },                                                                                                           // 469
          display: function () {                                                                                       // 470
            $module.css('display', '');                                                                                // 471
          },                                                                                                           // 472
          direction: function () {                                                                                     // 473
            $module.removeClass(className.inward).removeClass(className.outward);                                      // 474
          },                                                                                                           // 478
          duration: function () {                                                                                      // 479
            $module.css('animation-duration', '');                                                                     // 480
          },                                                                                                           // 483
          failSafe: function () {                                                                                      // 484
            module.verbose('Removing fail safe timer', module.timer);                                                  // 485
                                                                                                                       //
            if (module.timer) {                                                                                        // 486
              clearTimeout(module.timer);                                                                              // 487
            }                                                                                                          // 488
          },                                                                                                           // 489
          hidden: function () {                                                                                        // 490
            $module.removeClass(className.hidden);                                                                     // 491
          },                                                                                                           // 492
          visible: function () {                                                                                       // 493
            $module.removeClass(className.visible);                                                                    // 494
          },                                                                                                           // 495
          looping: function () {                                                                                       // 496
            module.debug('Transitions are no longer looping');                                                         // 497
                                                                                                                       //
            if (module.is.looping()) {                                                                                 // 498
              module.reset();                                                                                          // 499
              $module.removeClass(className.looping);                                                                  // 500
            }                                                                                                          // 503
          },                                                                                                           // 504
          transition: function () {                                                                                    // 505
            $module.removeClass(className.visible).removeClass(className.hidden);                                      // 506
          }                                                                                                            // 510
        },                                                                                                             // 456
        get: {                                                                                                         // 512
          settings: function (animation, duration, onComplete) {                                                       // 513
            // single settings object                                                                                  // 514
            if ((typeof animation === "undefined" ? "undefined" : (0, _typeof3.default)(animation)) == 'object') {     // 515
              return $.extend(true, {}, $.fn.transition.settings, animation);                                          // 516
            } // all arguments provided                                                                                // 517
            else if (typeof onComplete == 'function') {                                                                // 515
                return $.extend({}, $.fn.transition.settings, {                                                        // 520
                  animation: animation,                                                                                // 521
                  onComplete: onComplete,                                                                              // 522
                  duration: duration                                                                                   // 523
                });                                                                                                    // 520
              } // only duration provided                                                                              // 525
              else if (typeof duration == 'string' || typeof duration == 'number') {                                   // 519
                  return $.extend({}, $.fn.transition.settings, {                                                      // 528
                    animation: animation,                                                                              // 529
                    duration: duration                                                                                 // 530
                  });                                                                                                  // 528
                } // duration is actually settings object                                                              // 532
                else if ((typeof duration === "undefined" ? "undefined" : (0, _typeof3.default)(duration)) == 'object') {
                    return $.extend({}, $.fn.transition.settings, duration, {                                          // 535
                      animation: animation                                                                             // 536
                    });                                                                                                // 535
                  } // duration is actually callback                                                                   // 538
                  else if (typeof duration == 'function') {                                                            // 534
                      return $.extend({}, $.fn.transition.settings, {                                                  // 541
                        animation: animation,                                                                          // 542
                        onComplete: duration                                                                           // 543
                      });                                                                                              // 541
                    } // only animation provided                                                                       // 545
                    else {                                                                                             // 540
                        return $.extend({}, $.fn.transition.settings, {                                                // 548
                          animation: animation                                                                         // 549
                        });                                                                                            // 548
                      }                                                                                                // 551
                                                                                                                       //
            return $.fn.transition.settings;                                                                           // 552
          },                                                                                                           // 553
          animationClass: function (animation) {                                                                       // 554
            var animationClass = animation || settings.animation,                                                      // 555
                directionClass = module.can.transition() && !module.has.direction() ? module.get.direction() + ' ' : '';
            return className.animating + ' ' + className.transition + ' ' + directionClass + animationClass;           // 561
          },                                                                                                           // 566
          currentAnimation: function () {                                                                              // 567
            return module.cache && module.cache.animation !== undefined ? module.cache.animation : false;              // 568
          },                                                                                                           // 572
          currentDirection: function () {                                                                              // 573
            return module.is.inward() ? className.inward : className.outward;                                          // 574
          },                                                                                                           // 578
          direction: function () {                                                                                     // 579
            return module.is.hidden() || !module.is.visible() ? className.inward : className.outward;                  // 580
          },                                                                                                           // 584
          animationDirection: function (animation) {                                                                   // 585
            var direction;                                                                                             // 586
            animation = animation || settings.animation;                                                               // 589
                                                                                                                       //
            if (typeof animation === 'string') {                                                                       // 590
              animation = animation.split(' '); // search animation name for out/in class                              // 591
                                                                                                                       //
              $.each(animation, function (index, word) {                                                               // 593
                if (word === className.inward) {                                                                       // 594
                  direction = className.inward;                                                                        // 595
                } else if (word === className.outward) {                                                               // 596
                  direction = className.outward;                                                                       // 598
                }                                                                                                      // 599
              });                                                                                                      // 600
            } // return found direction                                                                                // 601
                                                                                                                       //
                                                                                                                       //
            if (direction) {                                                                                           // 603
              return direction;                                                                                        // 604
            }                                                                                                          // 605
                                                                                                                       //
            return false;                                                                                              // 606
          },                                                                                                           // 607
          duration: function (duration) {                                                                              // 608
            duration = duration || settings.duration;                                                                  // 609
                                                                                                                       //
            if (duration === false) {                                                                                  // 610
              duration = $module.css('animation-duration') || 0;                                                       // 611
            }                                                                                                          // 612
                                                                                                                       //
            return typeof duration === 'string' ? duration.indexOf('ms') > -1 ? parseFloat(duration) : parseFloat(duration) * 1000 : duration;
          },                                                                                                           // 619
          displayType: function () {                                                                                   // 620
            if (settings.displayType) {                                                                                // 621
              return settings.displayType;                                                                             // 622
            }                                                                                                          // 623
                                                                                                                       //
            if ($module.data(metadata.displayType) === undefined) {                                                    // 624
              // create fake element to determine display state                                                        // 625
              module.can.transition(true);                                                                             // 626
            }                                                                                                          // 627
                                                                                                                       //
            return $module.data(metadata.displayType);                                                                 // 628
          },                                                                                                           // 629
          userStyle: function (style) {                                                                                // 630
            style = style || $module.attr('style') || '';                                                              // 631
            return style.replace(/display.*?;/, '');                                                                   // 632
          },                                                                                                           // 633
          transitionExists: function (animation) {                                                                     // 634
            return $.fn.transition.exists[animation];                                                                  // 635
          },                                                                                                           // 636
          animationStartEvent: function () {                                                                           // 637
            var element = document.createElement('div'),                                                               // 638
                animations = {                                                                                         // 638
              'animation': 'animationstart',                                                                           // 641
              'OAnimation': 'oAnimationStart',                                                                         // 642
              'MozAnimation': 'mozAnimationStart',                                                                     // 643
              'WebkitAnimation': 'webkitAnimationStart'                                                                // 644
            },                                                                                                         // 640
                animation;                                                                                             // 638
                                                                                                                       //
            for (animation in meteorBabelHelpers.sanitizeForInObject(animations)) {                                    // 648
              if (element.style[animation] !== undefined) {                                                            // 649
                return animations[animation];                                                                          // 650
              }                                                                                                        // 651
            }                                                                                                          // 652
                                                                                                                       //
            return false;                                                                                              // 653
          },                                                                                                           // 654
          animationEndEvent: function () {                                                                             // 655
            var element = document.createElement('div'),                                                               // 656
                animations = {                                                                                         // 656
              'animation': 'animationend',                                                                             // 659
              'OAnimation': 'oAnimationEnd',                                                                           // 660
              'MozAnimation': 'mozAnimationEnd',                                                                       // 661
              'WebkitAnimation': 'webkitAnimationEnd'                                                                  // 662
            },                                                                                                         // 658
                animation;                                                                                             // 656
                                                                                                                       //
            for (animation in meteorBabelHelpers.sanitizeForInObject(animations)) {                                    // 666
              if (element.style[animation] !== undefined) {                                                            // 667
                return animations[animation];                                                                          // 668
              }                                                                                                        // 669
            }                                                                                                          // 670
                                                                                                                       //
            return false;                                                                                              // 671
          }                                                                                                            // 672
        },                                                                                                             // 512
        can: {                                                                                                         // 676
          transition: function (forced) {                                                                              // 677
            var animation = settings.animation,                                                                        // 678
                transitionExists = module.get.transitionExists(animation),                                             // 678
                elementClass,                                                                                          // 678
                tagName,                                                                                               // 678
                $clone,                                                                                                // 678
                currentAnimation,                                                                                      // 678
                inAnimation,                                                                                           // 678
                directionExists,                                                                                       // 678
                displayType;                                                                                           // 678
                                                                                                                       //
            if (transitionExists === undefined || forced) {                                                            // 689
              module.verbose('Determining whether animation exists');                                                  // 690
              elementClass = $module.attr('class');                                                                    // 691
              tagName = $module.prop('tagName');                                                                       // 692
              $clone = $('<' + tagName + ' />').addClass(elementClass).insertAfter($module);                           // 694
              currentAnimation = $clone.addClass(animation).removeClass(className.inward).removeClass(className.outward).addClass(className.animating).addClass(className.transition).css('animationName');
              inAnimation = $clone.addClass(className.inward).css('animationName');                                    // 703
              displayType = $clone.attr('class', elementClass).removeAttr('style').removeClass(className.hidden).removeClass(className.visible).show().css('display');
              module.verbose('Determining final display state', displayType);                                          // 715
              module.save.displayType(displayType);                                                                    // 716
              $clone.remove();                                                                                         // 718
                                                                                                                       //
              if (currentAnimation != inAnimation) {                                                                   // 719
                module.debug('Direction exists for animation', animation);                                             // 720
                directionExists = true;                                                                                // 721
              } else if (currentAnimation == 'none' || !currentAnimation) {                                            // 722
                module.debug('No animation defined in css', animation);                                                // 724
                return;                                                                                                // 725
              } else {                                                                                                 // 726
                module.debug('Static animation found', animation, displayType);                                        // 728
                directionExists = false;                                                                               // 729
              }                                                                                                        // 730
                                                                                                                       //
              module.save.transitionExists(animation, directionExists);                                                // 731
            }                                                                                                          // 732
                                                                                                                       //
            return transitionExists !== undefined ? transitionExists : directionExists;                                // 733
          },                                                                                                           // 737
          animate: function () {                                                                                       // 738
            // can transition does not return a value if animation does not exist                                      // 739
            return module.can.transition() !== undefined;                                                              // 740
          }                                                                                                            // 741
        },                                                                                                             // 676
        is: {                                                                                                          // 744
          animating: function () {                                                                                     // 745
            return $module.hasClass(className.animating);                                                              // 746
          },                                                                                                           // 747
          inward: function () {                                                                                        // 748
            return $module.hasClass(className.inward);                                                                 // 749
          },                                                                                                           // 750
          outward: function () {                                                                                       // 751
            return $module.hasClass(className.outward);                                                                // 752
          },                                                                                                           // 753
          looping: function () {                                                                                       // 754
            return $module.hasClass(className.looping);                                                                // 755
          },                                                                                                           // 756
          occurring: function (animation) {                                                                            // 757
            animation = animation || settings.animation;                                                               // 758
            animation = '.' + animation.replace(' ', '.');                                                             // 759
            return $module.filter(animation).length > 0;                                                               // 760
          },                                                                                                           // 761
          visible: function () {                                                                                       // 762
            return $module.is(':visible');                                                                             // 763
          },                                                                                                           // 764
          hidden: function () {                                                                                        // 765
            return $module.css('visibility') === 'hidden';                                                             // 766
          },                                                                                                           // 767
          supported: function () {                                                                                     // 768
            return animationEnd !== false;                                                                             // 769
          }                                                                                                            // 770
        },                                                                                                             // 744
        hide: function () {                                                                                            // 773
          module.verbose('Hiding element');                                                                            // 774
                                                                                                                       //
          if (module.is.animating()) {                                                                                 // 775
            module.reset();                                                                                            // 776
          }                                                                                                            // 777
                                                                                                                       //
          element.blur(); // IE will trigger focus change if element is not blurred before hiding                      // 778
                                                                                                                       //
          module.remove.display();                                                                                     // 779
          module.remove.visible();                                                                                     // 780
          module.set.hidden();                                                                                         // 781
          module.force.hidden();                                                                                       // 782
          settings.onHide.call(element);                                                                               // 783
          settings.onComplete.call(element); // module.repaint();                                                      // 784
        },                                                                                                             // 786
        show: function (display) {                                                                                     // 788
          module.verbose('Showing element', display);                                                                  // 789
          module.remove.hidden();                                                                                      // 790
          module.set.visible();                                                                                        // 791
          module.force.visible();                                                                                      // 792
          settings.onShow.call(element);                                                                               // 793
          settings.onComplete.call(element); // module.repaint();                                                      // 794
        },                                                                                                             // 796
        toggle: function () {                                                                                          // 798
          if (module.is.visible()) {                                                                                   // 799
            module.hide();                                                                                             // 800
          } else {                                                                                                     // 801
            module.show();                                                                                             // 803
          }                                                                                                            // 804
        },                                                                                                             // 805
        stop: function () {                                                                                            // 807
          module.debug('Stopping current animation');                                                                  // 808
          $module.triggerHandler(animationEnd);                                                                        // 809
        },                                                                                                             // 810
        stopAll: function () {                                                                                         // 812
          module.debug('Stopping all animation');                                                                      // 813
          module.remove.queueCallback();                                                                               // 814
          $module.triggerHandler(animationEnd);                                                                        // 815
        },                                                                                                             // 816
        clear: {                                                                                                       // 818
          queue: function () {                                                                                         // 819
            module.debug('Clearing animation queue');                                                                  // 820
            module.remove.queueCallback();                                                                             // 821
          }                                                                                                            // 822
        },                                                                                                             // 818
        enable: function () {                                                                                          // 825
          module.verbose('Starting animation');                                                                        // 826
          $module.removeClass(className.disabled);                                                                     // 827
        },                                                                                                             // 828
        disable: function () {                                                                                         // 830
          module.debug('Stopping animation');                                                                          // 831
          $module.addClass(className.disabled);                                                                        // 832
        },                                                                                                             // 833
        setting: function (name, value) {                                                                              // 835
          module.debug('Changing setting', name, value);                                                               // 836
                                                                                                                       //
          if ($.isPlainObject(name)) {                                                                                 // 837
            $.extend(true, settings, name);                                                                            // 838
          } else if (value !== undefined) {                                                                            // 839
            if ($.isPlainObject(settings[name])) {                                                                     // 841
              $.extend(true, settings[name], value);                                                                   // 842
            } else {                                                                                                   // 843
              settings[name] = value;                                                                                  // 845
            }                                                                                                          // 846
          } else {                                                                                                     // 847
            return settings[name];                                                                                     // 849
          }                                                                                                            // 850
        },                                                                                                             // 851
        internal: function (name, value) {                                                                             // 852
          if ($.isPlainObject(name)) {                                                                                 // 853
            $.extend(true, module, name);                                                                              // 854
          } else if (value !== undefined) {                                                                            // 855
            module[name] = value;                                                                                      // 857
          } else {                                                                                                     // 858
            return module[name];                                                                                       // 860
          }                                                                                                            // 861
        },                                                                                                             // 862
        debug: function () {                                                                                           // 863
          if (!settings.silent && settings.debug) {                                                                    // 864
            if (settings.performance) {                                                                                // 865
              module.performance.log(arguments);                                                                       // 866
            } else {                                                                                                   // 867
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');                 // 869
              module.debug.apply(console, arguments);                                                                  // 870
            }                                                                                                          // 871
          }                                                                                                            // 872
        },                                                                                                             // 873
        verbose: function () {                                                                                         // 874
          if (!settings.silent && settings.verbose && settings.debug) {                                                // 875
            if (settings.performance) {                                                                                // 876
              module.performance.log(arguments);                                                                       // 877
            } else {                                                                                                   // 878
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');               // 880
              module.verbose.apply(console, arguments);                                                                // 881
            }                                                                                                          // 882
          }                                                                                                            // 883
        },                                                                                                             // 884
        error: function () {                                                                                           // 885
          if (!settings.silent) {                                                                                      // 886
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');                  // 887
            module.error.apply(console, arguments);                                                                    // 888
          }                                                                                                            // 889
        },                                                                                                             // 890
        performance: {                                                                                                 // 891
          log: function (message) {                                                                                    // 892
            var currentTime, executionTime, previousTime;                                                              // 893
                                                                                                                       //
            if (settings.performance) {                                                                                // 898
              currentTime = new Date().getTime();                                                                      // 899
              previousTime = time || currentTime;                                                                      // 900
              executionTime = currentTime - previousTime;                                                              // 901
              time = currentTime;                                                                                      // 902
              performance.push({                                                                                       // 903
                'Name': message[0],                                                                                    // 904
                'Arguments': [].slice.call(message, 1) || '',                                                          // 905
                'Element': element,                                                                                    // 906
                'Execution Time': executionTime                                                                        // 907
              });                                                                                                      // 903
            }                                                                                                          // 909
                                                                                                                       //
            clearTimeout(module.performance.timer);                                                                    // 910
            module.performance.timer = setTimeout(module.performance.display, 500);                                    // 911
          },                                                                                                           // 912
          display: function () {                                                                                       // 913
            var title = settings.name + ':',                                                                           // 914
                totalTime = 0;                                                                                         // 914
            time = false;                                                                                              // 918
            clearTimeout(module.performance.timer);                                                                    // 919
            $.each(performance, function (index, data) {                                                               // 920
              totalTime += data['Execution Time'];                                                                     // 921
            });                                                                                                        // 922
            title += ' ' + totalTime + 'ms';                                                                           // 923
                                                                                                                       //
            if (moduleSelector) {                                                                                      // 924
              title += ' \'' + moduleSelector + '\'';                                                                  // 925
            }                                                                                                          // 926
                                                                                                                       //
            if ($allModules.length > 1) {                                                                              // 927
              title += ' ' + '(' + $allModules.length + ')';                                                           // 928
            }                                                                                                          // 929
                                                                                                                       //
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {              // 930
              console.groupCollapsed(title);                                                                           // 931
                                                                                                                       //
              if (console.table) {                                                                                     // 932
                console.table(performance);                                                                            // 933
              } else {                                                                                                 // 934
                $.each(performance, function (index, data) {                                                           // 936
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');                                    // 937
                });                                                                                                    // 938
              }                                                                                                        // 939
                                                                                                                       //
              console.groupEnd();                                                                                      // 940
            }                                                                                                          // 941
                                                                                                                       //
            performance = [];                                                                                          // 942
          }                                                                                                            // 943
        },                                                                                                             // 891
        // modified for transition to return invoke success                                                            // 945
        invoke: function (query, passedArguments, context) {                                                           // 946
          var object = instance,                                                                                       // 947
              maxDepth,                                                                                                // 947
              found,                                                                                                   // 947
              response;                                                                                                // 947
          passedArguments = passedArguments || queryArguments;                                                         // 953
          context = element || context;                                                                                // 954
                                                                                                                       //
          if (typeof query == 'string' && object !== undefined) {                                                      // 955
            query = query.split(/[\. ]/);                                                                              // 956
            maxDepth = query.length - 1;                                                                               // 957
            $.each(query, function (depth, value) {                                                                    // 958
              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;
                                                                                                                       //
              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {                                      // 963
                object = object[camelCaseValue];                                                                       // 964
              } else if (object[camelCaseValue] !== undefined) {                                                       // 965
                found = object[camelCaseValue];                                                                        // 967
                return false;                                                                                          // 968
              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {                                        // 969
                object = object[value];                                                                                // 971
              } else if (object[value] !== undefined) {                                                                // 972
                found = object[value];                                                                                 // 974
                return false;                                                                                          // 975
              } else {                                                                                                 // 976
                return false;                                                                                          // 978
              }                                                                                                        // 979
            });                                                                                                        // 980
          }                                                                                                            // 981
                                                                                                                       //
          if ($.isFunction(found)) {                                                                                   // 982
            response = found.apply(context, passedArguments);                                                          // 983
          } else if (found !== undefined) {                                                                            // 984
            response = found;                                                                                          // 986
          }                                                                                                            // 987
                                                                                                                       //
          if ($.isArray(returnedValue)) {                                                                              // 989
            returnedValue.push(response);                                                                              // 990
          } else if (returnedValue !== undefined) {                                                                    // 991
            returnedValue = [returnedValue, response];                                                                 // 993
          } else if (response !== undefined) {                                                                         // 994
            returnedValue = response;                                                                                  // 996
          }                                                                                                            // 997
                                                                                                                       //
          return found !== undefined ? found : false;                                                                  // 998
        }                                                                                                              // 1002
      };                                                                                                               // 69
      module.initialize();                                                                                             // 1004
    });                                                                                                                // 1005
    return returnedValue !== undefined ? returnedValue : this;                                                         // 1007
  }; // Records if CSS transition is available                                                                         // 1011
                                                                                                                       //
                                                                                                                       //
  $.fn.transition.exists = {};                                                                                         // 1014
  $.fn.transition.settings = {                                                                                         // 1016
    // module info                                                                                                     // 1018
    name: 'Transition',                                                                                                // 1019
    // hide all output from this component regardless of other settings                                                // 1021
    silent: false,                                                                                                     // 1022
    // debug content outputted to console                                                                              // 1024
    debug: false,                                                                                                      // 1025
    // verbose debug output                                                                                            // 1027
    verbose: false,                                                                                                    // 1028
    // performance data output                                                                                         // 1030
    performance: true,                                                                                                 // 1031
    // event namespace                                                                                                 // 1033
    namespace: 'transition',                                                                                           // 1034
    // delay between animations in group                                                                               // 1036
    interval: 0,                                                                                                       // 1037
    // whether group animations should be reversed                                                                     // 1039
    reverse: 'auto',                                                                                                   // 1040
    // animation callback event                                                                                        // 1042
    onStart: function () {},                                                                                           // 1043
    onComplete: function () {},                                                                                        // 1044
    onShow: function () {},                                                                                            // 1045
    onHide: function () {},                                                                                            // 1046
    // whether timeout should be used to ensure callback fires in cases animationend does not                          // 1048
    useFailSafe: true,                                                                                                 // 1049
    // delay in ms for fail safe                                                                                       // 1051
    failSafeDelay: 100,                                                                                                // 1052
    // whether EXACT animation can occur twice in a row                                                                // 1054
    allowRepeats: false,                                                                                               // 1055
    // Override final display type on visible                                                                          // 1057
    displayType: false,                                                                                                // 1058
    // animation duration                                                                                              // 1060
    animation: 'fade',                                                                                                 // 1061
    duration: false,                                                                                                   // 1062
    // new animations will occur after previous ones                                                                   // 1064
    queue: true,                                                                                                       // 1065
    metadata: {                                                                                                        // 1067
      displayType: 'display'                                                                                           // 1068
    },                                                                                                                 // 1067
    className: {                                                                                                       // 1071
      animating: 'animating',                                                                                          // 1072
      disabled: 'disabled',                                                                                            // 1073
      hidden: 'hidden',                                                                                                // 1074
      inward: 'in',                                                                                                    // 1075
      loading: 'loading',                                                                                              // 1076
      looping: 'looping',                                                                                              // 1077
      outward: 'out',                                                                                                  // 1078
      transition: 'transition',                                                                                        // 1079
      visible: 'visible'                                                                                               // 1080
    },                                                                                                                 // 1071
    // possible errors                                                                                                 // 1083
    error: {                                                                                                           // 1084
      noAnimation: 'Element is no longer attached to DOM. Unable to animate.  Use silent setting to surpress this warning in production.',
      repeated: 'That animation is already occurring, cancelling repeated animation',                                  // 1086
      method: 'The method you called is not defined',                                                                  // 1087
      support: 'This browser does not support CSS animations'                                                          // 1088
    }                                                                                                                  // 1084
  };                                                                                                                   // 1016
})(jQuery, window, document);                                                                                          // 1094
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}},"main.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/main.js                                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.watch(require("/imports/startup/client"));                                                                      // 1
module.watch(require("/imports/ui/components/form-controls"));                                                         // 1
module.watch(require("/imports/ui/components/directory"));                                                             // 1
module.watch(require("/imports/ui/components/user"));                                                                  // 1
module.watch(require("/imports/ui/components/landing"));                                                               // 1
module.watch(require("/imports/ui/layouts/directory"));                                                                // 1
module.watch(require("/imports/ui/layouts/landing"));                                                                  // 1
module.watch(require("/imports/ui/layouts/shared"));                                                                   // 1
module.watch(require("/imports/ui/layouts/user"));                                                                     // 1
module.watch(require("/imports/ui/pages/directory"));                                                                  // 1
module.watch(require("/imports/ui/pages/filter"));                                                                     // 1
module.watch(require("/imports/ui/pages/landing"));                                                                    // 1
module.watch(require("/imports/ui/pages/user"));                                                                       // 1
module.watch(require("/imports/ui/stylesheets/style.css"));                                                            // 1
module.watch(require("/imports/api/base"));                                                                            // 1
module.watch(require("/imports/api/profile"));                                                                         // 1
module.watch(require("/imports/api/interest"));                                                                        // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},{
  "extensions": [
    ".js",
    ".json",
    ".html",
    ".less",
    ".semantic.json",
    ".css"
  ]
});
require("./client/lib/semantic-ui/definitions/behaviors/api.js");
require("./client/lib/semantic-ui/definitions/behaviors/colorize.js");
require("./client/lib/semantic-ui/definitions/behaviors/form.js");
require("./client/lib/semantic-ui/definitions/behaviors/state.js");
require("./client/lib/semantic-ui/definitions/behaviors/visibility.js");
require("./client/lib/semantic-ui/definitions/behaviors/visit.js");
require("./client/lib/semantic-ui/definitions/globals/site.js");
require("./client/lib/semantic-ui/definitions/modules/accordion.js");
require("./client/lib/semantic-ui/definitions/modules/checkbox.js");
require("./client/lib/semantic-ui/definitions/modules/dimmer.js");
require("./client/lib/semantic-ui/definitions/modules/dropdown.js");
require("./client/lib/semantic-ui/definitions/modules/embed.js");
require("./client/lib/semantic-ui/definitions/modules/modal.js");
require("./client/lib/semantic-ui/definitions/modules/nag.js");
require("./client/lib/semantic-ui/definitions/modules/popup.js");
require("./client/lib/semantic-ui/definitions/modules/progress.js");
require("./client/lib/semantic-ui/definitions/modules/rating.js");
require("./client/lib/semantic-ui/definitions/modules/search.js");
require("./client/lib/semantic-ui/definitions/modules/shape.js");
require("./client/lib/semantic-ui/definitions/modules/sidebar.js");
require("./client/lib/semantic-ui/definitions/modules/sticky.js");
require("./client/lib/semantic-ui/definitions/modules/tab.js");
require("./client/lib/semantic-ui/definitions/modules/transition.js");
require("./client/main.js");