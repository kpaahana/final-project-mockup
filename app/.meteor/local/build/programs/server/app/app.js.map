{"version":3,"sources":["meteor://ðŸ’»app/imports/api/base/BaseCollection.js","meteor://ðŸ’»app/imports/api/base/BaseUtilities.js","meteor://ðŸ’»app/imports/api/base/index.js","meteor://ðŸ’»app/imports/api/interest/InterestCollection.js","meteor://ðŸ’»app/imports/api/interest/index.js","meteor://ðŸ’»app/imports/api/profile/ProfileCollection.js","meteor://ðŸ’»app/imports/api/profile/index.js","meteor://ðŸ’»app/imports/startup/server/accounts.js","meteor://ðŸ’»app/imports/startup/server/index.js","meteor://ðŸ’»app/imports/startup/server/initialize-database.js","meteor://ðŸ’»app/imports/startup/server/publications.js","meteor://ðŸ’»app/server/main.js"],"names":["module1","module","Mongo","watch","require","v","Meteor","check","_","BaseCollection","type","schema","_type","_collectionName","_collection","Collection","_schema","attachSchema","count","find","getSchema","publish","isServer","subscribe","isClient","findDoc","name","doc","findOne","username","_id","Error","selector","options","theSelector","findAll","fetch","update","modifier","isDefined","removeIt","Object","remove","removeAll","getType","getPublicationName","toString","assertDefined","assertAllDefined","names","isArray","map","checkIntegrity","dumpAll","dumpObject","contents","dumpOne","docID","slug","sortBy","obj","restoreOne","define","restoreAll","dumpObjects","each","exportDefault","export","removeAllEntities","Profiles","Interests","SimpleSchema","Tracker","InterestCollection","String","description","optional","tracker","insert","findName","interestID","findNames","interestIDs","assertName","assertNames","findID","findIDs","instance","ProfileCollection","firstName","lastName","bio","interests","Array","title","location","picture","RegEx","Url","github","facebook","instagram","checkPattern","length","uniq","Accounts","validateNewUser","validate","user","services","cas","id","getDefinitions","restoreJSON","collection","collections","restoreCollection","definitions","console","log","definition","startup","collectionList","totalDocuments","reduce","reducer","memo","fileName","settings","public","initialDatabaseFileName","JSON","parse","Assets","getText"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { _ } from 'meteor/underscore';\n\n/** @module Base */\n\n/**\n * BaseCollection is an abstract superclass of all RadGrad data model entities.\n * It is the direct superclass for SlugCollection and SemesterCollection.\n * Other collection classes are derived from BaseInstanceCollection or BaseTypeCollection, which are abstract\n * classes that inherit from this one.\n */\nclass BaseCollection {\n\n  /**\n   * Superclass constructor for all RadGrad entities.\n   * Defines internal fields needed by all entities: _type, _collectionName, _collection, and _schema.\n   * @param {String} type The name of the entity defined by the subclass.\n   * @param {SimpleSchema} schema The schema for validating fields on insertion to the DB.\n   */\n  constructor(type, schema) {\n    this._type = type;\n    this._collectionName = `${type}Collection`;\n    this._collection = new Mongo.Collection(`${type}Collection`);\n    this._schema = schema;\n    this._collection.attachSchema(this._schema);\n  }\n\n  /**\n   * Returns the number of documents in this collection.\n   * @returns { Number } The number of elements in this collection.\n   */\n  count() {\n    return this._collection.find().count();\n  }\n\n  /**\n   * Returns the SimpleSchema instance associated with this collection.\n   * @returns {SimpleSchema} The schema.\n   */\n  getSchema() {\n    return this._schema;\n  }\n\n  /**\n   * Default publication method for entities.\n   * It publishes the entire collection.\n   */\n  publish() {\n    if (Meteor.isServer) {\n      Meteor.publish(this._collectionName, () => this._collection.find());\n    }\n  }\n\n  /**\n   * Default subscription method for entities.\n   * It subscribes to the entire collection.\n   */\n  subscribe() {\n    if (Meteor.isClient) {\n      Meteor.subscribe(this._collectionName);\n    }\n  }\n\n  /**\n   * A stricter form of findOne, in that it throws an exception if the entity isn't found in the collection.\n   * @param { String | Object } name Either the docID, or an object selector, or the 'name' field value, or the\n   * username field value.\n   * @returns { Object } The document associated with name.\n   * @throws { Meteor.Error } If the document cannot be found.\n   */\n  findDoc(name) {\n    const doc = (\n            this._collection.findOne(name) ||\n            this._collection.findOne({ name }) ||\n            this._collection.findOne({ username: name }) ||\n            this._collection.findOne({ _id: name }));\n    if (!doc) {\n      throw new Meteor.Error(`${name} is not a defined ${this._type}`);\n    }\n    return doc;\n  }\n\n  /**\n   * Runs find on this collection.\n   * @see {@link http://docs.meteor.com/#/full/find|Meteor Docs on Mongo Find}\n   * @param { Object } selector A MongoDB selector.\n   * @param { Object } options MongoDB options.\n   * @returns {Mongo.Cursor}\n   */\n  find(selector, options) {\n    const theSelector = (typeof selector === 'undefined') ? {} : selector;\n    return this._collection.find(theSelector, options);\n  }\n\n  /**\n   * Returns the entire collection via find().fetch().\n   * @returns [Array] A list of this collection as objects.\n   */\n  findAll() {\n    return this._collection.find().fetch();\n  }\n\n  /**\n   * Runs a simplified version of update on this collection.\n   * @see {@link http://docs.meteor.com/api/collections.html#Mongo-Collection-update}\n   * @param { Object } selector A MongoDB selector.\n   * @param { Object } modifier A MongoDB modifier\n   * @returns true\n   */\n  update(selector, modifier) {\n    const theSelector = (typeof selector === 'undefined') ? {} : selector;\n    this._collection.update(theSelector, modifier);\n    return true;\n  }\n\n  /**\n   * Returns true if the passed entity is in this collection.\n   * @param { String | Object } name The docID, or an object specifying a document, or the name, or the username.\n   * @returns {boolean} True if name exists in this collection.\n   */\n  isDefined(name) {\n    return (\n    !!this._collection.findOne(name) ||\n    !!this._collection.findOne({ name }) ||\n    !!this._collection.findOne({ username: name }) ||\n    !!this._collection.findOne({ _id: name }));\n  }\n\n  /**\n   * A stricter form of remove that throws an error if the document or docID could not be found in this collection.\n   * @param { String | Object } name A document or docID in this collection.\n   */\n  removeIt(name) {\n    const doc = this.findDoc(name);\n    check(doc, Object);\n    this._collection.remove(doc._id);\n  }\n\n  /**\n   * Removes all elements of this collection.\n   */\n  removeAll() {\n    this._collection.remove({});\n  }\n\n  /**\n   * Return the type of this collection.\n   * @returns { String } The type, as a string.\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * Return the publication name.\n   * @returns { String } The publication name, as a string.\n   */\n  getPublicationName() {\n    return this._collectionName;\n  }\n\n  /**\n   * Returns a string representing all of the documents in this collection.\n   * @returns {String}\n   */\n  toString() {\n    return this._collection.find().fetch();\n  }\n\n  /**\n   * Verifies that the passed object is one of this collection's instances.\n   * @param { String | List } name Should be a defined ID or doc in this collection.\n   * @throws { Meteor.Error } If not defined.\n   */\n  assertDefined(name) {\n    if (!this.isDefined(name)) {\n      throw new Meteor.Error(`${name} is not a valid instance of ${this._type}.`);\n    }\n  }\n\n  /**\n   * Verifies that the list of passed instances are all members of this collection.\n   * @param names Should be a list of docs and/or docIDs.\n   * @throws { Meteor.Error } If instances is not an array, or if any instance is not in this collection.\n   */\n  assertAllDefined(names) {\n    if (!_.isArray(names)) {\n      throw new Meteor.Error(`${names} is not an array.`);\n    }\n    names.map(name => this.assertDefined(name));\n  }\n\n  /**\n   * Define the default integrity checker for all applications.\n   * Returns an array with a string indicating that this method is not overridden.\n   * @returns { array } An array containing a string indicating the use of the default integrity checker.\n   */\n  checkIntegrity() {  // eslint-disable-line class-methods-use-this\n    return ['There is no integrity checker defined for this collection.'];\n  }\n\n  /**\n   * Returns an object with two fields: name and contents.\n   * Name is the name of this collection.\n   * Contents is an array of objects suitable for passing to the restore() method.\n   * @returns {Object} An object representing the contents of this collection.\n   */\n  dumpAll() {\n    const dumpObject = { name: this._collectionName, contents: this.find().map(docID => this.dumpOne(docID)) };\n    // sort the contents array by slug (if present)\n    if (dumpObject.contents[0] && dumpObject.contents[0].slug) {\n      dumpObject.contents = _.sortBy(dumpObject.contents, obj => obj.slug);\n    }\n    return dumpObject;\n  }\n\n  /**\n   * Returns an object representing the definition of docID in a format appropriate to the restoreOne function.\n   * Must be overridden by each collection.\n   * @param docID A docID from this collection.\n   * @returns { Object } An object representing this document.\n   */\n  dumpOne(docID) { // eslint-disable-line\n    throw new Meteor.Error(`Default dumpOne method invoked by collection ${this._collectionName}`);\n  }\n\n  /**\n   * Defines the entity represented by dumpObject.\n   * Defaults to calling the define() method if it exists.\n   * @param dumpObject An object representing one document in this collection.\n   * @returns { String } The docID of the newly created document.\n   */\n  restoreOne(dumpObject) {\n    if (typeof this.define === 'function') {\n      return this.define(dumpObject);\n    }\n    return null;\n  }\n\n  /**\n   * Defines all the entities in the passed array of objects.\n   * @param dumpObjects The array of objects representing the definition of a document in this collection.\n   */\n  restoreAll(dumpObjects) {\n    _.each(dumpObjects, dumpObject => this.restoreOne(dumpObject));\n  }\n}\n\n/**\n * The BaseCollection used by all RadGrad entities.\n */\nexport default BaseCollection;\n","import { Profiles } from '/imports/api/profile/ProfileCollection';\nimport { Interests } from '/imports/api/interest/InterestCollection';\n\nexport function removeAllEntities() {\n  Profiles.removeAll();\n  Interests.removeAll();\n}\n","import './BaseCollection';\nimport './BaseUtilities';\n","import SimpleSchema from 'simpl-schema';\nimport BaseCollection from '/imports/api/base/BaseCollection';\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport { _ } from 'meteor/underscore';\nimport { Tracker } from 'meteor/tracker';\n\n/** @module Interest */\n\n/**\n * Represents a specific interest, such as \"Software Engineering\".\n * @extends module:Base~BaseCollection\n */\nclass InterestCollection extends BaseCollection {\n\n  /**\n   * Creates the Interest collection.\n   */\n  constructor() {\n    super('Interest', new SimpleSchema({\n      name: { type: String },\n      description: { type: String, optional: true },\n    }, { tracker: Tracker }));\n  }\n\n  /**\n   * Defines a new Interest.\n   * @example\n   * Interests.define({ name: 'Software Engineering',\n   *                    description: 'Methods for group development of large, high quality software systems' });\n   * @param { Object } description Object with keys name and description.\n   * Name must be previously undefined. Description is optional.\n   * Creates a \"slug\" for this name and stores it in the slug field.\n   * @throws {Meteor.Error} If the interest definition includes a defined name.\n   * @returns The newly created docID.\n   */\n  define({ name, description }) {\n    check(name, String);\n    check(description, String);\n    if (this.find({ name }).count() > 0) {\n      throw new Meteor.Error(`${name} is previously defined in another Interest`);\n    }\n    return this._collection.insert({ name, description });\n  }\n\n  /**\n   * Returns the Interest name corresponding to the passed interest docID.\n   * @param interestID An interest docID.\n   * @returns { String } An interest name.\n   * @throws { Meteor.Error} If the interest docID cannot be found.\n   */\n  findName(interestID) {\n    this.assertDefined(interestID);\n    return this.findDoc(interestID).name;\n  }\n\n  /**\n   * Returns a list of Interest names corresponding to the passed list of Interest docIDs.\n   * @param interestIDs A list of Interest docIDs.\n   * @returns { Array }\n   * @throws { Meteor.Error} If any of the instanceIDs cannot be found.\n   */\n  findNames(interestIDs) {\n    return interestIDs.map(interestID => this.findName(interestID));\n  }\n\n  /**\n   * Throws an error if the passed name is not a defined Interest name.\n   * @param name The name of an interest.\n   */\n  assertName(name) {\n    this.findDoc(name);\n  }\n\n  /**\n   * Throws an error if the passed list of names are not all Interest names.\n   * @param names An array of (hopefully) Interest names.\n   */\n  assertNames(names) {\n    _.each(names, name => this.assertName(name));\n  }\n\n  /**\n   * Returns the docID associated with the passed Interest name, or throws an error if it cannot be found.\n   * @param { String } name An interest name.\n   * @returns { String } The docID associated with the name.\n   * @throws { Meteor.Error } If name is not associated with an Interest.\n   */\n  findID(name) {\n    return (this.findDoc(name)._id);\n  }\n\n  /**\n   * Returns the docIDs associated with the array of Interest names, or throws an error if any name cannot be found.\n   * If nothing is passed, then an empty array is returned.\n   * @param { String[] } names An array of interest names.\n   * @returns { String[] } The docIDs associated with the names.\n   * @throws { Meteor.Error } If any instance is not an Interest name.\n   */\n  findIDs(names) {\n    return (names) ? names.map((instance) => this.findID(instance)) : [];\n  }\n\n  /**\n   * Returns an object representing the Interest docID in a format acceptable to define().\n   * @param docID The docID of an Interest.\n   * @returns { Object } An object representing the definition of docID.\n   */\n  dumpOne(docID) {\n    const doc = this.findDoc(docID);\n    const name = doc.name;\n    const description = doc.description;\n    return { name, description };\n  }\n}\n\n/**\n * Provides the singleton instance of this class to all other entities.\n */\nexport const Interests = new InterestCollection();\n","import './InterestCollection.js';\n","import SimpleSchema from 'simpl-schema';\nimport BaseCollection from '/imports/api/base/BaseCollection';\nimport { Interests } from '/imports/api/interest/InterestCollection';\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport { _ } from 'meteor/underscore';\nimport { Tracker } from 'meteor/tracker';\n\n/** @module Profile */\n\n/**\n * Profiles provide portfolio data for a user.\n * @extends module:Base~BaseCollection\n */\nclass ProfileCollection extends BaseCollection {\n\n  /**\n   * Creates the Profile collection.\n   */\n  constructor() {\n    super('Profile', new SimpleSchema({\n      username: { type: String },\n      // Remainder are optional\n      firstName: { type: String, optional: true },\n      lastName: { type: String, optional: true },\n      bio: { type: String, optional: true },\n      interests: { type: Array, optional: true },\n      'interests.$': { type: String },\n      title: { type: String, optional: true },\n      location: { type: String, optional: true },\n      picture: { type: SimpleSchema.RegEx.Url, optional: true },\n      github: { type: SimpleSchema.RegEx.Url, optional: true },\n      facebook: { type: SimpleSchema.RegEx.Url, optional: true },\n      instagram: { type: SimpleSchema.RegEx.Url, optional: true },\n    }, { tracker: Tracker }));\n  }\n\n  /**\n   * Defines a new Profile.\n   * @example\n   * Profiles.define({ firstName: 'Philip',\n   *                   lastName: 'Johnson',\n   *                   username: 'johnson',\n   *                   bio: 'I have been a professor of computer science at UH since 1990.',\n   *                   interests: ['Application Development', 'Software Engineering', 'Databases'],\n   *                   title: 'Professor of Information and Computer Sciences',\n   *                   picture: 'http://philipmjohnson.org/headshot.jpg',\n   *                   github: 'https://github.com/philipmjohnson',\n   *                   facebook: 'https://facebook.com/philipmjohnson',\n   *                   instagram: 'https://instagram.com/philipmjohnson' });\n   * @param { Object } description Object with required key username.\n   * Remaining keys are optional.\n   * Username must be unique for all users. It should be the UH email account.\n   * Interests is an array of defined interest names.\n   * @throws { Meteor.Error } If a user with the supplied username already exists, or\n   * if one or more interests are not defined, or if github, facebook, and instagram are not URLs.\n   * @returns The newly created docID.\n   */\n  define({ firstName = '', lastName = '', username, bio = '', interests = [], picture = '', title = '', github = '',\n      facebook = '', instagram = '', location = '' }) {\n    // make sure required fields are OK.\n    const checkPattern = { firstName: String, lastName: String, username: String, bio: String, picture: String,\n      title: String, location: String };\n    check({ firstName, lastName, username, bio, picture, title, location }, checkPattern);\n\n    if (this.find({ username }).count() > 0) {\n      throw new Meteor.Error(`${username} is previously defined in another Profile`);\n    }\n\n    // Throw an error if any of the passed Interest names are not defined.\n    Interests.assertNames(interests);\n\n    // Throw an error if there are duplicates in the passed interest names.\n    if (interests.length !== _.uniq(interests).length) {\n      throw new Meteor.Error(`${interests} contains duplicates`);\n    }\n\n    return this._collection.insert({ firstName, lastName, username, bio, interests, picture, title, github,\n      facebook, instagram, location });\n  }\n\n  /**\n   * Returns an object representing the Profile docID in a format acceptable to define().\n   * @param docID The docID of a Profile.\n   * @returns { Object } An object representing the definition of docID.\n   */\n  dumpOne(docID) {\n    const doc = this.findDoc(docID);\n    const firstName = doc.firstName;\n    const lastName = doc.lastName;\n    const username = doc.username;\n    const bio = doc.bio;\n    const interests = doc.interests;\n    const picture = doc.picture;\n    const title = doc.title;\n    const location = doc.location;\n    const github = doc.github;\n    const facebook = doc.facebook;\n    const instagram = doc.instagram;\n    return { firstName, lastName, username, bio, interests, picture, title, github, facebook, instagram, location };\n  }\n}\n\n/**\n * Provides the singleton instance of this class to all other entities.\n */\nexport const Profiles = new ProfileCollection();\n","import './ProfileCollection.js';\n","import { Accounts } from 'meteor/accounts-base';\nimport { Profiles } from '/imports/api/profile/ProfileCollection';\n\n/* eslint-disable no-console */\n\n/* Create a profile document for this user if none exists already. */\nAccounts.validateNewUser(function validate(user) {\n  if (user) {\n    const username = user.services.cas.id;\n    if (!Profiles.isDefined(username)) {\n      Profiles.define({ username });\n    }\n  }\n  // All UH users are valid for BowFolios.\n  return true;\n});\n","import './accounts';\nimport './initialize-database';\nimport './publications';\n","import { Meteor } from 'meteor/meteor';\nimport { Profiles } from '/imports/api/profile/ProfileCollection';\nimport { Interests } from '/imports/api/interest/InterestCollection';\nimport { _ } from 'meteor/underscore';\n\n/* global Assets */\n\n/* eslint-disable no-console */\n\n/**\n * Returns the definition array associated with collectionName in the restoreJSON structure.\n * @param restoreJSON The restore file contents.\n * @param collection The collection of interest.\n */\nfunction getDefinitions(restoreJSON, collection) {\n  return _.find(restoreJSON.collections, obj => obj.name === collection).contents;\n}\n\n/**\n * Given a collection and the restoreJSON structure, looks up the definitions and invokes define() on them.\n * @param collection The collection to be restored.\n * @param restoreJSON The structure containing all of the definitions.\n */\nfunction restoreCollection(collection, restoreJSON) {\n  const definitions = getDefinitions(restoreJSON, collection._collectionName);\n  console.log(`Defining ${definitions.length} ${collection._collectionName} documents.`);\n  _.each(definitions, definition => collection.define(definition));\n}\n\nMeteor.startup(() => {\n  /** Only initialize database if it's empty. */\n  const collectionList = [Interests, Profiles];\n  const totalDocuments = _.reduce(collectionList, function reducer(memo, collection) {\n    return memo + collection.count();\n  }, 0);\n  if (totalDocuments === 0) {\n    const fileName = Meteor.settings.public.initialDatabaseFileName;\n    console.log(`Restoring database from file ${fileName}.`);\n    const restoreJSON = JSON.parse(Assets.getText(fileName));\n    _.each(collectionList, collection => {\n      restoreCollection(collection, restoreJSON);\n    });\n  }\n});\n","import { Interests } from '/imports/api/interest/InterestCollection';\nimport { Profiles } from '/imports/api/profile/ProfileCollection';\n\nInterests.publish();\nProfiles.publish();\n","import '/imports/startup/server';\nimport '/imports/api/base';\nimport '/imports/api/profile';\nimport '/imports/api/interest';\n"]}